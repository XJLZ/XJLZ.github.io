<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MyCat安装使用</title>
    <link href="/2021/05/28/MyCat/"/>
    <url>/2021/05/28/MyCat/</url>
    
    <content type="html"><![CDATA[<h4 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h4><p>下载目录：<a href="http://dl.mycat.org.cn/">http://dl.mycat.org.cn/</a></p><h5 id="上传-解压"><a href="#上传-解压" class="headerlink" title="上传 解压"></a>上传 解压</h5><pre><code class="hljs css"><span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">-zxvf</span> <span class="hljs-selector-tag">Mycat-server-1</span><span class="hljs-selector-class">.6</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.4-release-20200105164103-linux</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> </code></pre><h5 id="重要的三个配置文件"><a href="#重要的三个配置文件" class="headerlink" title="重要的三个配置文件"></a>重要的三个配置文件</h5><pre><code class="hljs crmsh">cd mycat/conf    schema.<span class="hljs-keyword">xml</span>        <span class="hljs-title"># 定义逻辑库,表,分片节点等内容</span><span class="hljs-title">    rule</span>.<span class="hljs-keyword">xml</span>        <span class="hljs-title"># 定义分片规则</span><span class="hljs-title">    server</span>.<span class="hljs-keyword">xml</span>        <span class="hljs-title"># mycat</span>服务配置</code></pre><h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h4><h5 id="修改server-xml"><a href="#修改server-xml" class="headerlink" title="修改server.xml"></a>修改server.xml</h5><p><em><!-- 配置 MyCat 用户名 密码 --></em></p><pre><code class="hljs applescript">&lt;user <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;mycat&quot;</span> defaultAccount=<span class="hljs-string">&quot;true&quot;</span>&gt;    &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;<span class="hljs-number">123456</span>&lt;/<span class="hljs-keyword">property</span>&gt;    &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;TESTDB&lt;/<span class="hljs-keyword">property</span>&gt;    &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;defaultSchema&quot;</span>&gt;TESTDB&lt;/<span class="hljs-keyword">property</span>&gt;&lt;/user&gt;</code></pre><p><img src="https://i.loli.net/2021/05/28/XKktJQwYia36GCF.png" alt="image-20210528110254129"></p><h5 id="修改schema-xml"><a href="#修改schema-xml" class="headerlink" title="修改schema.xml"></a>修改schema.xml</h5><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mycat</span>:schema <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;schema.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mycat:schema</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 相当与一个虚拟数据库,这个库中的表格映射了test库中的表 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TESTDB&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 数据节点 host150 机器内的 mycat 数据库 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;host150&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;mycat&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;host150&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;2&quot;</span></span><span class="hljs-tag">                          <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;jdbc&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span>                <span class="hljs-comment">&lt;!-- 心跳 默认就好 --&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span>                <span class="hljs-comment">&lt;!-- 读写分离 --&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostM1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;jdbc:mysql://192.168.186.150:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span>                         <span class="hljs-tag">&lt;<span class="hljs-name">readHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostS1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;jdbc:mysql://192.168.186.151:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">readHost</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:schema</span>&gt;</span></code></pre><p><img src="https://i.loli.net/2021/05/28/DJvq1XdKa6mpUo4.png" alt="image-20210528110517024"></p><pre><code class="hljs lsl">读写分离 一般设置为 <span class="hljs-number">1</span> 或者 <span class="hljs-number">3</span>，这里为了看清效果 设置为 <span class="hljs-number">2</span>balance=<span class="hljs-string">&quot;2&quot;</span>负载均衡类型，目前的取值有<span class="hljs-number">3</span>种：<span class="hljs-number">1.</span> balance=<span class="hljs-string">&quot;0&quot;</span>, 不开启读写分离机制，所有读操作都发送到当前可用的 writehost 上。 <span class="hljs-number">2.</span> balance=<span class="hljs-string">&quot;1&quot;</span>，全部的 readhost 与 standby wtirehost 参与select语句的负载均衡，简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与M2互为主备)，正常情况下，M2,S1,S2 都参与 select 语句的负载均衡。 <span class="hljs-number">3.</span> balance=<span class="hljs-string">&quot;2&quot;</span>，所以读操作都随机的在 writehost、readhost 上分发。<span class="hljs-number">4.</span> balance=<span class="hljs-string">&quot;3&quot;</span>，所有读请求随机的分发到 writehost 对应的 readhost 执行，writehost不负担读压力，注意 balance=<span class="hljs-number">3</span> 只有<span class="hljs-number">1.4</span>及其以后版本有，<span class="hljs-number">1.3</span>没有。</code></pre><h4 id="3-启动-amp-登录"><a href="#3-启动-amp-登录" class="headerlink" title="3.启动&amp;登录"></a>3.启动&amp;登录</h4><pre><code class="hljs crmsh">bin/mycat <span class="hljs-literal">start</span></code></pre><pre><code class="hljs angelscript">mysql -umycat -p123456 -P <span class="hljs-number">8066</span> -h <span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.150</span></code></pre><p><img src="https://i.loli.net/2021/05/28/umHdGDIxKP38aqX.png" alt="image-20210528112139346"></p><h4 id="4-搭建读写分离"><a href="#4-搭建读写分离" class="headerlink" title="4.搭建读写分离"></a>4.搭建读写分离</h4><h5 id="一主一从"><a href="#一主一从" class="headerlink" title="一主一从"></a>一主一从</h5><h6 id="1-主机配置"><a href="#1-主机配置" class="headerlink" title="1.主机配置"></a>1.主机配置</h6><ul><li>vim /etc/mt.cnf </li></ul><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><span class="hljs-comment"># 主服务器唯一 ID</span><span class="hljs-attr">server_id</span>=<span class="hljs-number">1</span><span class="hljs-comment"># 启用二进制日志</span><span class="hljs-attr">log-bin</span>=mysql-bin<span class="hljs-comment"># 设置 logbin 格式</span><span class="hljs-attr">binlog-format</span>=STATEMENT<span class="hljs-comment"># 设置不要复制的数据库</span><span class="hljs-attr">binlog-ignore-db</span>=mysql<span class="hljs-attr">binlog-ignore-db</span>=infomation_schema<span class="hljs-comment"># 设置需要复制的数据库</span><span class="hljs-attr">binlog-do-db</span>=mycat</code></pre><h5 id=""><a href="#" class="headerlink" title=""></a><em><!-- binlog_format 三种格式--></em></h5><pre><code class="hljs vala"><span class="hljs-meta"># master写入执行的SQL语句到binlog中，从库读取这些SQL语句并执行，</span><span class="hljs-meta"># 这种基于SQL语句的复制方式是MySQL最早支持的复制方式。</span><span class="hljs-meta"># 缺点 执行某些函数时可能造成主从不一致的情况 如 update ... time=now()</span>binlog_format=statement<span class="hljs-meta"># 可以将master的binlog_format配置成同时使用基于statement和row两者的组合格式，</span><span class="hljs-meta"># 它记录日志取决于修改的类型，选择合适的格式来记录该修改。</span><span class="hljs-meta"># 默认情况下使用statement格式记录日志，特定情况下转换成基于row格式记录。</span><span class="hljs-meta"># 缺点 识别不了特定的名称[系统变量] 如 @@host name</span>binlog_format=mixed<span class="hljs-meta"># MySQL5.7.7版本之后，把binlog_format的默认值修改为了row，</span><span class="hljs-meta"># master将修改表的event写入binlog中，并且master将该binlog发送给slave，</span><span class="hljs-meta"># slave重放binlog中的event。基于row格式复制时最安全的复制，slave需要的行锁更少。</span><span class="hljs-meta"># 复制过程中建议使用row格式，其他格式可能会造成主从数据不一致的情况。</span><span class="hljs-meta"># 缺点 执行 100 万次更新,会记录一百万次</span>binlog_format=row</code></pre><h6 id="2-从机配置"><a href="#2-从机配置" class="headerlink" title="2.从机配置"></a>2.从机配置</h6><ul><li>vim /etc/mt.cnf </li></ul><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><span class="hljs-comment"># 从机服务器唯一 ID</span><span class="hljs-attr">server_id</span>=<span class="hljs-number">2</span><span class="hljs-comment"># 启用中继日志</span><span class="hljs-attr">relay-log</span>=mysql-relay</code></pre><p><strong>主从机都关闭防火墙或者开启3306端口 ，重启 mysql 服务</strong></p><h5 id="主机上创建账户并授权-slave"><a href="#主机上创建账户并授权-slave" class="headerlink" title="主机上创建账户并授权 slave"></a>主机上创建账户并授权 slave</h5><pre><code class="hljs sql">1.登录数据库mysql -uroot -proot2.创建账户并授权 slave <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">REPLICATION</span> <span class="hljs-keyword">SLAVE</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;sasa&#x27;</span>;3.刷新权限<span class="hljs-keyword">FLUSH</span> <span class="hljs-keyword">PRIVILEGES</span>;4.查看主机状态<span class="hljs-keyword">show</span> <span class="hljs-keyword">master</span> <span class="hljs-keyword">status</span>;</code></pre><p>+—————————+————-+———————–+————————————–+—————————-+<br>| File                           | Position | Binlog_Do_DB | Binlog_Ignore_DB               | Executed_Gtid_Set |<br>+—————————+————-+———————–+————————————–+—————————-+<br>| mysql-bin.000008 |     3703 | mycat                 | mysql,infomation_schema |                                  |<br>+—————————+————-+———————–+————————————–+—————————-+</p><p>ps: <strong>此后，主机不要做任何操作</strong></p><h5 id="从机配置"><a href="#从机配置" class="headerlink" title="从机配置"></a>从机配置</h5><pre><code class="hljs routeros">1.登录数据库mysql -uroot -proot2.重置mysql&gt; stop slave;  mysql&gt; reset master;3.配置CHANGE MASTER <span class="hljs-keyword">TO</span> <span class="hljs-attribute">MASTER_HOST</span>=<span class="hljs-string">&#x27;192.168.186.150&#x27;</span>,<span class="hljs-attribute">MASTER_USER</span>=<span class="hljs-string">&#x27;slave&#x27;</span>,<span class="hljs-attribute">MASTER_PASSWORD</span>=<span class="hljs-string">&#x27;sasa&#x27;</span>,<span class="hljs-attribute">MASTER_LOG_FILE</span>=<span class="hljs-string">&#x27;mysql-bin.000008&#x27;</span>,MASTER_LOG_POS=3703;4.从机执行复制功能start slave;5.查看从机服务状态show slave status\G;</code></pre><p><img src="https://i.loli.net/2021/05/28/yMWzaxAohXFscLS.png" alt="image-20210528130555085"></p><p><img src="https://i.loli.net/2021/05/28/XOS6Cm8Ict5NDvk.png" alt="image-20210528131440355"></p><p>遇到的问题： <a href="https://blog.csdn.net/leshami/article/details/43854505">https://blog.csdn.net/leshami/article/details/43854505</a></p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>进入主机mysql</p><p>插入一条数据</p><pre><code class="hljs less"><span class="hljs-selector-tag">insert</span> <span class="hljs-selector-tag">into</span> <span class="hljs-selector-tag">user</span> <span class="hljs-selector-tag">values</span>(<span class="hljs-number">8</span>,<span class="hljs-variable">@@hostname</span>);</code></pre><p>查看主从机数据</p><p>主：</p><p><img src="https://i.loli.net/2021/05/28/jpmbc9KJuny8fAx.png" alt="image-20210528140816254"></p><p>从：</p><p><img src="https://i.loli.net/2021/05/28/njtefbCBFz5g3l6.png" alt="image-20210528140843508"></p><p>主机登录mycat</p><pre><code class="hljs routeros">mysql -umycat -p123456 -P 8066 -h 192.168.186.150use TESTDB;select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> user </span>where id = 8;</code></pre><p><img src="https://i.loli.net/2021/05/28/1ew5CDNQMpcOLsU.png" alt="image-20210528141021129"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>MySql</tag>
      
      <tag>MyCat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python3脚本安装</title>
    <link href="/2021/05/20/Python3%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <url>/2021/05/20/Python3%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="准备压缩包"><a href="#准备压缩包" class="headerlink" title="准备压缩包"></a>准备压缩包</h4><p>下载网站：<a href="https://www.python.org/ftp/python">https://www.python.org/ftp/python</a> </p><p>例如：<a href="https://www.python.org/ftp/python/3.9.4/Python-3.9.4.tgz">https://www.python.org/ftp/python/3.9.4/Python-3.9.4.tgz</a>     </p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>openssl-devel <span class="hljs-keyword">bzip2-devel </span>expat-devel gdbm-devel readline-devel sqlite-devel</code></pre><h4 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h4><p><strong>自己修改压缩包存放目录和文件名</strong></p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">cd</span> /root<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;开始解压&#x27;</span>tar -zxvf Python-3.6.5.tgz<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;进入文件夹&#x27;</span><span class="hljs-built_in">cd</span> Python-3.6.5<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;创建安装目录&#x27;</span>mkdir /usr/<span class="hljs-built_in">local</span>/python3<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;指明安装路径&#x27;</span>./configure -prefix=/usr/<span class="hljs-built_in">local</span>/python3<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;编译安装&#x27;</span>make &amp;&amp; make install<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;为python3创建软连接&#x27;</span>ln -s /usr/<span class="hljs-built_in">local</span>/python3/bin/python3 /usr/bin/python3<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;为pip3创建软连接&#x27;</span>ln -s /usr/<span class="hljs-built_in">local</span>/python3/bin/pip3 /usr/bin/pip3<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;验证&#x27;</span>python3pip3 -V </code></pre><p><strong>写完脚本记得添加执行权限</strong></p><pre><code class="hljs css"><span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">xxxx</span><span class="hljs-selector-class">.sh</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Python3</tag>
      
      <tag>ShellScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minio</title>
    <link href="/2021/04/30/Minio/"/>
    <url>/2021/04/30/Minio/</url>
    
    <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p><strong>Centos7</strong></p><h4 id="安装Minio"><a href="#安装Minio" class="headerlink" title="安装Minio"></a>安装Minio</h4><pre><code class="hljs awk"><span class="hljs-number">1</span>.下载    wget https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/server/mi</span>nio<span class="hljs-regexp">/release/</span>linux-amd64/minio    或    curl https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/server/mi</span>nio<span class="hljs-regexp">/release/</span>linux-amd64/minio &gt; minio<span class="hljs-number">2</span>.添加执行权限    chmod +x minio<span class="hljs-number">3</span>.创建存储目录    mkdir <span class="hljs-regexp">/home/mi</span>nio/data<span class="hljs-number">4</span>.防火墙开启端口    firewall-cmd --zone=public --add-port=<span class="hljs-number">9999</span>/tcp --permanent    firewall-cmd --reload<span class="hljs-number">5</span>.运行（指定端口）---默认端口是<span class="hljs-number">9000</span>    nohup .<span class="hljs-regexp">/minio server --address 本机IP:9999 /</span>home<span class="hljs-regexp">/minio/</span>data<span class="hljs-regexp">/ &gt; /</span>home<span class="hljs-regexp">/minio/mi</span>nio.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<span class="hljs-number">6</span>.默认端口启动    nohup .<span class="hljs-regexp">/minio server /</span>home<span class="hljs-regexp">/minio/</span>data<span class="hljs-regexp">/ &gt; /</span>home<span class="hljs-regexp">/minio/mi</span>nio.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<span class="hljs-number">7</span>.访问web管理界面    IP:<span class="hljs-number">9999</span>    默认账号密码都是 minioadmin</code></pre><h4 id="安装MC"><a href="#安装MC" class="headerlink" title="安装MC"></a>安装MC</h4><pre><code class="hljs awk"><span class="hljs-number">1</span>.下载    wget https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/client/m</span>c<span class="hljs-regexp">/release/</span>linux-amd64/mc    或    curl https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/client/m</span>c<span class="hljs-regexp">/release/</span>linux-amd64/mc &gt; mc<span class="hljs-number">2</span>.添加执行权限    chmod +x mc</code></pre><h4 id="给MC添加minio"><a href="#给MC添加minio" class="headerlink" title="给MC添加minio"></a>给MC添加minio</h4><pre><code class="hljs arduino">./mc <span class="hljs-built_in">config</span> host add minio http:<span class="hljs-comment">//本机IP:9999 minioadmin minioadmin</span></code></pre><p><img src="https://i.loli.net/2021/04/30/rBFEzbXKsPgUjy7.png" alt="image-20210430113608186"></p><h4 id="使用MC操作minio"><a href="#使用MC操作minio" class="headerlink" title="使用MC操作minio"></a>使用MC操作minio</h4><p>MinIO Client完全指南：<a href="http://docs.minio.org.cn/docs/master/minio-client-complete-guide">http://docs.minio.org.cn/docs/master/minio-client-complete-guide</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apk反编译</title>
    <link href="/2021/01/19/Apk%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <url>/2021/01/19/Apk%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h4 id="1-工具准备"><a href="#1-工具准备" class="headerlink" title="1.工具准备"></a>1.工具准备</h4><p>1） </p><ol start="2"><li></li></ol><ol start="3"><li></li></ol><p>或者</p><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><p>1、将apktool.bat和apktool.jar,然后把这两个工具放到C:\Windows底下</p><p>2、命令</p><pre><code class="hljs shell">apktool d D:\test\Andorid\demo.apk -o D:\test\Andorid\demo -f</code></pre><p>​    将apk反编译，目标目录为 -o 后面的参数 ，-f 为覆盖</p><p>3、使用压缩软件将apk解压，找到classes.dex</p><p>4、解压dex-tools-2.0.zip到任意目录，将classes.dex复制到该解压目录，使用命令</p><pre><code class="hljs shell">d2j-dex2jar.bat classes.dex</code></pre><p>​    会得到一个jar包：classes-dex2jar.jar</p><p>5、双击jadx-gui-1.2.0-no-jre-win.exe，打开上面得到的jar包，即可看到源代码</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Apk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Compose</title>
    <link href="/2021/01/18/Docker-Compose/"/>
    <url>/2021/01/18/Docker-Compose/</url>
    
    <content type="html"><![CDATA[<h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><p><a href="https://github.com/docker/compose">https://github.com/docker/compose</a></p><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h4><pre><code class="hljs shell">sudo chmod +x /usr/local/bin/docker-compose</code></pre><h4 id="4-编写docker-compose-yml"><a href="#4-编写docker-compose-yml" class="headerlink" title="4.编写docker-compose.yml"></a>4.编写docker-compose.yml</h4><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><span class="hljs-symbol">services:</span>  docker-test:<span class="hljs-symbol">    image:</span> docker-test:latest <span class="hljs-meta"># 指定基础镜像</span><span class="hljs-symbol">    container_name:</span> docker-testr <span class="hljs-meta"># 容器名称</span><span class="hljs-symbol">    volumes:</span>      - <span class="hljs-string">&quot;/docker/log:/log&quot;</span> <span class="hljs-meta">#日志挂载</span><span class="hljs-symbol">    command:</span>      - <span class="hljs-string">&quot;--mysqlurl=192.168.33.10&quot;</span>      - <span class="hljs-string">&quot;--username=root&quot;</span>      - <span class="hljs-string">&quot;--password=root&quot;</span><span class="hljs-symbol">    ports:</span>      - <span class="hljs-number">8001</span>:<span class="hljs-number">8001</span> <span class="hljs-meta"># 端口映射</span><span class="hljs-symbol">  mysql:</span><span class="hljs-symbol">    image:</span> mysql:<span class="hljs-number">5.7</span><span class="hljs-number">.24</span><span class="hljs-symbol">    container_name:</span> mysql<span class="hljs-symbol">    environment:</span><span class="hljs-symbol">      MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123456</span><span class="hljs-symbol">    ports:</span>      - <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span><span class="hljs-symbol">    volumes:</span>      - <span class="hljs-meta-keyword">/febs/</span>mysql/data:<span class="hljs-meta-keyword">/var/</span>lib/mysql <span class="hljs-meta">#挂载 MySQL数据</span><span class="hljs-symbol">  redis:</span><span class="hljs-symbol">    image:</span> redis:<span class="hljs-number">4.0</span><span class="hljs-number">.14</span><span class="hljs-symbol">    container_name:</span> redis<span class="hljs-symbol">    command:</span> redis-server <span class="hljs-meta-keyword">/usr/</span>local<span class="hljs-meta-keyword">/etc/</span>redis/redis.conf --appendonly yes<span class="hljs-symbol">    volumes:</span>      - <span class="hljs-meta-keyword">/febs/</span>redis/data:/data <span class="hljs-meta">#挂载 Redis数据</span>      - <span class="hljs-meta-keyword">/febs/</span>redis<span class="hljs-meta-keyword">/conf/</span>redis.conf:<span class="hljs-meta-keyword">/usr/</span>local<span class="hljs-meta-keyword">/etc/</span>redis/redis.conf <span class="hljs-meta">#挂载 Redis配置</span><span class="hljs-symbol">    ports:</span>      - <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span></code></pre><p><strong>挂载/映射—&gt;   宿主机:docker镜像</strong></p><h4 id="5-启动镜像"><a href="#5-启动镜像" class="headerlink" title="5.启动镜像"></a>5.启动镜像</h4><p>在<code>docker-compose.yml</code>目录下运行<code>docker-compose up -d</code> 后台启动服务</p><h4 id="6-停止运行"><a href="#6-停止运行" class="headerlink" title="6.停止运行"></a>6.停止运行</h4><p>在<code>docker-compose.yml</code>目录下运行<code>docker-compose stop</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>收集的一些博客</title>
    <link href="/2020/12/24/SomeBlogs/"/>
    <url>/2020/12/24/SomeBlogs/</url>
    
    <content type="html"><![CDATA[<h4 id="收集的一些博客"><a href="#收集的一些博客" class="headerlink" title="收集的一些博客"></a>收集的一些博客</h4><p>canal同步mysql数据到es、mysql：<a href="https://blog.csdn.net/tuesdayma/article/details/103294448">https://blog.csdn.net/tuesdayma/article/details/103294448</a></p><p>Nginx upstream配置说明负载均衡：<a href="https://www.jianshu.com/p/50dfb0d69983">https://www.jianshu.com/p/50dfb0d69983</a></p><p>Centos7安装ffmpeg：<a href="https://www.myfreax.com/how-to-install-ffmpeg-on-centos-7/">https://www.myfreax.com/how-to-install-ffmpeg-on-centos-7/</a></p><p>Sentinel-Nacos：<a href="https://www.sonake.com/2019/12/16/Sentinel-Nacos%E5%AE%9E%E7%8E%B0%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96/">https://www.sonake.com/2019/12/16/Sentinel-Nacos%E5%AE%9E%E7%8E%B0%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96/</a></p><p>Java证书工具keytool用法总结：<a href="https://blog.csdn.net/w47_csdn/article/details/87564029">https://blog.csdn.net/w47_csdn/article/details/87564029</a></p><p>Java8 Stream_1：<a href="https://blog.csdn.net/mu_wind/article/details/109516995">https://blog.csdn.net/mu_wind/article/details/109516995</a></p><p>Java8 Stream_2：<a href="https://blog.csdn.net/qq_28410283/article/details/80783946">https://blog.csdn.net/qq_28410283/article/details/80783946</a></p><p>Selenium常用API：<a href="https://blog.csdn.net/qq_22003641/article/details/79137327">https://blog.csdn.net/qq_22003641/article/details/79137327</a></p><p>使用JDK自带的JVM监控器 - Java VisualVM：<a href="https://blog.csdn.net/u011391839/article/details/76984995">https://blog.csdn.net/u011391839/article/details/76984995</a></p><p>Centos7安装Python3：<a href="https://www.jianshu.com/p/e191f9dc1186">https://www.jianshu.com/p/e191f9dc1186</a></p><p>Anaconda清华镜像源的使用及安装P：<a href="https://blog.csdn.net/WannaSeaU/article/details/88427010">https://blog.csdn.net/WannaSeaU/article/details/88427010</a></p><p>SpringCloud面试题（总结最全面：<a href="https://juejin.cn/post/6844904125717544973">https://juejin.cn/post/6844904125717544973</a></p><p>通过父级id获取到其下所有子级（无穷级）——Mysql函数实现：<a href="https://my.oschina.net/u/4293890/blog/3813827">https://my.oschina.net/u/4293890/blog/3813827</a></p><p>MyCat 从入门到放弃：<a href="https://blog.csdn.net/qq_41143671/article/details/112960048">https://blog.csdn.net/qq_41143671/article/details/112960048</a></p><pre><code class="hljs css"><span class="hljs-selector-tag">D</span>:\<span class="hljs-selector-tag">test</span>\<span class="hljs-selector-tag">secret</span>&gt;<span class="hljs-selector-tag">keytool</span> <span class="hljs-selector-tag">-list</span> <span class="hljs-selector-tag">-v</span> <span class="hljs-selector-tag">-keystore</span> <span class="hljs-selector-tag">default</span><span class="hljs-selector-class">.keystore</span>  口令：1234<span class="hljs-selector-tag">qwer</span><span class="hljs-selector-tag">MD5</span><span class="hljs-selector-pseudo">:82</span><span class="hljs-selector-pseudo">:AD</span><span class="hljs-selector-pseudo">:9F</span><span class="hljs-selector-pseudo">:60</span><span class="hljs-selector-pseudo">:10</span><span class="hljs-selector-pseudo">:4F</span><span class="hljs-selector-pseudo">:AD</span><span class="hljs-selector-pseudo">:4A</span><span class="hljs-selector-pseudo">:83</span><span class="hljs-selector-pseudo">:7F</span><span class="hljs-selector-pseudo">:70</span><span class="hljs-selector-pseudo">:AA</span><span class="hljs-selector-pseudo">:C2</span><span class="hljs-selector-pseudo">:A7</span><span class="hljs-selector-pseudo">:2B</span><span class="hljs-selector-pseudo">:C8</span>82<span class="hljs-selector-tag">ad9f60104fad4a837f70aac2a72bc8</span>友盟<span class="hljs-selector-tag">key</span>：5<span class="hljs-selector-tag">fc60196094d637f31309c41</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>blogs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud 服务注册中心</title>
    <link href="/2020/12/18/Spring%20Cloud%20%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <url>/2020/12/18/Spring%20Cloud%20%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是服务注册中心"><a href="#什么是服务注册中心" class="headerlink" title="什么是服务注册中心"></a>什么是服务注册中心</h4><p>​        服务注册中心就是，在微服务体系中，其中有一个服务是用来集中管理这些微服务实例，微服务间的调用只需要知道对方的服务名，而无需关注具体的IP和端口，便于微服务架构的拓展和维护。</p><h4 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h4><p>​        CAP理论是分布式架构中重要理论，CAP不能都取，只能取其二</p><blockquote><ul><li>一致性(Consistency) (所有节点在同一时间具有相同的数据)</li><li>可用性(Availability) (保证每个请求不管成功或者失败都有响应)</li><li>分区容错性(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)</li></ul></blockquote><h4 id="常用的注册中心"><a href="#常用的注册中心" class="headerlink" title="常用的注册中心"></a>常用的注册中心</h4><blockquote><ul><li>Eureka</li><li>Zookeeper</li><li>Consul</li><li>Nacos</li></ul></blockquote><h4 id="Eureka-gt-AP"><a href="#Eureka-gt-AP" class="headerlink" title="Eureka &gt; AP"></a>Eureka &gt; AP</h4><p>​        Eureka遵信AP原则，即高可用以及分隔容忍性，最终保证一致性，在Eureka Server集群中，由于其采用的是p2p对等通信，互相注册的方式，去除了中心化，所以只要还存在其中一个服务，服务就可以正常注册和发现，当宕机的Eureka Server可用时，就会请求复制操作，同步当前可用Eureka Server所有的服务节点</p><h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><h6 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h6><p>​        在注册中心这个微服务中引入依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>​        在application.yml中添加配置</p><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">www.eureka7000.com</span> <span class="hljs-comment">#eureka服务端的应用实例主机名</span>  <span class="hljs-attr">client:</span>    <span class="hljs-comment">#false表示不向注册中心注册自己</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span>      <span class="hljs-comment">#集群指向其它eureka</span><span class="hljs-comment">#      defaultZone: http://www.eureka7001.com:7001/eureka/</span>      <span class="hljs-comment">#单机就是7000自己</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://www.eureka7000.com:7000/eureka/</span>  <span class="hljs-attr">server:</span>    <span class="hljs-comment"># false 关闭自我保护机制，保证不可用服务呗及时剔除(不推荐)</span><span class="hljs-comment">#    enable-self-preservation: false</span>    <span class="hljs-comment"># Eureka Server 清理无效节点的时间间隔（单位：毫秒）</span><span class="hljs-comment">#    eviction-interval-timer-in-ms: 2000</span></code></pre><p>​        最后在该服务的启动类上加上注解：**@EnableEurekaServer**</p><p>集群方式启动：可以看到副本列表中有另一个Eureka Server的实例主机名</p><p><img src="https://i.loli.net/2020/12/18/bzIGvP38Wwgd5SO.png" alt="image-20201218095906560"></p><p><img src="https://i.loli.net/2020/12/18/ALwhEKFaOmxZNID.png" alt="image-20201218095933475"></p><h6 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a><strong>Eureka Client</strong></h6><p>​        在资源微服务中引入依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>​        在application.yml中添加配置</p><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-comment"># 隐藏域名</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">payment8001</span>    <span class="hljs-comment"># 左下角访问路径可以显示IP地址</span>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 向Eureka 服务端发送心跳的间隔时间，单位为秒，用于服务续约。这里配置为20秒，即每隔20秒向Eureka Server发送心跳，表明当前服务没有宕机；</span><span class="hljs-comment">#    lease-renewal-interval-in-seconds: 20</span>    <span class="hljs-comment"># Eureka服务端在收到最后一次心跳后等待时间上限，（秒），默认90秒，超时剔除服务</span><span class="hljs-comment">#    lease-expiration-duration-in-seconds: 2</span>  <span class="hljs-attr">client:</span>    <span class="hljs-comment">#表示是否将自己注册进Eureka Server默认为true</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment">#是否从Eureka Server抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">service-url:</span>    <span class="hljs-comment"># 集群</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://www.eureka7001.com:7001/eureka,http://www.eureka7000.com:7000/eureka</span>    <span class="hljs-comment"># 单节点</span><span class="hljs-comment">#      defaultZone: http://www.eureka7000.com:7000/eureka</span></code></pre><p>​    最后在该服务的启动类上加上注解：**@EnableEurekaClient**</p><p>​    可以看出，在使用了eureka.instance.instance-id之后隐藏了服务id以及端口</p><p><img src="https://i.loli.net/2020/12/18/flqzcHDsYZEWNpX.png" alt="image-20201218102313617"></p><p><img src="https://i.loli.net/2020/12/18/gYrUD3p5xMw4lHk.png" alt="image-20201218102421648"></p><p>​        当鼠标悬浮到“payment8002”上时，浏览器左下角显示IP地址</p><p><img src="https://i.loli.net/2020/12/18/rAsZjkCJ3e4qMWm.png" alt="image-20201218102707248"></p><h4 id="Zookeeper-gt-CP"><a href="#Zookeeper-gt-CP" class="headerlink" title="Zookeeper &gt; CP"></a>Zookeeper &gt; CP</h4><p>​    Zookeeper从设计模式角度来理解：是一个基于观察者模式设计（一个领导者(Leader)，多个跟随者(Follower)组成的集群）的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出相应的反应。</p><p>​    Zookeeper遵循CP原则，保证容错和数据实时一致性，从 Zookeeper 的实际应用情况来看，在使用 Zookeeper 获取服务列表时，如果此时的 Zookeeper 集群中的 Leader 宕机了，该集群就要进行 Leader 的选举，又或者 Zookeeper 集群中半数以上服务器节点不可用（例如有三个节点，如果节点一检测到节点三挂了 ，节点二也检测到节点三挂了，那这个节点才算是真的挂了），那么将无法处理该请求。所以说，Zookeeper 不能保证服务可用性。</p><p>​        当然，在大多数分布式环境中，尤其是涉及到数据存储的场景，数据一致性应该是首先被保证的，这也是 Zookeeper 设计紧遵CP原则的另一个原因。</p><h5 id="使用方式：-1"><a href="#使用方式：-1" class="headerlink" title="使用方式："></a>使用方式：</h5><h6 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h6><p>​        首先Zookeeper注册中心需要单独下载</p><pre><code class="hljs awk">官网：https:<span class="hljs-regexp">//</span>zookeeper.apache.org<span class="hljs-regexp">/ 或 https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/</span>apache<span class="hljs-regexp">/zookeeper/</span></code></pre><p>​        解压并进入conf文件夹，修改配置文件，主要时修改dataDir位置对应的目录，<strong>目录没有的先创建</strong></p><pre><code class="hljs css"># 复制一份配置文件<span class="hljs-selector-tag">cp</span> <span class="hljs-selector-tag">zoo_sample</span><span class="hljs-selector-class">.cfg</span> <span class="hljs-selector-tag">zoo</span><span class="hljs-selector-class">.cfg</span># 编辑<span class="hljs-selector-tag">zoo</span><span class="hljs-selector-class">.cfg</span><span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">zoo</span><span class="hljs-selector-class">.cfg</span></code></pre><p><img src="https://i.loli.net/2020/12/18/IiCh6VBKZxzmPtR.png" alt="image-20201218105618926"></p><p>​        修改好配置文件后，进入到bin目录</p><pre><code class="hljs vala"><span class="hljs-meta"># 启动zk</span>./zkServer.sh start<span class="hljs-meta"># 开启端口2181</span></code></pre><p><img src="https://i.loli.net/2020/12/18/5JaA3siTq6bfzDW.png" alt="image-20201218105800886"></p><h6 id="服务Client"><a href="#服务Client" class="headerlink" title="服务Client"></a>服务Client</h6><p>​        在资源微服务中引入依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <span class="hljs-comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>         <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--添加zookeeper3.4.14版本--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>​        在application.yml中添加配置</p><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-consumer-order</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">zookeeper:</span>      <span class="hljs-attr">connect-string:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.140</span><span class="hljs-string">:2181</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span></code></pre><p>​        最后在启动类添加注解：**@EnableDiscoveryClient**</p><p>​        启动服务、执行命令./zkCli.sh进入zk客户端，执行 ls /services，查看注册进来的服务。</p><p><img src="https://i.loli.net/2020/12/18/EBXknhrN5ZLGbo2.png" alt="image-20201218112909638"></p><h4 id="Consul-gt-CP"><a href="#Consul-gt-CP" class="headerlink" title="Consul &gt; CP"></a>Consul &gt; CP</h4><p>​        Consul遵循CP原则，保证了强一致性和分区容错性，且使用的是Raft算法，比zookeeper使用的Paxos算法更加简单。虽然保证了强一致性，但是可用性就相应下降了，例如服务注册的时间会稍长一些，因为 Consul 的 raft 协议要求必须过半数的节点都写入成功才认为注册成功 ；在leader挂掉了之后，重新选举出leader之前会导致Consul 服务不可用</p><h5 id="使用方式：-2"><a href="#使用方式：-2" class="headerlink" title="使用方式："></a>使用方式：</h5><h6 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h6><p>​        <strong>Consul官网：</strong><a href="https://www.consul.io/intro/index.html%EF%BC%8C%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AA%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6">https://www.consul.io/intro/index.html，下载一个可执行文件</a></p><p>​        下载完成后解压</p><pre><code class="hljs angelscript"># 可视化界面启动，后台运行，并把日志输出到log.<span class="hljs-keyword">out</span>nohup ./consul agent -dev -client <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> -ui &gt; log.<span class="hljs-keyword">out</span> &amp;</code></pre><p>​        访问 IP:8500</p><p><img src="https://i.loli.net/2020/12/18/jGC3fybYMao8QJ7.png" alt="image-20201218132156223"></p><h6 id="服务Client-1"><a href="#服务Client-1" class="headerlink" title="服务Client"></a>服务Client</h6><p>​    在资源微服务中引入依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>​        在application.yml中添加配置</p><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-consumer-order</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">consul:</span>      <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.140</span>      <span class="hljs-attr">port:</span> <span class="hljs-number">8500</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">service-name:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span></code></pre><p>​        最后在启动类添加注解：**@EnableDiscoveryClient**</p><p>启动服务，刷新页面，可以看到服务已经注册进来了</p><p><img src="https://i.loli.net/2020/12/18/EDCSLbK5kQ4wAhc.png" alt="image-20201218132549369"></p><p>点击进去可以看到该服务的状态以及信息</p><p><img src="https://i.loli.net/2020/12/18/FKI8orfdjqUtLi3.png" alt="image-20201218132723838"></p><p><img src="https://i.loli.net/2020/12/18/GP2tobIJS9NcM17.png" alt="image-20201218132747412"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
      <tag>服务注册与发现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenFeign</title>
    <link href="/2020/12/18/Spring%20Cloud%20OpenFeign/"/>
    <url>/2020/12/18/Spring%20Cloud%20OpenFeign/</url>
    
    <content type="html"><![CDATA[<h4 id="OpenFeign简介"><a href="#OpenFeign简介" class="headerlink" title="OpenFeign简介"></a>OpenFeign简介</h4><p>​        OpenFeign是springcloud在Feign的基础上支持了SpringMVC的注解，如@RequestMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</p><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><p>​        在注册中心这个微服务中引入依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>​        在application.yml中添加配置</p><pre><code class="hljs yml"><span class="hljs-comment">#设置feign 客户端超时时间（openFeign默认支持ribbon）</span><span class="hljs-attr">ribbon:</span>  <span class="hljs-comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间 单位：毫秒</span>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">5000</span>  <span class="hljs-comment">#指的是建立连接后从服务器读取到可用资源所用的时间,单位：毫秒</span>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 设置回退生效</span><span class="hljs-attr">feign:</span>  <span class="hljs-attr">hystrix:</span>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><span class="hljs-attr">hystrix:</span>  <span class="hljs-attr">command:</span>    <span class="hljs-attr">default:</span> <span class="hljs-comment">#也可以针对多个服务</span>      <span class="hljs-attr">execution:</span>        <span class="hljs-attr">isolation:</span>          <span class="hljs-attr">thread:</span>            <span class="hljs-attr">timeoutInMilliseconds:</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 设置hystrix的超时时间为5s</span></code></pre><p>新建一个接口</p><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;consul-provider-payment&quot;, contextId = &quot;helloServiceClient&quot;, fallbackFactory = HelloServiceFallback.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IHelloService</span> </span>&#123;    <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span>    <span class="hljs-function">String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>;    <span class="hljs-meta">@GetMapping(&quot;user&quot;)</span>    <span class="hljs-function">String <span class="hljs-title">info</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>1.<code>value</code>指定资源服务的名称，通常为资源服务配置里 <code>spring.application.name</code>的值;</p><p>2.<code>contextId</code>指定这个Feign Client的别名，当我们定义了多个Feign Client并且<code>value</code>值相同（即调用同一个服务）的时候，需要手动通过<code>contextId</code>设置别名，否则程序将抛出异常；`</p><p>3.<code>fallbackFactory</code>指定了回退方法，当我们调用远程服务出现异常时，就会调用这个回退方法。<code>fallback</code>也可以指定回退方法，但<code>fallbackFactory</code>指定的回退方法里可以通过<code>Throwable</code>对象打印出异常日志，方便分析问题</p><p>在接口下新建一个fallback包，进入，然后在该包下新建一个HelloServiceFallback</p><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServiceFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FallbackFactory</span>&lt;<span class="hljs-title">IHelloService</span>&gt; </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> IHelloService <span class="hljs-title">create</span><span class="hljs-params">(Throwable throwable)</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> IHelloService() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(String name)</span> </span>&#123;                log.error(<span class="hljs-string">&quot;调用server-system-hello服务出错&quot;</span>, throwable);                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;调用出错&quot;</span>;            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">info</span><span class="hljs-params">()</span> </span>&#123;                log.error(<span class="hljs-string">&quot;调用server-system-info服务出错&quot;</span>, throwable);                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;            &#125;        &#125;;    &#125;&#125;</code></pre><p>最后在启动类上添加注解：**@EnableFeignClients**</p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
      <tag>OpenFeign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FFmpeg</title>
    <link href="/2020/11/30/FFmpeg/"/>
    <url>/2020/11/30/FFmpeg/</url>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i akane.mp<span class="hljs-number">4</span> -c copy -map <span class="hljs-number">0</span> -f segment -segment_list akane.m<span class="hljs-number">3</span>u<span class="hljs-number">8</span> -segment_time <span class="hljs-number">10</span> akane%<span class="hljs-number">03</span>d.ts</code></pre><pre><code class="hljs livescript">ffmpeg -y <span class="hljs-string">\</span>-i The_Kriss_Vector.mp4 <span class="hljs-string">\</span>-hls_time <span class="hljs-number">20</span> <span class="hljs-string">\</span>       <span class="hljs-comment"># 将test.mp4分割成每个小段多少秒</span>-hls_key_info_file encrypt.keyinfo <span class="hljs-string">\</span>-hls_playlist_type vod <span class="hljs-string">\</span>   <span class="hljs-comment"># vod 是点播，表示PlayList不会变</span>-hls_segment_filename <span class="hljs-string">&quot;playlist%d.ts&quot;</span> <span class="hljs-string">\</span>  <span class="hljs-comment">#  每个小段的文件名</span>playlist.m3u8   <span class="hljs-comment">#  生成的m3u8文件</span></code></pre><pre><code class="hljs livescript">ffmpeg -y <span class="hljs-string">\</span>-i The_Kriss_Vector.mp4 <span class="hljs-string">\</span>-hls_time <span class="hljs-number">20</span> <span class="hljs-string">\</span>-hls_key_info_file encrypt.keyinfo <span class="hljs-string">\</span>-hls_playlist_type event <span class="hljs-string">\</span>-hls_segment_filename <span class="hljs-string">&quot;playlist%03d.ts&quot;</span> <span class="hljs-string">\</span>playlist.m3u8</code></pre><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -y -i akane.mp<span class="hljs-number">4</span> -hls_time <span class="hljs-number">4</span> -hls_key_info_file enc.keyinfo -hls_segment_filename <span class="hljs-string">&quot;playlist%03d.ts&quot;</span> playlist.m<span class="hljs-number">3</span>u<span class="hljs-number">8</span></code></pre><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -y -i akane.mp<span class="hljs-number">4</span> -hls_time <span class="hljs-number">4</span> -hls_segment_filename <span class="hljs-string">&quot;playlist%03d.ts&quot;</span> playlist.m<span class="hljs-number">3</span>u<span class="hljs-number">8</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FFmpeg</title>
    <link href="/2020/11/30/FFmpeg-ldl/"/>
    <url>/2020/11/30/FFmpeg-ldl/</url>
    
    <content type="html"><![CDATA[<h1 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h1><h3 id="什么是FFmpeg"><a href="#什么是FFmpeg" class="headerlink" title="什么是FFmpeg?"></a>什么是FFmpeg?</h3><p>[^fast forward moving picture expert group 动态图像专家组]: </p><ul><li><p>简介：</p><pre><code class="hljs livecodeserver">FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序,提供了音视频的编码，解码，转码，封装，解封装，流，滤镜，播放等功能。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它几乎支持所有的音视频格式，不管是标准委员会，社区，还是公司设计的。它是高度可移植，跨平台的：可以在Linux, Mac OS X, Microsoft Windows, <span class="hljs-keyword">the</span> BSDs, Solaris等系统上，在各种不同的编译环境，机器架构，配置下编译，运行，并通过测试</code></pre></li><li><p>GPL协议、LGPL协议与BSD协议的法律区别：</p><pre><code class="hljs armasm">简而言之，GPL协议就是一个开放源代码协议，软件的初始开发者使用了GPL协议并公开软件的源程序后，后续使用该软件源程序开发软件者亦应当根据GPL协议把自己编写的源程序进行公开。GPL协议要求的关键在于开放源程序，但并不排斥软件作者向用户收费。虽然如此，很多大公司对GPL协议还是又爱又恨，爱的是这个协议项下的软件历经众多程序员千锤百炼的修改，已经非常成熟完善，恨的是必须开放自己后续的源程序，导致竞争对手也可以根据自己修改的源程序开发竞争产品。正因大公司对GPL协议在商业上存在顾虑，因此，另两种协议被采用的更多，第一种是LGPL（亦称GPL <span class="hljs-built_in">V2</span>）协议，可以翻译为更宽松的GPL协议。与GPL协议的区别为，后者如果只是对LGPL软件的程序库的程序进行调用而不是包含其源代码时，相关的源程序无需开源。调用和包含的区别类似在互联网网网页上对他人网页内容的引用：如果把他人的内容全部或部分复制到自己的网页上，就类似包含，如果只是贴一个他人网页的网址链接而不引用内容，就类似调用。有了这个协议，很多大公司就可以把很多自己后续开发内容的源程序隐藏起来。第二种是BSD协议（类似的还有MIT协议）。BSD协议鼓励软件的作者公开自己后续开发的源代码，但不强求。在BSD协议项下开发的软件，原始的源程序是开放源代码的，但使用者修改以后，可以自行选择发布源程序或者二进制程序（即目标程序），当然，使用者有义务把自己原来使用的源程序与BSD协议在软件对外发布时一并发布。因为比较灵活，所以BSD深受大公司的欢迎。</code></pre></li><li><p>FFmpeg影响范围：</p><pre><code class="hljs angelscript">因为FFMPEG本身是开源项目，并且在LGPL/GPL协议下发布的任何人都可以自由使用，但必须严格遵守LGPL/GPL协议，其被很多开源的项目或者非开源的项目所使用：<span class="hljs-number">1.</span> FMPEG作为内核视频播放器：ijkplayer，VLC，Mplayer，ffplay，暴风影音，KMPlayer，QQ影音<span class="hljs-number">2.</span> FFMPEG作为内核的转码工具：ffmpeg，格式工厂<span class="hljs-number">3.</span> FFMPEG作为内核的Directshow Filter：fdshow，lav filters<span class="hljs-number">4.</span> 其他知名软件：微信，钉钉，Google Chrome        </code></pre></li></ul><h3 id="FFmpeg项目组成"><a href="#FFmpeg项目组成" class="headerlink" title="FFmpeg项目组成"></a>FFmpeg项目组成</h3><p>FFmpeg框架的基本组成包含AVFormat、AVCodec、AVFilter、AVDevice、AVUtils、postproc、swresample、swscale  8个模块库</p><p><img src="https://upload-images.jianshu.io/upload_images/5810867-19297a539d20b492.png" alt="img"></p><ul><li><p>libavformat：</p><pre><code class="hljs plain">用于各种音视频封装格式的生成和解析，包括获取解码所需信息以生成解码上下文结构和读取音视频帧等功能，包含demuxers和muxer库</code></pre></li><li><p>libavcodec：</p><pre><code class="hljs gcode">用于各种类型声音/图像编解码。该库是音视频编解码核心，实现了市面上可见的绝大部分解码器的功能， liba<span class="hljs-attr">vcodec 库被其他各大解码器 ffdshow， Mplayer 等所包含或应用。但是有一些Codec是具备自己的License的，FFmpeg是不会默认添加像libx264</span>、FDK-AAC、lame等库的，但是FFmpeg就像一个平台一样，可以将其他的第三方的Codec以插件的方式添加进来，然后为开发者提供统一的接口</code></pre></li><li><p>libavdevice: </p><pre><code class="hljs plain">输入输出设备库，比如，需要编译出播放声音或者视频的工具ffplay，就需要确保该模块是打开的，同时也需要libSDL的预先编译，因为该设备模块播放声音与播放视频使用的都是libSDL库</code></pre></li><li><p>libavfilter:</p><pre><code class="hljs plain">音视频滤镜库，该模块提供了包括音频特效和视频特效的处理，如宽高比 裁剪 格式化 非格式化 伸缩。在使用FFmpeg的API进行编解码的过程中，直接使用该模块为音视频数据做特效处理是非常方便同时也非常高效的一种方式</code></pre></li><li><p>libavutil：</p><pre><code class="hljs plain">包含一些公共的工具函数的使用库，包括算数运算 字符操作</code></pre></li><li><p>libswscale：</p><pre><code class="hljs smali">原始视频格式转换） 用于视频场景比例缩放、色彩映射转换；图像颜色空间或格式转换，如 rgb565、rgb888 等与 yuv420 等之间转换</code></pre></li><li><p>libswresample:</p><pre><code class="hljs plain">该模块可用于音频重采样，可以对数字音频进行声道数、数据格式、采样率等多种基本信息的转换</code></pre></li><li><p>libpostproc：</p><pre><code class="hljs arcade">该模块可用于进行后期处理，当我们使用AVFilter的时 候需要打开该模块的开关，因为<span class="hljs-built_in">Filter</span>中会使用到该模块的一些基础函数</code></pre><p>编译完成以后主要生成了三个应用程序</p></li><li><p>ffmpeg：</p><pre><code class="hljs plain">是一个命令行工具，可用于格式转换、解码或电视卡即时编码等</code></pre></li><li><p>ffsever：</p><pre><code class="hljs plain">一个HTTP 多媒体即时广播串流服务器</code></pre></li><li><p>ffplay：</p><pre><code class="hljs plain">是一个简单的播放器，使用ffmpeg库解析和解码，通过SDL显示</code></pre></li><li><p>ffprobe</p><pre><code class="hljs plain">主要用来查看多媒体文件的信息</code></pre></li></ul><h3 id="FFmpeg处理流程"><a href="#FFmpeg处理流程" class="headerlink" title="FFmpeg处理流程"></a>FFmpeg处理流程</h3><p>容器(Container)<br>容器就是一种文件格式，比如flv，mkv等。包含下面5种流以及文件头信息</p><p>流(Stream)<br>是一种视频数据信息的传输方式，5种流：音频，视频，字幕，附件，数据</p><p>帧(Frame)<br>帧代表一幅静止的图像，分为I帧，P帧，B帧</p><pre><code class="hljs mathematica"><span class="hljs-keyword">I</span>帧<span class="hljs-keyword">I</span>帧又称帧内编码帧，是一种自带全部信息的独立帧，无需参考其他图像便可独立进行解码，即全部为帧内编码。可以简单理解为一张静态画面。视频序列中的第一个帧始终都是<span class="hljs-keyword">I</span>帧，因为它是关键帧。如果传输过程中<span class="hljs-keyword">I</span>真丢失，画面最直接的影响就是会卡顿，因为后面的帧都无法正确解码，只能等待下一个GOP。IDR帧即时解码刷新，其实就是<span class="hljs-keyword">I</span>帧，不过他是第一个<span class="hljs-keyword">I</span>帧，或者是强制<span class="hljs-keyword">I</span>帧，它的作用就是立即刷新，使错误不至于传播，从IDR开始，重新算一个新的序列开始编码。IDR会导致DPB（参考序列表）清空，而<span class="hljs-keyword">I</span>帧不会，IDR帧一定是<span class="hljs-keyword">I</span>帧，但是<span class="hljs-keyword">I</span>帧不一定。一个图像序列中可以有很多<span class="hljs-keyword">I</span>帧，一个<span class="hljs-keyword">I</span>帧后的图像可以引用<span class="hljs-keyword">I</span>帧之间的图像做运动参考，但是对于IDR帧来说，IDR帧后的图像不能引用IDR之前的帧内容，因为从IDR帧相当于重新开始。P帧P帧又称帧间预测编码帧，需要参考前面的<span class="hljs-keyword">I</span>帧才能进行编码。表示的是当前帧画面与前一帧（前一帧可能是<span class="hljs-keyword">I</span>帧也可能是P帧）的差别。解码时需要用之前缓存的画面叠加上本帧定义的差别(采用了预测编码)，生成最终画面。与<span class="hljs-keyword">I</span>帧相比，P帧通常占用更少的数据位，但不足是，由于P帧对前面的P和<span class="hljs-keyword">I</span>参考帧有着复杂的依耐性，因此对传输错误非常敏感，所以如果P帧丢失，画面会出现马赛克现象，因为前向参考帧错误，补齐的并不是真正运动变化后的数据。B帧B帧又称双向预测编码帧，也就是B帧记录的是本帧与前后帧的差别。也就是说要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是对解码性能要求较高。如果图像中没有B帧，解码顺序和显示顺序相同；如果视频中含有B帧，解码顺序和现实序列不同，解码输出显示前需要进行图像重排列。目前接触到一般都是 <span class="hljs-keyword">I</span> + P。</code></pre><p>编解码器(Codec)<br>是对视频进行压缩或者解压缩，CODEC =COde （编码）+ DECode（解码）</p><p>复用/解复用(mux/demux)<br>把不同的流按照某种容器的规则放入容器，这种行为叫做复用（mux）<br>把不同的流从某种容器中解析出来，这种行为叫做解复用(demux)</p><img src="https://upload-images.jianshu.io/upload_images/11591878-810021da4c347e09.png?imageMogr2/auto-orient/strip|imageView2/2/w/1067/format/webp" alt="img"  /><pre><code class="hljs angelscript"><span class="hljs-number">1</span>、FFmpeg程序把-i参数指定的若干文件内容读入到内存，按照输入的参数或者程序默认的参数来处理并且把结果写入到若干的文件中。输入和输出文件可以是计算机文件、管道、网络流、捕获设备等<span class="hljs-number">2</span>、FFmpeg用libavformat包调用解复用器（demuxers）来读取输入文件中被编码的数据包(packets)，如果有多个输入文件，FFmpeg以有效输入流的最小时间戳来同步<span class="hljs-number">3</span>、然后解码器（decoder）从已编码的数据包中产生未被压缩的帧（frame），在那之后调用可选的过滤器<span class="hljs-number">4</span>、这些帧被传递到编码器，编码器会产生新的编码包<span class="hljs-number">5</span>、把新的编码包传递给复用器(muxer)处理并且把结果写入到输出文件中</code></pre><h3 id="FFmpeg-实际运用"><a href="#FFmpeg-实际运用" class="headerlink" title="FFmpeg 实际运用"></a>FFmpeg 实际运用</h3><pre><code class="hljs java"><span class="hljs-comment">//视频分片</span>ffmpeg -i xxx.mp4 -f segment -segment_time <span class="hljs-number">60</span> -segment_format mpegts -segment_list /home/xxx/video_name.m3u8 -c copy -bsf:v h264_mp4toannexb -map <span class="hljs-number">0</span> /home/xxx/course-%<span class="hljs-number">04d</span>.tsffmpeg -i D:\video-demo\demo.mp4 -f segment -segment_time <span class="hljs-number">10</span> -segment_format mpegts -segment_list playlist.m3u8 -c copy -bsf:v h264_mp4toannexb -map <span class="hljs-number">0</span> demo-%<span class="hljs-number">04d</span>.ts<span class="hljs-comment">// 去掉视频中的音频</span>ffmpeg -i input.mp4 -vcodec copy -an output.mp4<span class="hljs-comment">// -an: 去掉音频；-vcodec:视频选项，一般后面加copy表示拷贝</span><span class="hljs-comment">// 提取视频中的音频 （格式需要和Duration: Stream #0:1(und): Audio:***,格式(***)一样）</span>ffmpeg -i input.mp4 -acodec copy -vn output.mp3<span class="hljs-comment">// -vn: 去掉视频；-acodec: 音频选项， 一般后面加copy表示拷贝</span><span class="hljs-comment">// 音视频合成</span>ffmpeg -y –i input.mp4 –i input.mp3 –vcodec copy –acodec copy output.mp4<span class="hljs-comment">// -y 覆盖输出文件</span><span class="hljs-comment">//剪切视频</span>ffmpeg -ss <span class="hljs-number">0</span>:<span class="hljs-number">1</span>:<span class="hljs-number">30</span> -t <span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">20</span> -i input.mp4 -vcodec copy -acodec copy output.mp4<span class="hljs-comment">// -ss 开始时间; -t 持续时间</span><span class="hljs-comment">// 视频截图</span>ffmpeg –i test.mp4 –f image2 -t <span class="hljs-number">0.001</span> -s <span class="hljs-number">1280</span>x720 image-%<span class="hljs-number">3d</span>.jpg<span class="hljs-comment">// -s 设置分辨率; -f 强迫采用格式fmt;</span><span class="hljs-comment">// 视频分解为图片</span>ffmpeg –i test.mp4 –r <span class="hljs-number">1</span> –f image2 image-%<span class="hljs-number">3d</span>.jpg<span class="hljs-comment">// -r 指定截屏频率</span><span class="hljs-comment">// 将图片合成视频</span>ffmpeg -f image2 -i image%d.jpg output.mp4<span class="hljs-comment">//视频拼接</span>ffmpeg -f concat -i filelist.txt -c copy output.mp4<span class="hljs-comment">// 将视频转为gif</span>ffmpeg -i input.mp4 -ss <span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">30</span> -t <span class="hljs-number">10</span> -s <span class="hljs-number">320</span>x240 -pix_fmt rgb24 output.gif<span class="hljs-comment">// -pix_fmt 指定编码</span><span class="hljs-comment">// 将视频前30帧转为gif</span>ffmpeg -i input.mp4 -vframes <span class="hljs-number">30</span> -f gif output.gif<span class="hljs-comment">// 旋转视频</span>ffmpeg -i input.mp4 -vf rotate=PI/<span class="hljs-number">2</span> output.mp4<span class="hljs-comment">// 缩放视频</span>ffmpeg -i input.mp4 -vf scale=iw/<span class="hljs-number">2</span>:-<span class="hljs-number">1</span> output.mp4<span class="hljs-comment">// iw 是输入的宽度， iw/2就是一半;-1 为保持宽高比</span><span class="hljs-comment">//视频变速</span>ffmpeg -i input.mp4 -filter:v setpts=<span class="hljs-number">0.5</span>*PTS output.mp4<span class="hljs-comment">//音频变速</span>ffmpeg -i input.mp3 -filter:a atempo=<span class="hljs-number">2.0</span> output.mp3<span class="hljs-comment">//音视频同时变速，但是音视频为互倒关系</span>ffmpeg -i input.mp4 -filter_complex <span class="hljs-string">&quot;[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]&quot;</span> -map <span class="hljs-string">&quot;[v]&quot;</span> -map <span class="hljs-string">&quot;[a]&quot;</span> output.mp4<span class="hljs-comment">// 视频添加水印</span>ffmpeg -i input.mp4 -i logo.jpg -filter_complex [<span class="hljs-number">0</span>:v][<span class="hljs-number">1</span>:v]overlay=main_w-overlay_w-<span class="hljs-number">10</span>:main_h-overlay_h-<span class="hljs-number">10</span>[out] -map [out] -map <span class="hljs-number">0</span>:a -codec:a copy output.mp4<span class="hljs-comment">// main_w-overlay_w-10 视频的宽度-水印的宽度-水印边距；</span><span class="hljs-comment">//添加字幕</span>ffmpeg -i <span class="hljs-number">0.</span>mp4 -vf subtitles=<span class="hljs-number">0.</span>srt <span class="hljs-number">1.</span>mp4</code></pre><h4 id="视频加密方案"><a href="#视频加密方案" class="headerlink" title="视频加密方案"></a>视频加密方案</h4><p>想达到的目的：将一个mp4视频文件切割为多个ts片段，并在切割过程中对每一个片段使用 AES-128 加密，最后生成一个m3u8的视频索引文件；</p><p>电脑环境 Fedora,已经安装了最新的ffmpeg；</p><p>如果要加密，首先准备好一下两个东西：</p><p>加密用的 key</p><pre><code class="hljs lsl">openssl rand  <span class="hljs-number">16</span> &gt; enc.<span class="hljs-type">key</span> （生成一个enc.<span class="hljs-type">key</span>文件）</code></pre><p>另一个是 iv</p><pre><code class="hljs perl">openssl <span class="hljs-keyword">rand</span> -<span class="hljs-keyword">hex</span> <span class="hljs-number">16</span>  （生成一段字符串，记下来）</code></pre><p>新建一个文件 enc.keyinfo 内容格式如下：</p><pre><code class="hljs Yml"><span class="hljs-string">Key</span> <span class="hljs-string">URI</span>  <span class="hljs-comment"># enc.key的路径，使用http形式</span><span class="hljs-string">Path</span> <span class="hljs-string">to</span> <span class="hljs-string">key</span> <span class="hljs-string">file</span>  <span class="hljs-comment"># enc.key文件</span><span class="hljs-string">IV</span>  <span class="hljs-comment">#  上面生成的iv</span></code></pre><p>例子：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/video/</span>enc.keyenc.key<span class="hljs-number">48</span>c674428c1e719751565ad00fe24243</code></pre><pre><code class="hljs yml"><span class="hljs-string">ffmpeg</span> <span class="hljs-string">-y</span> <span class="hljs-string">-i</span> <span class="hljs-string">test.mp4</span> <span class="hljs-string">-hls_time</span> <span class="hljs-number">12</span>    <span class="hljs-comment">#将test.mp4分割成每个小段多少秒</span><span class="hljs-string">-hls_key_info_file</span> <span class="hljs-string">enc.keyinfo</span> <span class="hljs-string">-hls_playlist_type</span> <span class="hljs-string">vod</span>    <span class="hljs-comment">#vod 是点播，表示PlayList不会变</span><span class="hljs-string">-hls_segment_filename</span> <span class="hljs-string">&quot;file%d.ts&quot;</span>   <span class="hljs-comment">#每个小段的文件名</span><span class="hljs-string">playlist.m3u8</span>   <span class="hljs-comment">#生成的m3u8文件</span><span class="hljs-string">ffmpeg</span> <span class="hljs-string">-y</span> <span class="hljs-string">-i</span> <span class="hljs-string">D:\video-demo\demo.mp4</span> <span class="hljs-string">-hls_time</span> <span class="hljs-number">10</span> <span class="hljs-string">-hls_key_info_file</span> <span class="hljs-string">D:\video-demo\enc.keyinfo</span> <span class="hljs-string">-hls_playlist_type</span> <span class="hljs-string">vod</span> <span class="hljs-string">-hls_segment_filename</span> <span class="hljs-string">&quot;demo-%d.ts&quot;</span> <span class="hljs-string">playlist.m3u8</span></code></pre><p>FFmpeg java工具类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zkcm.upload.util;<span class="hljs-keyword">import</span> java.io.BufferedReader;<span class="hljs-keyword">import</span> java.io.InputStreamReader;<span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<span class="hljs-keyword">import</span> java.util.Calendar;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.regex.Matcher;<span class="hljs-keyword">import</span> java.util.regex.Pattern;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MediaUtil</span> </span>&#123;    <span class="hljs-comment">//ffmpeg安装目录</span>    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">static</span>  String FFMPEG_PATH =<span class="hljs-string">&quot;D:\\soft\\ffmpge\\ffmpeg.exe&quot;</span>;    <span class="hljs-comment">//设置图片大小</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String IMG_SIZE = <span class="hljs-string">&quot;1920x1080&quot;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 视频截图方法（windows）</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">ffmpegToImage</span><span class="hljs-params">(String videoPath,String imagePath,<span class="hljs-keyword">int</span> timePoint)</span></span>&#123;        List&lt;String&gt; commands = <span class="hljs-keyword">new</span> java.util.ArrayList&lt;String&gt;();        FFMPEG_PATH= FFMPEG_PATH.replace(<span class="hljs-string">&quot;%20&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);        commands.add(FFMPEG_PATH);        commands.add(<span class="hljs-string">&quot;-ss&quot;</span>);        <span class="hljs-comment">//这个参数是设置截取视频多少秒时的画面</span>        commands.add(timePoint+<span class="hljs-string">&quot;&quot;</span>);        commands.add(<span class="hljs-string">&quot;-i&quot;</span>);        commands.add(videoPath);        commands.add(<span class="hljs-string">&quot;-y&quot;</span>);        commands.add(<span class="hljs-string">&quot;-f&quot;</span>);        commands.add(<span class="hljs-string">&quot;image2&quot;</span>);        commands.add(<span class="hljs-string">&quot;-t&quot;</span>);        commands.add(<span class="hljs-string">&quot;0.001&quot;</span>);        commands.add(<span class="hljs-string">&quot;-s&quot;</span>);        <span class="hljs-comment">//这个参数是设置截取图片的大小</span>        commands.add(IMG_SIZE);        commands.add(imagePath);        <span class="hljs-keyword">try</span> &#123;            ProcessBuilder builder = <span class="hljs-keyword">new</span> ProcessBuilder();            builder.command(commands);            builder.start();            System.out.println(<span class="hljs-string">&quot;截取成功:&quot;</span>+imagePath);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> 文件是否能被ffmpeg解析</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">checkFileType</span><span class="hljs-params">(String fileName)</span> </span>&#123;        String type = fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>, fileName.length())                .toLowerCase();        <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;avi&quot;</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;mov&quot;</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;mp4&quot;</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;flv&quot;</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;png&quot;</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;jpg&quot;</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;jpeg&quot;</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> 获取视频时长</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getVideoTime</span><span class="hljs-params">(String video_path)</span> </span>&#123;        List&lt;String&gt; commands = <span class="hljs-keyword">new</span> java.util.ArrayList&lt;String&gt;();        commands.add(FFMPEG_PATH);        commands.add(<span class="hljs-string">&quot;-i&quot;</span>);        commands.add(video_path);        <span class="hljs-keyword">try</span> &#123;            ProcessBuilder builder = <span class="hljs-keyword">new</span> ProcessBuilder();            builder.command(commands);            <span class="hljs-keyword">final</span> Process p = builder.start();            <span class="hljs-comment">//从输入流中读取视频信息</span>            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(p.getErrorStream()));            StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();            String line = <span class="hljs-string">&quot;&quot;</span>;            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;                sb.append(line);            &#125;            br.close();            <span class="hljs-comment">//从视频信息中解析时长</span>            String regexDuration = <span class="hljs-string">&quot;Duration: (.*?), start: (.*?), bitrate: (\\d*) kb\\/s&quot;</span>;            Pattern pattern = Pattern.compile(regexDuration);            Matcher m = pattern.matcher(sb.toString());            <span class="hljs-keyword">if</span> (m.find()) &#123;                <span class="hljs-keyword">int</span> time = getTimelen(m.group(<span class="hljs-number">1</span>));                System.out.println(video_path+<span class="hljs-string">&quot;,视频时长：&quot;</span>+time+<span class="hljs-string">&quot;, 开始时间：&quot;</span>+m.group(<span class="hljs-number">2</span>)+<span class="hljs-string">&quot;,比特率：&quot;</span>+m.group(<span class="hljs-number">3</span>)+<span class="hljs-string">&quot;kb/s&quot;</span>);                <span class="hljs-keyword">return</span> time;            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">//格式:&quot;00:00:10.68&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTimelen</span><span class="hljs-params">(String timelen)</span></span>&#123;        <span class="hljs-keyword">int</span> min=<span class="hljs-number">0</span>;        String strs[] = timelen.split(<span class="hljs-string">&quot;:&quot;</span>);        <span class="hljs-keyword">if</span> (strs[<span class="hljs-number">0</span>].compareTo(<span class="hljs-string">&quot;0&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;            <span class="hljs-comment">//秒</span>            min+=Integer.valueOf(strs[<span class="hljs-number">0</span>])*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>;        &#125;        <span class="hljs-keyword">if</span>(strs[<span class="hljs-number">1</span>].compareTo(<span class="hljs-string">&quot;0&quot;</span>)&gt;<span class="hljs-number">0</span>)&#123;            min+=Integer.valueOf(strs[<span class="hljs-number">1</span>])*<span class="hljs-number">60</span>;        &#125;        <span class="hljs-keyword">if</span>(strs[<span class="hljs-number">2</span>].compareTo(<span class="hljs-string">&quot;0&quot;</span>)&gt;<span class="hljs-number">0</span>)&#123;            min+=Math.round(Float.valueOf(strs[<span class="hljs-number">2</span>]));        &#125;        <span class="hljs-keyword">return</span> min;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 秒转化成 hh:mm:ss</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> duration</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">convertInt2Date</span><span class="hljs-params">(<span class="hljs-keyword">long</span> duration)</span></span>&#123;        Calendar cal = Calendar.getInstance();        cal.set(Calendar.HOUR_OF_DAY, <span class="hljs-number">0</span>);        cal.set(Calendar.MINUTE, <span class="hljs-number">0</span>);        cal.set(Calendar.SECOND, <span class="hljs-number">0</span>);        cal.set(Calendar.MILLISECOND, <span class="hljs-number">0</span>);        SimpleDateFormat formatter = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>);        <span class="hljs-keyword">return</span> formatter.format(cal.getTimeInMillis() + duration * <span class="hljs-number">1000</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 视频抽取音频文件</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> videoPath</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> audioPath</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">ffmpegToAudio</span><span class="hljs-params">(String videoPath,String type, String audioPath)</span></span>&#123;        List&lt;String&gt; commands = <span class="hljs-keyword">new</span> java.util.ArrayList&lt;String&gt;();        FFMPEG_PATH= FFMPEG_PATH.replace(<span class="hljs-string">&quot;%20&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);        commands.add(FFMPEG_PATH);        commands.add(<span class="hljs-string">&quot;-i&quot;</span>);        commands.add(videoPath);        commands.add(<span class="hljs-string">&quot;-f&quot;</span>);        commands.add(type);        commands.add(<span class="hljs-string">&quot;-vn&quot;</span>);        commands.add(<span class="hljs-string">&quot;-y&quot;</span>);        commands.add(<span class="hljs-string">&quot;-acodec&quot;</span>);        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;wav&quot;</span>.equals(type))&#123;            commands.add(<span class="hljs-string">&quot;pcm_s16le&quot;</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;mp3&quot;</span>.equals(type))&#123;            commands.add(<span class="hljs-string">&quot;mp3&quot;</span>);        &#125;        commands.add(<span class="hljs-string">&quot;-ar&quot;</span>);        commands.add(<span class="hljs-string">&quot;16000&quot;</span>);        commands.add(<span class="hljs-string">&quot;-ac&quot;</span>);        commands.add(<span class="hljs-string">&quot;1&quot;</span>);        commands.add(audioPath);        <span class="hljs-keyword">try</span> &#123;            ProcessBuilder builder = <span class="hljs-keyword">new</span> ProcessBuilder();            builder.command(commands);            Process p = builder.start();            System.out.println(<span class="hljs-string">&quot;抽离成功:&quot;</span>+audioPath);            <span class="hljs-comment">// 1. start</span>            <span class="hljs-comment">// 保存ffmpeg的输出结果流</span>            BufferedReader buf = <span class="hljs-keyword">null</span>;            String line = <span class="hljs-keyword">null</span>;            buf = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(p.getInputStream()));            StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();            <span class="hljs-keyword">while</span> ((line = buf.readLine()) != <span class="hljs-keyword">null</span>) &#123;                System.out.println(line);                sb.append(line);                <span class="hljs-keyword">continue</span>;            &#125;            <span class="hljs-comment">// 这里线程阻塞，将等待外部转换进程运行成功运行结束后，才往下执行</span>            p.waitFor();            <span class="hljs-comment">// 1. end</span>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * wav 转 mp3</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wavPath</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mp3Path</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-comment">//wav转mp3命令：ffmpeg -i test.wav -f mp3 -acodec libmp3lame -y wav2mp3.mp3</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">ffmpegOfwavTomp3</span><span class="hljs-params">(String wavPath, String mp3Path)</span></span>&#123;        List&lt;String&gt; commands = <span class="hljs-keyword">new</span> java.util.ArrayList&lt;String&gt;();        FFMPEG_PATH= FFMPEG_PATH.replace(<span class="hljs-string">&quot;%20&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);        commands.add(FFMPEG_PATH);        commands.add(<span class="hljs-string">&quot;-i&quot;</span>);        commands.add(wavPath);        commands.add(<span class="hljs-string">&quot;-f&quot;</span>);        commands.add(<span class="hljs-string">&quot;mp3&quot;</span>);        commands.add(<span class="hljs-string">&quot;-acodec&quot;</span>);        commands.add(<span class="hljs-string">&quot;libmp3lame&quot;</span>);        commands.add(<span class="hljs-string">&quot;-y&quot;</span>);        commands.add(mp3Path);        <span class="hljs-keyword">try</span> &#123;            ProcessBuilder builder = <span class="hljs-keyword">new</span> ProcessBuilder();            builder.command(commands);            Process p = builder.start();            System.out.println(<span class="hljs-string">&quot;转换成功:&quot;</span>+mp3Path);            <span class="hljs-comment">// 1. start</span>            <span class="hljs-comment">// 保存ffmpeg的输出结果流</span>            BufferedReader buf = <span class="hljs-keyword">null</span>;            String line = <span class="hljs-keyword">null</span>;            buf = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(p.getInputStream()));            StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();            <span class="hljs-keyword">while</span> ((line = buf.readLine()) != <span class="hljs-keyword">null</span>) &#123;                System.out.println(line);                sb.append(line);                <span class="hljs-keyword">continue</span>;            &#125;            <span class="hljs-comment">// 这里线程阻塞，将等待外部转换进程运行成功运行结束后，才往下执行</span>            p.waitFor();            <span class="hljs-comment">// 1. end</span>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">//        // 视频文件</span><span class="hljs-comment">//        String videoRealPath1 = &quot;D:\\5.MOV&quot;;</span><span class="hljs-comment">//        // 截图的路径（输出路径）</span><span class="hljs-comment">//        String imageRealPath1 = &quot;D:\\31.jpg&quot;;</span><span class="hljs-comment">//        String imageRealPath2 = &quot;D:\\32.jpg&quot;;</span><span class="hljs-comment">//        if(checkFileType(videoRealPath1) ==0)&#123;</span><span class="hljs-comment">//             ffmpegToImage(videoRealPath1,imageRealPath1,10);</span><span class="hljs-comment">//             ffmpegToImage(videoRealPath1,imageRealPath2,11);</span><span class="hljs-comment">//        &#125;</span><span class="hljs-comment">//        String videoRealPath = &quot;D:\\5.MOV&quot;;</span><span class="hljs-comment">//        String audioRealPath = &quot;D:\\HHH\\5.wav&quot;;</span><span class="hljs-comment">//        String audioType = &quot;wav&quot;;</span><span class="hljs-comment">//        ffmpegToAudio(videoRealPath,audioType,audioRealPath);</span>        String wavPath = <span class="hljs-string">&quot;D:\\videoDemo\\test.wav&quot;</span>;        String mp3Path = <span class="hljs-string">&quot;D:\\videoDemo\\test.mp3&quot;</span>;        ffmpegOfwavTomp3(wavPath,mp3Path);    &#125;&#125;</code></pre><h5 id="基于域名防盗链处理"><a href="#基于域名防盗链处理" class="headerlink" title="基于域名防盗链处理"></a>基于域名防盗链处理</h5><pre><code class="hljs plain">这是最通行的做法，从技术实现上也是最为简洁和容易使用，但是缺点也是比较明显的，只适合于网站页面模式使用，一旦脱离的浏览器，就会受到限制。同时从技术上的破解相对也是容易的。</code></pre><h5 id="基于连接令牌（Token）接入，通过带入加密的Token进行接入访问"><a href="#基于连接令牌（Token）接入，通过带入加密的Token进行接入访问" class="headerlink" title="基于连接令牌（Token）接入，通过带入加密的Token进行接入访问"></a>基于连接令牌（Token）接入，通过带入加密的Token进行接入访问</h5><pre><code class="hljs gauss">这种做法，是针对每个视频源都设置指定的加密<span class="hljs-built_in">Token</span>，使用者只有获得<span class="hljs-built_in">Token</span>，才容许授权接入，适合于网站页面，客户端，pc，手机使用，实施相对简单，但是由于<span class="hljs-built_in">Token</span>的相对固定，一旦<span class="hljs-built_in">Token</span>被他人知晓，也会面临内容源被盗取的风险。</code></pre><h5 id="基于发布令牌（Token）加密，结合授权服务接入访问"><a href="#基于发布令牌（Token）加密，结合授权服务接入访问" class="headerlink" title="基于发布令牌（Token）加密，结合授权服务接入访问"></a>基于发布令牌（Token）加密，结合授权服务接入访问</h5><pre><code class="hljs gauss">发布令牌授权，是在原有<span class="hljs-built_in">Token</span>授权模式上，做了更进一步的加强，<span class="hljs-built_in">Token</span>每时每刻都在不断随机变化，使用者必须连接到授权服务器，每次接入的时候，都需要从授权服务器获取最新的<span class="hljs-built_in">Token</span>，才容许接入。这个就类似银行的个人usb安全密码器，在登录网上银行的时候，需要获取随机登录密码，才可以登录网银。 在这种情况下，使用者如果无法连接到授权服务器，几乎是不可能得到连接令牌，从而杜绝的被非法使用的可能性。这种模式同样适用于页面，客户端，pc，手机各种接入模式。同时实施相对简单</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>FFmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装elasticsearch</title>
    <link href="/2020/11/19/Centos7%E5%AE%89%E8%A3%85elatiscsearch/"/>
    <url>/2020/11/19/Centos7%E5%AE%89%E8%A3%85elatiscsearch/</url>
    
    <content type="html"><![CDATA[<h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>官网地址  <a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p><p>选择自己要下载的版本，这里以v7.3.2为例</p><h4 id="安装-amp-脚本"><a href="#安装-amp-脚本" class="headerlink" title="安装&amp;脚本"></a>安装&amp;脚本</h4><p>​    es是要用非root用户启动</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>data=<span class="hljs-string">&quot;/usr/local&quot;</span><span class="hljs-comment"># 设置用户和用户组</span>user=<span class="hljs-string">&quot;es&quot;</span>group=<span class="hljs-string">&quot;elasticsearch&quot;</span>password=<span class="hljs-string">&quot;123456&quot;</span>groupadd <span class="hljs-variable">$&#123;group&#125;</span>useradd <span class="hljs-variable">$&#123;user&#125;</span>passwd <span class="hljs-variable">$&#123;user&#125;</span> <span class="hljs-variable">$&#123;password&#125;</span>usermod -G <span class="hljs-variable">$&#123;group&#125;</span> <span class="hljs-variable">$&#123;user&#125;</span>tar -xvf elasticsearch-7.3.2-linux-x86_64.tar.gzsudo mv elasticsearch-7.3.2 <span class="hljs-variable">$&#123;data&#125;</span>/essudo chown -R <span class="hljs-variable">$&#123;user&#125;</span>:<span class="hljs-variable">$&#123;group&#125;</span> <span class="hljs-variable">$&#123;data&#125;</span>/es<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;vm.max_map_count=262144&quot;</span> &gt;&gt; /etc/sysctl.confsysctl -p <span class="hljs-comment"># 修改每个进程最大同时打开文件数和最大线程个数</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;* hard nofile 65536&quot;</span> &gt;&gt; /etc/security/limits.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;* soft nofile 65536&quot;</span> &gt;&gt; /etc/security/limits.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;* soft nproc 4096&quot;</span> &gt;&gt; /etc/security/limits.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;* hard nproc 4096&quot;</span> &gt;&gt; /etc/security/limits.conf</code></pre><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>如：ik分词插件</p><p>下载安装包 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>解压到刚刚安装的es目录 如： /usr/local/es/plugins</p><h4 id="配置elasticsearch-yml（无密码）"><a href="#配置elasticsearch-yml（无密码）" class="headerlink" title="配置elasticsearch.yml（无密码）"></a>配置elasticsearch.yml（无密码）</h4><p>进入安装目录的config目录，编辑vim elasticsearch.yml</p><h5 id="集群配置："><a href="#集群配置：" class="headerlink" title="集群配置："></a>集群配置：</h5><pre><code class="hljs http"><span class="hljs-attribute">cluster.name</span>: cluster-es<span class="hljs-attribute">node.name</span>: node-1<span class="hljs-attribute">network.host</span>: 192.168.186.140<span class="hljs-attribute">node.master</span>: true<span class="hljs-attribute">node.data</span>: true<span class="hljs-attribute">http.port</span>: 9200<span class="hljs-attribute">http.cors.enabled</span>: true<span class="hljs-attribute">http.cors.allow-origin</span>: &quot;*&quot;<span class="hljs-attribute">http.cors.allow-methods</span>: OPTIONS, HEAD, GET, POST, PUT, DELETE<span class="hljs-attribute">http.cors.allow-headers</span>: &quot;X-Requested-With, Content-Type, Content-Length, X-User&quot;<span class="hljs-attribute">cluster.initial_master_nodes</span>: [&quot;node-1&quot;,&quot;node-2&quot;,&quot;node-3&quot;]<span class="hljs-attribute">discovery.seed_hosts</span>: [&quot;192.168.186.140:9300&quot;, &quot;192.168.186.151:9300&quot;, &quot;192.168.186.152:9300&quot;]<span class="hljs-attribute">xpack.security.enabled</span>: true<span class="hljs-attribute">xpack.security.transport.ssl.enabled</span>: true<span class="hljs-attribute">xpack.security.transport.ssl.verification_mode</span>: certificate<span class="hljs-attribute">xpack.security.transport.ssl.keystore.path</span>: elastic-certificates.p12<span class="hljs-attribute">xpack.security.transport.ssl.truststore.path</span>: elastic-certificates.p12</code></pre><h5 id="单节点配置："><a href="#单节点配置：" class="headerlink" title="单节点配置："></a>单节点配置：</h5><p>主要修改：</p><pre><code class="hljs css"><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.name</span>: <span class="hljs-selector-tag">node-1</span><span class="hljs-selector-tag">network</span><span class="hljs-selector-class">.host</span>: 192<span class="hljs-selector-class">.168</span><span class="hljs-selector-class">.186</span><span class="hljs-selector-class">.140</span><span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.port</span>: 9200<span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.initial_master_nodes</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;node-1&quot;</span>]</span><span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.enabled</span>: <span class="hljs-selector-tag">true</span><span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-origin</span>: &quot;*&quot;<span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-headers</span>: &quot;<span class="hljs-selector-tag">X-Requested-With</span>, <span class="hljs-selector-tag">Content-Type</span>, <span class="hljs-selector-tag">Content-Length</span>, <span class="hljs-selector-tag">X-User</span>&quot;</code></pre><h4 id="集群配置elasticsearch-yml（SSL认证-证书）"><a href="#集群配置elasticsearch-yml（SSL认证-证书）" class="headerlink" title="集群配置elasticsearch.yml（SSL认证/证书）"></a>集群配置elasticsearch.yml（SSL认证/证书）</h4><p><strong>生成证书—&gt;分发证书到节点—-&gt;修改配置文件—–&gt;elasticsearch各节点为xpack.security.transport添加密码</strong></p><h5 id="生成证书-密码1"><a href="#生成证书-密码1" class="headerlink" title="生成证书(密码1)"></a>生成证书(密码1)</h5><pre><code class="hljs stata">bin/elasticsearch-certutil  <span class="hljs-keyword">ca</span>   bin/elasticsearch-certutil  cert --<span class="hljs-keyword">ca</span> elastic-<span class="hljs-keyword">stack</span>-<span class="hljs-keyword">ca</span>.p12</code></pre><h5 id="分发证书到节点"><a href="#分发证书到节点" class="headerlink" title="分发证书到节点"></a>分发证书到节点</h5><pre><code class="hljs elixir">scp elastic-certificates.p12 es<span class="hljs-variable">@192</span>.<span class="hljs-number">168.186</span>.<span class="hljs-number">151</span><span class="hljs-symbol">:/home/es/elasticsearch-</span><span class="hljs-number">7.3</span>.<span class="hljs-number">2</span>/config/scp elastic-certificates.p12 es<span class="hljs-variable">@192</span>.<span class="hljs-number">168.186</span>.<span class="hljs-number">152</span><span class="hljs-symbol">:/home/es/elasticsearch-</span><span class="hljs-number">7.3</span>.<span class="hljs-number">2</span>/config/</code></pre><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>编辑vim elasticsearch.yml，添加如下配置：</p><pre><code class="hljs css"><span class="hljs-selector-tag">xpack</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.enabled</span>: <span class="hljs-selector-tag">true</span><span class="hljs-selector-tag">xpack</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.enabled</span>: <span class="hljs-selector-tag">truexpack</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.enabled</span>: <span class="hljs-selector-tag">true</span><span class="hljs-selector-tag">xpack</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.verification_mode</span>: <span class="hljs-selector-tag">certificate</span><span class="hljs-selector-tag">xpack</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.keystore</span><span class="hljs-selector-class">.path</span>: <span class="hljs-selector-tag">elastic-certificates</span><span class="hljs-selector-class">.p12</span><span class="hljs-selector-tag">xpack</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.truststore</span><span class="hljs-selector-class">.path</span>: <span class="hljs-selector-tag">elastic-certificates</span><span class="hljs-selector-class">.p12</span></code></pre><h5 id="各节点为xpack-security-transport添加密码-密码为创建证书时设置的密码"><a href="#各节点为xpack-security-transport添加密码-密码为创建证书时设置的密码" class="headerlink" title="各节点为xpack.security.transport添加密码(密码为创建证书时设置的密码)"></a>各节点为xpack.security.transport添加密码(密码为创建证书时设置的密码)</h5><pre><code class="hljs stylus">bin/elasticsearch-keystore add xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.keystore</span>.secure_passwordbin/elasticsearch-keystore add xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.truststore</span>.secure_password</code></pre><h5 id="非root用户重启elasticsearch服务"><a href="#非root用户重启elasticsearch服务" class="headerlink" title="非root用户重启elasticsearch服务"></a>非root用户重启elasticsearch服务</h5><h5 id="设置密码（需要es服务正在运行中）"><a href="#设置密码（需要es服务正在运行中）" class="headerlink" title="设置密码（需要es服务正在运行中）"></a>设置密码（需要es服务正在运行中）</h5><pre><code class="hljs angelscript">bin/elasticsearch-setup-passwords <span class="hljs-built_in">int</span>eractive  </code></pre><p><img src="https://i.loli.net/2020/11/19/kONVlUxq5BFfyvC.png" alt="image-20201119102153473"></p><h4 id="修改kibana配置文件（有密码）"><a href="#修改kibana配置文件（有密码）" class="headerlink" title="修改kibana配置文件（有密码）"></a>修改kibana配置文件（有密码）</h4><p><strong>1.修改kibana.yml配置文件，添加以下配置</strong></p><pre><code class="hljs routeros"><span class="hljs-comment">#进入kibana安装目录</span>cd /xxxx/kibana-7.2.0-linux-x86_64/config<span class="hljs-comment">#修改配置文件</span>vim kibana.yml<span class="hljs-comment">#添加配置</span>elasticsearch.username: <span class="hljs-string">&quot;elastic&quot;</span>elasticsearch.password: <span class="hljs-string">&quot;xxx&quot;</span></code></pre><p><strong>2.非root用户重启kibana服务</strong></p><p><strong>3.登录kibana</strong></p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="1-查询索引文档数量"><a href="#1-查询索引文档数量" class="headerlink" title="1.查询索引文档数量"></a>1.查询索引文档数量</h5><pre><code class="hljs dsconfig"><span class="hljs-string">curl </span><span class="hljs-built_in">--noproxy</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-built_in">--user</span> <span class="hljs-string">&#x27;user:passwd&#x27;</span> -X <span class="hljs-string">GET </span><span class="hljs-string">&#x27;http://ip:9200/_cat/count/index_name?v&#x27;</span><span class="hljs-string">epoch </span>     <span class="hljs-string">timestamp </span><span class="hljs-string">count</span><span class="hljs-string">1614838001 </span><span class="hljs-string">06:06:</span><span class="hljs-string">41 </span> <span class="hljs-string">122090</span><span class="hljs-string"></span><span class="hljs-string"></span><span class="hljs-string">curl </span><span class="hljs-built_in">--noproxy</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-built_in">--user</span> <span class="hljs-string">&#x27;user:passwd&#x27;</span> -X <span class="hljs-string">GET </span><span class="hljs-string">&#x27;http://ip:9200/_cat/indices?v</span></code></pre><h5 id="2-查看es状态"><a href="#2-查看es状态" class="headerlink" title="2.查看es状态"></a>2.查看es状态</h5><pre><code class="hljs routeros">curl --noproxy <span class="hljs-string">&#x27;*&#x27;</span> --user <span class="hljs-string">&#x27;user:passwd&#x27;</span> -X <span class="hljs-builtin-name">GET</span> <span class="hljs-string">&#x27;http://ip:9200/_cluster/health?pretty&#x27;</span>&#123;  <span class="hljs-string">&quot;cluster_name&quot;</span> : <span class="hljs-string">&quot;fx&quot;</span>,  <span class="hljs-string">&quot;status&quot;</span> : <span class="hljs-string">&quot;yellow&quot;</span>,  <span class="hljs-string">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,  <span class="hljs-string">&quot;number_of_nodes&quot;</span> : 1,  <span class="hljs-string">&quot;number_of_data_nodes&quot;</span> : 1,  <span class="hljs-string">&quot;active_primary_shards&quot;</span> : 22,  <span class="hljs-string">&quot;active_shards&quot;</span> : 22,  <span class="hljs-string">&quot;relocating_shards&quot;</span> : 0,  <span class="hljs-string">&quot;initializing_shards&quot;</span> : 0,  <span class="hljs-string">&quot;unassigned_shards&quot;</span> : 11,  <span class="hljs-string">&quot;delayed_unassigned_shards&quot;</span> : 0,  <span class="hljs-string">&quot;number_of_pending_tasks&quot;</span> : 0,  <span class="hljs-string">&quot;number_of_in_flight_fetch&quot;</span> : 0,  <span class="hljs-string">&quot;task_max_waiting_in_queue_millis&quot;</span> : 0,  <span class="hljs-string">&quot;active_shards_percent_as_number&quot;</span> : 66.66666666666666&#125;</code></pre><h5 id="3-删除索引下的数据"><a href="#3-删除索引下的数据" class="headerlink" title="3.删除索引下的数据"></a>3.删除索引下的数据</h5><pre><code class="hljs dsconfig"><span class="hljs-string">curl </span><span class="hljs-built_in">--noproxy</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-built_in">--user</span> <span class="hljs-string">&#x27;user:passwd&#x27;</span> -X <span class="hljs-string">POST </span><span class="hljs-string">&#x27;http:ip//:9200/cpsl_library_v1.12/_delete_by_query?pretty&#x27;</span> -d <span class="hljs-string">&#x27;&#123;&quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;&#125;&#x27;</span><span class="hljs-string">curl </span><span class="hljs-built_in">--noproxy</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-built_in">--user</span> <span class="hljs-string">&#x27;elastic:v2m$yYlvN!&#x27;</span> -X <span class="hljs-string">POST </span> <span class="hljs-string">&#x27;http://ip:9200/cpsl_library_v1.12/_delete_by_query?refresh&amp;pretty&#x27;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="hljs-string">&#x27;&#123;&quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;&#125;&#x27;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka安装使用</title>
    <link href="/2020/10/29/Kafka%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/10/29/Kafka%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>1.<a href="https://kafka.apachecn.org/downloads.html">官网下载</a></p><p>2.解压 tar -zxvf  xxxxxxx.tar.gz</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre><code class="hljs clean">############################# Server Basics ############################## broker的id，要求唯一，集群部署不能重复broker.id=<span class="hljs-number">0</span>############################# Socket Server Settings ############################## 监听的服务端口，所部署机器的IP或者域名＋端口，记得防火墙开端口 # 监听器列表 - 使用逗号分隔URI列表和监听器名称。如果侦听器名称不是安全协议，则还必须设置listener.security.protocol.map。指定主机名为<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>来绑定到所有接口。留空则绑定到默认接口上# java.net.InetAddress.getCanonicalHostName() <span class="hljs-keyword">if</span> not configured.#   FORMAT:#     listeners = listener_name:<span class="hljs-comment">//host_name:port</span>#   EXAMPLE:#     listeners = PLAINTEXT:<span class="hljs-comment">//your.host.name:9092</span>listeners=PLAINTEXT:<span class="hljs-comment">//192.168.186.144:9092</span># Hostname and port the broker will advertise to producers and consumers. If not set, # it uses the value for <span class="hljs-string">&quot;listeners&quot;</span> <span class="hljs-keyword">if</span> configured.  Otherwise, it will use the value# returned <span class="hljs-keyword">from</span> java.net.InetAddress.getCanonicalHostName().#advertised.listeners=PLAINTEXT:<span class="hljs-comment">//your.host.name:9092</span># Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL# 服务器用于从接收网络请求并发送网络响应的线程数num.network.threads=<span class="hljs-number">3</span># 服务器用于处理请求的线程数，可能包括磁盘I/Onum.io.threads=<span class="hljs-number">8</span># 服务端用来处理socket连接的SO_SNDBUF缓冲大小。如果值为<span class="hljs-number">-1</span>，则使用系统默认值。socket.send.buffer.bytes=<span class="hljs-number">102400</span># 服务端用来处理socket连接的SO_RCVBUFF缓冲大小。如果值为<span class="hljs-number">-1</span>，则使用系统默认值socket.receive.buffer.bytes=<span class="hljs-number">102400</span># socket请求的最大大小，这是为了防止server跑光内存，不能大于Java堆的大小。（<span class="hljs-number">104857600</span>-&gt;<span class="hljs-number">100</span>MB）socket.request.max.bytes=<span class="hljs-number">104857600</span>############################# Log Basics ############################## 保存日志数据的目录，如果未设置将使用log.dir的配置。log.dirs=/home/cloud/server/kafka/kafka/logs# ！！每个topic的默认日志分区数 ！！num.partitions=<span class="hljs-number">3</span># 每个数据目录，用于启动时日志恢复和关闭时刷新的线程数num.recovery.threads.per.data.dir=<span class="hljs-number">1</span>############################# Internal Topic Settings  ############################## The replication factor for the group metadata internal topics <span class="hljs-string">&quot;__consumer_offsets&quot;</span> and <span class="hljs-string">&quot;__transaction_state&quot;</span># For anything other than development testing, a value greater than <span class="hljs-number">1</span> is recommended for to ensure availability such <span class="hljs-keyword">as</span> <span class="hljs-number">3.</span># offset topic的副本数（设置的越大，可用性越高）。内部topic创建将失败，直到集群大小满足此副本数要求。offsets.topic.replication.factor=<span class="hljs-number">3</span># 事务topic的副本数（设置的越大，可用性越高）。内部topic在集群数满足副本数之前，将会一直创建失败。transaction.state.log.replication.factor=<span class="hljs-number">1</span># 覆盖事务topic的min.insync.replicas配置# 当producer将ack设置为“全部”（或“<span class="hljs-number">-1</span>”）时，min.insync.replicas指定了被认为写入成功的最小副本数。# 如果这个最小值不能满足，那么producer将会引发一个异常（NotEnoughReplicas或NotEnoughReplicasAfterAppend）。# 当一起使用时，min.insync.replicas和acks允许您强制更大的耐久性保证。 # 一个经典的情况是创建一个复本数为<span class="hljs-number">3</span>的topic，将min.insync.replicas设置为<span class="hljs-number">2</span>，并且producer使用“all”选项。 # 这将确保如果大多数副本没有写入producer则抛出异常。transaction.state.log.min.isr=<span class="hljs-number">1</span>############################# Log Flush Policy ############################## Messages are immediately written to the filesystem but by default we only fsync() to sync# the OS cache lazily. The following configurations control the flush <span class="hljs-keyword">of</span> data to disk.# There are a few important trade-offs here:#    <span class="hljs-number">1.</span> Durability: Unflushed data may be lost <span class="hljs-keyword">if</span> you are not using replication.#    <span class="hljs-number">2.</span> Latency: Very large flush intervals may lead to latency spikes when the flush does occur <span class="hljs-keyword">as</span> there will be a lot <span class="hljs-keyword">of</span> data to flush.#    <span class="hljs-number">3.</span> Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.# The settings below allow one to configure the flush policy to flush data after a period <span class="hljs-keyword">of</span> time or# every N messages (or both). This can be done globally and overridden on a per-topic basis.# 在将消息刷新到磁盘之前，在日志分区上累积的消息数量。默认：    <span class="hljs-number">9223372036854775807</span>#log.flush.interval.messages=<span class="hljs-number">10000</span># 在刷新到磁盘之前，任何topic中的消息保留在内存中的最长时间（以毫秒为单位）。如果未设置，则使用# 如果未设置，则使用log.flush.scheduler.interval.ms中的值。 #log.flush.interval.ms=<span class="hljs-number">1000</span>############################# Log Retention Policy ############################## The following configurations control the disposal <span class="hljs-keyword">of</span> log segments. The policy can# be set to delete segments after a period <span class="hljs-keyword">of</span> time, or after a given size has accumulated.# A segment will be deleted whenever *either* <span class="hljs-keyword">of</span> these criteria are met. Deletion always happens# <span class="hljs-keyword">from</span> the end <span class="hljs-keyword">of</span> the log.# The minimum age <span class="hljs-keyword">of</span> a log file to be eligible for deletion due to agelog.retention.hours=<span class="hljs-number">168</span># A size-based retention policy for logs. Segments are pruned <span class="hljs-keyword">from</span> the log unless the remaining# segments drop below log.retention.bytes. Functions independently <span class="hljs-keyword">of</span> log.retention.hours.#log.retention.bytes=<span class="hljs-number">1073741824</span># The maximum size <span class="hljs-keyword">of</span> a log segment file. When this size is reached a new log segment will be created.log.segment.bytes=<span class="hljs-number">1073741824</span># The interval at which log segments are checked to see <span class="hljs-keyword">if</span> they can be deleted according# to the retention policieslog.retention.check.interval.ms=<span class="hljs-number">300000</span>############################# Zookeeper ############################## Zookeeper connection string (see zookeeper docs for details).# This is a comma separated host:port pairs, each corresponding to a zk# server. e.g. <span class="hljs-string">&quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;</span>.# You can also append an optional chroot string to the urls to specify the# root directory for all kafka znodes.zookeeper.connect=localhost:<span class="hljs-number">2181</span># Timeout <span class="hljs-keyword">in</span> ms for connecting to zookeeperzookeeper.connection.timeout.ms=<span class="hljs-number">6000</span>############################# Group Coordinator Settings ############################## The following configuration specifies the time, <span class="hljs-keyword">in</span> milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.# The rebalance will be further delayed by the value <span class="hljs-keyword">of</span> group.initial.rebalance.delay.ms <span class="hljs-keyword">as</span> new members join the group, up to a maximum <span class="hljs-keyword">of</span> max.poll.interval.ms.# The default value for this is <span class="hljs-number">3</span> seconds.# We override this to <span class="hljs-number">0</span> here <span class="hljs-keyword">as</span> it makes for a better out-<span class="hljs-keyword">of</span>-the-box experience for development and testing.# However, <span class="hljs-keyword">in</span> production environments the default value <span class="hljs-keyword">of</span> <span class="hljs-number">3</span> seconds is more suitable <span class="hljs-keyword">as</span> this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.group.initial.rebalance.delay.ms=<span class="hljs-number">0</span></code></pre><h4 id="启动zk"><a href="#启动zk" class="headerlink" title="启动zk"></a>启动zk</h4><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/</span>zkServer.sh start</code></pre><h4 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h4><pre><code class="hljs pgsql">nohup ./bin/kafka-<span class="hljs-keyword">server</span>-<span class="hljs-keyword">start</span>.sh config/<span class="hljs-keyword">server</span>.properties &gt; <span class="hljs-keyword">server</span>.<span class="hljs-keyword">out</span> &amp;nohup ./bin/kafka-<span class="hljs-keyword">server</span>-<span class="hljs-keyword">start</span>.sh config/<span class="hljs-keyword">server</span><span class="hljs-number">-1.</span>properties &gt; server1.<span class="hljs-keyword">out</span> &amp;nohup ./bin/kafka-<span class="hljs-keyword">server</span>-<span class="hljs-keyword">start</span>.sh config/<span class="hljs-keyword">server</span><span class="hljs-number">-2.</span>properties &gt; server2.<span class="hljs-keyword">out</span> &amp;</code></pre><h4 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h4><pre><code class="hljs brainfuck"><span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> --<span class="hljs-comment">create</span> --<span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> --<span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">1</span> --<span class="hljs-comment">partitions</span> <span class="hljs-comment">1</span> --<span class="hljs-comment">topic</span> <span class="hljs-comment">kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">stream1</span></code></pre><h4 id="查看topic"><a href="#查看topic" class="headerlink" title="查看topic"></a>查看topic</h4><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 查看topic列表</span><span class="hljs-string">./bin/kafka-topics.sh</span> <span class="hljs-params">--list</span> <span class="hljs-params">--zookeeper</span> 192.168.186.140<span class="hljs-function">:2181</span><span class="hljs-comment"># 查看topic描述</span><span class="hljs-string">./bin/kafka-topics.sh</span> <span class="hljs-params">--describe</span> <span class="hljs-params">--zookeeper</span> 192.168.186.140<span class="hljs-function">:2181</span> <span class="hljs-params">--topic</span> kafka-test<span class="hljs-comment"># 删除topic</span><span class="hljs-string">./bin/kafka-topics.sh</span> <span class="hljs-params">--delete</span> <span class="hljs-params">--zookeeper</span> 192.168.186.140<span class="hljs-function">:2181</span> <span class="hljs-params">--topic</span> topic1</code></pre><h4 id="查看消费者组"><a href="#查看消费者组" class="headerlink" title="查看消费者组"></a>查看消费者组</h4><pre><code class="hljs jboss-cli"><span class="hljs-string">./bin/kafka-consumer-groups.sh</span> <span class="hljs-params">--new-consumer</span> <span class="hljs-params">--bootstrap-server</span> 192.168.186.140<span class="hljs-function">:9092</span> <span class="hljs-params">--list</span><span class="hljs-comment"># 查看特定组信息</span><span class="hljs-string">./bin/kafka-consumer-groups.sh</span> <span class="hljs-params">--bootstrap-server</span> 192.168.186.140<span class="hljs-function">:9092</span> <span class="hljs-params">--group</span> kafka_tran_g1 <span class="hljs-params">--describe</span></code></pre><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><pre><code class="hljs angelscript">./bin/kafka-console-consumer.sh --bootstrap-server <span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.140</span>:<span class="hljs-number">9092</span> --<span class="hljs-keyword">from</span>-beginning --topic kafka-test./bin/kafka-console-consumer.sh --bootstrap-server <span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.140</span>:<span class="hljs-number">9092</span> --topic kafka-stream2</code></pre><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><pre><code class="hljs angelscript">./bin/kafka-console-producer.sh --broker-list <span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.140</span>:<span class="hljs-number">9092</span> --topic kafka-stream1</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Kafka</tag>
      
      <tag>Spring-Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2020/10/10/Docker/"/>
    <url>/2020/10/10/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装&amp;配置"></a>安装&amp;配置</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><pre><code class="hljs properties"><span class="hljs-comment">#启动服务</span><span class="hljs-attr">systemctl</span> <span class="hljs-string">start docker</span><span class="hljs-comment">#获取镜像</span><span class="hljs-attr">docker</span>  <span class="hljs-string">pull [镜像:xx.xx]</span><span class="hljs-meta">//docker</span> <span class="hljs-string">pull mysql:8.0.12</span><span class="hljs-comment">#列出镜像</span><span class="hljs-attr">docker</span> <span class="hljs-string">image ls -a</span><span class="hljs-comment">#运行容器</span><span class="hljs-attr">docker</span> <span class="hljs-string">run [镜像]</span><span class="hljs-comment">#查看正在运行的容器</span><span class="hljs-attr">docker</span> <span class="hljs-string">ps</span><span class="hljs-comment">#进入交互界面</span><span class="hljs-attr">docker</span> <span class="hljs-string">exec -it 【短ID】 /bin/bash</span><span class="hljs-comment">#查找镜像</span><span class="hljs-attr">docker</span> <span class="hljs-string">search [镜像]</span><span class="hljs-comment">#查看终止状态的容器</span><span class="hljs-attr">docker</span> <span class="hljs-string">container ls -a</span><span class="hljs-comment">#保存容器</span><span class="hljs-attr">docker</span> <span class="hljs-string">commit 【短ID】 容器名称:容器版本 </span><span class="hljs-comment">#删除容器（首先kill运行中的容器然后删除终止状态的容器）</span><span class="hljs-attr">docker</span> <span class="hljs-string">kill -s KILL [短ID(终止状态)]</span><span class="hljs-attr">docker</span> <span class="hljs-string">container rm 【短ID】来删除一个处于终止状态的容器</span><span class="hljs-comment">#清理所有处于终止状态的容器</span><span class="hljs-attr">docker</span> <span class="hljs-string">container prune</span><span class="hljs-comment">#删除镜像</span><span class="hljs-attr">docker</span> <span class="hljs-string">image rm 【短ID】</span><span class="hljs-comment">#若需要删除所有仓库名为 redis 的镜像：</span><span class="hljs-attr">docker</span> <span class="hljs-string">image rm $(docker image ls -q redis)</span><span class="hljs-comment">#查看容器信息</span><span class="hljs-attr">docker</span> <span class="hljs-string">inspect 【短ID】</span></code></pre><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p><strong>docker 安装 mysql 8 版本</strong></p><pre><code class="hljs routeros"><span class="hljs-comment"># docker 中下载 mysql</span>docker pull mysql:8.0.12<span class="hljs-comment">#启动</span>   docker <span class="hljs-builtin-name">run</span> --name mysql  -v D:\DockerImgs\MySQLdatabase:/var/lib/mysql -p 3306:3306 -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=root -e <span class="hljs-attribute">MYSQL_DATABASE</span>=inst1 -d mysql:8.0.12--name mysql  将容器命名为mysql，后面可以用这个name进行容器的启动暂停等操作-e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=123456 设置MySQL密码为123456-d 此容器在后台运行,并且返回容器的ID-i 以交互模式运行容器-p 进行端口映射，格式为主机(宿主)端口:容器端口<span class="hljs-attribute">--restart</span>=always 当docker重启时，该容器自动重启<span class="hljs-comment">#进入容器</span>docker exec -it mysql bash<span class="hljs-comment">#登录mysql</span>mysql -u root -p<span class="hljs-comment">#查看表</span>show databases;<span class="hljs-comment">##修改本地连接 </span>ALTER<span class="hljs-built_in"> USER </span><span class="hljs-string">&#x27;root&#x27;</span>@localhost IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;123456&#x27;</span>;flush privileges;<span class="hljs-comment">#远程连接</span>ALTER<span class="hljs-built_in"> USER </span><span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;123456&#x27;</span>;flush privileges;<span class="hljs-comment">#挂载到本地（需要授权）</span> -v D:\DockerImgs\MySQLdatabase:/var/lib/mysql</code></pre><h3 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h3><pre><code class="hljs awk"><span class="hljs-comment"># docker 中下载 ubuntu</span>docker pull ubuntu:<span class="hljs-number">18.04</span><span class="hljs-comment">#启动且允许用户进行交互</span>docker run --name ubuntu ubuntu:<span class="hljs-number">18.04</span> <span class="hljs-regexp">/usr/</span>sbin/initdocker run --privileged --name centos centos <span class="hljs-regexp">/usr/</span>sbin/init<span class="hljs-comment">#进入</span>docker exec -it centos bash<span class="hljs-comment">#查看信息</span>root@af8bae53bdd3:<span class="hljs-regexp">/#cat /</span>etc/os-release<span class="hljs-comment">#安装firewalld 防火墙</span>yum install firewalld<span class="hljs-comment">#安装ifconfig</span>yum search ifconfigyum install net-tools.x86_64 -y<span class="hljs-comment">#设置密码</span>passwd    <span class="hljs-comment">#如果没有该命令 使用yum install passwd</span><span class="hljs-comment">#安装Openssh </span>yum -y install openssh-serveryum -y install openssh-clients<span class="hljs-comment">#修改/etc/ssh/sshd_config配置并保存：</span>vi <span class="hljs-regexp">/etc/</span>ssh/sshd_configPermitRootLogin yes    UsePAM noport=<span class="hljs-number">22</span> <span class="hljs-comment">#开启22端口</span>RSAAuthentication yes <span class="hljs-comment">#启用 RSA 认证</span>PubkeyAuthentication yes <span class="hljs-comment">#启用公钥私钥配对认证方式</span>AuthorizedKeysFile .ssh/authorized_keys <span class="hljs-comment">#公钥文件路径（和上面生成的文件同）</span>PermitRootLogin yes <span class="hljs-comment">#root能使用ssh登录</span><span class="hljs-comment">#启动ssh服务</span>systemctl start sshdsystemctl status sshd<span class="hljs-comment">#重启ssh服务，并设置开机启动：</span>yum install initscripts -yservice sshd restartchkconfig sshd on<span class="hljs-comment">#安装jdk</span>查看yum库中的java安装包 ：yum -y list java*yum -y install java-<span class="hljs-number">11</span>-openjdk.x86_64 java-<span class="hljs-number">11</span>-openjdk-devel.x86_64<span class="hljs-comment">#安装路径</span> cd <span class="hljs-regexp">/usr/</span>lib/jvm <span class="hljs-comment">#安装MySQL</span>  yum install wget.x86_64 -y  wget http:<span class="hljs-regexp">//</span>repo.mysql.com/mysql80-community-release-el7-<span class="hljs-number">1</span>.noarch.rpm  yum -y install mysql80-community-release-el7-<span class="hljs-number">1</span>.noarch.rpm  yum -y install mysql-community-server  <span class="hljs-comment">#查看默认密码</span>  grep <span class="hljs-string">&#x27;temporary password&#x27;</span> <span class="hljs-regexp">/var/</span>log/mysqld.log  <span class="hljs-comment">#修改密码</span>  ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;Xiao_00oo&#x27;</span>;(过于简单改不了)  （      ===<span class="hljs-comment">#跳过密码(算了吧)</span>      vi <span class="hljs-regexp">/etc/my</span>.cnf       配置文件添加skip-grant-tables       ===  ）  <span class="hljs-comment">#修改远程连接</span>  update user set host = <span class="hljs-string">&#x27;%&#x27;</span> where user = <span class="hljs-string">&#x27;root&#x27;</span>;  <span class="hljs-comment">#保存后重启mysql</span>  systemctl restart mysqld  <span class="hljs-comment">#查看状态</span>  systemctl status mysqld  <span class="hljs-comment">#卸载mysql</span>  yum remove mysql mysql-server mysql-libs compat-mysql8  <span class="hljs-comment">#下载tomcat9</span>  wget http:<span class="hljs-regexp">//mi</span>rror.bit.edu.cn<span class="hljs-regexp">/apache/</span>tomcat<span class="hljs-regexp">/tomcat-9/</span>v9.<span class="hljs-number">0.24</span><span class="hljs-regexp">/bin/</span>apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">24</span>.tar.gz  <span class="hljs-comment">#解压</span>   tar zxvf apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">24</span>.tar.gz  <span class="hljs-comment">#启动 cd到安装目录 </span>  启动服务 ./catlina run  关闭服务 ctrl+c <span class="hljs-comment">#开端口命令：</span>     【单个】    firewall-cmd --zone=public --add-port=<span class="hljs-number">80</span>/tcp --permanent    【范围】    firewall-cmd --zone=public --add-port=<span class="hljs-number">50000</span>-<span class="hljs-number">50100</span>/tcp --permanent    【删除】    firewall-cmd --zone=public --remove-port=<span class="hljs-number">80</span>/tcp --permanent <span class="hljs-comment">#重启防火墙：</span>     systemctl restart firewalld.service <span class="hljs-comment">#找出公共区域的所有设置</span>     firewall-cmd --zone=public --list-all     firewall-cmd --list-all <span class="hljs-comment">#用于显示 tcp，udp 的端口和进程等相关情况</span>     netstat -tunlp  <span class="hljs-comment">#后台运行程序并把日志输出到output文件中</span> nohup PORT=<span class="hljs-number">9999</span> node app.js &gt;music.txt <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;</code></pre><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 启动Redis</span>    docker run -di <span class="hljs-params">--name</span> myredis -p 6379<span class="hljs-function">:6379</span> redis    docker exec -it myredis redis-cli docker run <span class="hljs-params">--name</span> myredis -v C:\Users\Admin\Desktop\redis-2.4.5-win32-win64\64bit:<span class="hljs-string">/data</span> -di -p 6379<span class="hljs-function">:6379</span> redis     -p 6379<span class="hljs-function">:6379</span> : 将容器的6379端口映射到主机的6379端口 -d : 将容器的在后台运行 -v $PWD/data:<span class="hljs-string">/data</span> : 将主机中当前目录下的data挂载到容器的<span class="hljs-string">/data</span> <span class="hljs-string">.redis</span>数据卷,如未加上这个,容器重启后数据将丢失. redis-server <span class="hljs-params">--appendonly</span> yes : 在容器执行redis-server启动命令，并打开redis持久化配置  <span class="hljs-params">--requirepass</span> <span class="hljs-string">&quot;ReDis@.1*1PWD&quot;</span>  设置引号里字符为密码 –restart=always : 随docker启动而启动$ <span class="hljs-keyword">cd</span> src$  <span class="hljs-string">./src/redis-server</span> <span class="hljs-string">./redis.conf</span>    <span class="hljs-string">./src/redis-cli</span></code></pre><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><pre><code class="hljs properties"><span class="hljs-comment">#拉取镜像</span>    <span class="hljs-attr">docker</span> <span class="hljs-string">pull tomcat  默认是最新的</span>    <span class="hljs-attr">docker</span> <span class="hljs-string">pull tomcat:8  指定版本</span><span class="hljs-comment"># 启动</span>    <span class="hljs-attr">docker</span> <span class="hljs-string">run -it --rm -p 8888:8080 tomcat  打印日志</span>    <span class="hljs-attr">docker</span> <span class="hljs-string">run -it -d -p 8888:8080 tomcat:8  指定版本且后台启动</span><span class="hljs-comment"># 访问</span>    <span class="hljs-attr">ip</span>:<span class="hljs-string">8888</span><span class="hljs-comment">####如果出现404，则</span>    <span class="hljs-meta">使用命令</span>: <span class="hljs-string">docker exec -it 运行的tomcat容器ID /bin/bash 进入到tomcat的目录</span>    <span class="hljs-meta">使用命令</span>: <span class="hljs-string">ls -l 发现有webapps 和 webapps.dist 两个文件夹</span>    <span class="hljs-meta">查看webapps</span> <span class="hljs-string">文件夹，发现里面没有文件，而 webapps.dist 里面有文件</span>    <span class="hljs-attr">使用过tomcat的都应该知道，webapps是tomcat存放静态资源的目录</span>    <span class="hljs-attr">只要把webapps.dist重命名为webapps就好了</span>     <span class="hljs-attr">mv</span> <span class="hljs-string">webapps webapps2</span>     <span class="hljs-attr">mv</span> <span class="hljs-string">webapps.dist/ webapps</span>    <span class="hljs-attr">再次访问就ok了</span></code></pre><p><img src="https://i.loli.net/2020/09/30/tFSDfVOzy4l7MqY.png" alt="image-20200930104659743"></p><pre><code class="hljs elixir"><span class="hljs-comment">#复制tomcat配置文件和webapps</span>     docker cp 【短ID】<span class="hljs-symbol">:/usr/local/tomcat/conf</span> /home/data/tomcat     docker cp 【短ID】<span class="hljs-symbol">:/usr/local/tomcat/conf/webapps</span> /home/data/tomcat<span class="hljs-comment">#挂载目录启动      </span>    docker run -d --name mytomcat -p <span class="hljs-number">8888:8080</span> -v /home/data/tomcat/conf/<span class="hljs-symbol">:/usr/local/tomcat/conf/</span> -v /home/data/tomcat/webapps/<span class="hljs-symbol">:/usr/local/tomcat/webapps/</span> tomcat</code></pre><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><pre><code class="hljs awk"><span class="hljs-comment">#获取nginx</span>    docker pull nginx<span class="hljs-comment">#运行</span>    docker run -id -p <span class="hljs-number">82</span>:<span class="hljs-number">80</span> nginx<span class="hljs-comment">#访问</span>    ip:<span class="hljs-number">82</span><span class="hljs-comment">#重启</span>    docker restart 【短ID】<span class="hljs-comment">#停止</span>    docker stop 【短ID】<span class="hljs-comment">#复制配置文件夹到服务器---(/home/data需要自己创建)</span>    docker cp 【短ID】:<span class="hljs-regexp">/etc/</span>nginx <span class="hljs-regexp">/home/</span>data    docker cp ea14a70c74ab:<span class="hljs-regexp">/etc/</span>nginx <span class="hljs-regexp">/home/</span>data<span class="hljs-comment">#挂载容器目录启动nginx容器</span>    docker run -id --name mynginx -v <span class="hljs-regexp">/home/</span>data<span class="hljs-regexp">/nginx:/</span>etc/nginx -p <span class="hljs-number">82</span>:<span class="hljs-number">80</span> nginx<span class="hljs-comment">#挂载静态资源目录 (/home/data/web)</span>    docker run -id --name mynginx -v <span class="hljs-regexp">/home/</span>data<span class="hljs-regexp">/nginx:/</span>etc<span class="hljs-regexp">/nginx -v /</span>home<span class="hljs-regexp">/data/</span>web:<span class="hljs-regexp">/home/</span>data/web -p <span class="hljs-number">82</span>:<span class="hljs-number">80</span> nginx<span class="hljs-comment">#访问</span>    ip:<span class="hljs-number">82</span></code></pre><h3 id="MinIO-Docker"><a href="#MinIO-Docker" class="headerlink" title="MinIO Docker"></a>MinIO Docker</h3><pre><code class="hljs routeros"><span class="hljs-comment"># docker安装镜像</span>    docker pull minio/minio<span class="hljs-comment"># 启动</span>    docker <span class="hljs-builtin-name">run</span> -p 9000:9000 -d --name minio \      -v /home/Photo:/data \      -v /mnt/config:/root/.minio \      minio/minio<span class="hljs-built_in"> server </span>/data<span class="hljs-comment"># 默认用户密码 </span>    minioadmin    minioadmin</code></pre><h3 id="Docker-Build"><a href="#Docker-Build" class="headerlink" title="Docker Build"></a>Docker Build</h3><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><h5 id="1-编写Dockerfile"><a href="#1-编写Dockerfile" class="headerlink" title="1.编写Dockerfile"></a>1.编写Dockerfile</h5><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>u212-jre<span class="hljs-keyword">MAINTAINER</span> xxx xxxxx@qq.com<span class="hljs-keyword">COPY</span><span class="bash"> docker-test.jar /docker/docker-test.jar</span><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-Xmx256m&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/docker/docker-test.jar&quot;</span>]</span></code></pre><ol><li><p><code>FROM openjdk:8u212-jre</code>表示由<code>openjdk:8u212-jre</code>基础镜像构建。因为我们的项目使用的是JDK 1.8，所以我们要依赖于1.8版本的JDK镜像构建，openjdk官方Docker镜像仓库为<a href="https://hub.docker.com/_/openjdk?tab=tags%EF%BC%8C%E6%88%91%E6%8C%91%E4%BA%86%E4%B8%AA%E4%BD%93%E7%A7%AF%E7%9B%B8%E5%AF%B9%E8%BE%83%E5%B0%8F%E7%9A%84openjdk:8u212-jre%EF%BC%9B">https://hub.docker.com/_/openjdk?tab=tags，我挑了个体积相对较小的openjdk:8u212-jre；</a></p></li><li><p><code>MAINTAINER xxx xxxxx@qq.com</code>指定镜像的作者及联系方式；</p></li><li><p><code>COPY docker-test.jar /docker/docker-test.jar</code>表示将当前目录下的docker-test.jar拷贝到<code>openjdk:8u212-jre</code>镜像里的/docker目录下，名称也为docker-test.jar；</p></li><li><p><code>ENTRYPOINT [&quot;java&quot;, &quot;-Xmx256m&quot;, &quot;-jar&quot;, &quot;/docker/docker-test.jar&quot;]</code>表示运行<code>java -jar</code>运行镜像里的jar包，JVM内存最大分配为256m（因为要运行的微服务较多并且虚拟机内存只有6GB，所以内存分配小了点，实际可以根据宿主服务器的配置做出相应调整）。</p></li></ol><h5 id="2-构建镜像"><a href="#2-构建镜像" class="headerlink" title="2.构建镜像"></a>2.构建镜像</h5><p>DockerFile创建好后，在当前目录下运行以下命令构建镜像：</p><pre><code class="hljs cmake">docker build -t docker-<span class="hljs-keyword">test</span> .</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装RabbitMQ</title>
    <link href="/2020/09/22/Centos7%E5%AE%89%E8%A3%85RabbitMQ/"/>
    <url>/2020/09/22/Centos7%E5%AE%89%E8%A3%85RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h5 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h5><p>RabbitMQ是用Erlang语言编写的，在本教程中我们将安装最新版本的Erlang到服务器中。 Erlang在默认的YUM存储库中不可用，因此您将需要安装EPEL存储库。 运行以下命令相同。</p><pre><code class="hljs sql">yum -y <span class="hljs-keyword">install</span> epel-<span class="hljs-keyword">release</span>yum -y <span class="hljs-keyword">update</span></code></pre><p>现在使用以下命令安装Erlang。</p><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> erlang socat</code></pre><p>您现在可以使用以下命令检查Erlang版本。</p><p>erl -version</p><p>您将得到以下输出。</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>liptan-pc ~]# erl -versionErlang (ASYNC_THREADS,HIPE) (BEAM) emulator version <span class="hljs-number">5.10</span><span class="hljs-number">.4</span></code></pre><p>要切换到Erlang <a href="https://www.linuxcool.com/">shell</a>，可以键入以下命令。</p><pre><code class="hljs ebnf"><span class="hljs-attribute">erl</span></code></pre><p>shell将更改，您将得到以下输出。</p><pre><code class="hljs apache"><span class="hljs-attribute">Erlang</span> R<span class="hljs-number">16</span>B<span class="hljs-number">03</span>-<span class="hljs-number">1</span> (erts-<span class="hljs-number">5</span>.<span class="hljs-number">10</span>.<span class="hljs-number">4</span>)<span class="hljs-meta"> [source] [64-bit] [async-threads:10] [hipe] [kernel-poll:false]</span><span class="hljs-attribute">Eshell</span> V<span class="hljs-number">5</span>.<span class="hljs-number">10</span>.<span class="hljs-number">4</span>  (abort with ^G)<span class="hljs-attribute">1</span>&gt;</code></pre><p>您可以通过按ctrl + C两次退出shell。 Erlang现在安装在系统上，现在可以继续安装RabbitMQ。</p><h5 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h5><p>RabbitMQ为预编译并可以直接安装的企业<a href="https://www.linuxprobe.com/">Linux系统</a>提供RPM软件包。 唯一需要的依赖是将Erlang安装到系统中。 我们已经安装了Erlang，我们可以进一步下载RabbitMQ。 通过运行下载Erlang RPM软件包。</p><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://www.rabbitmq.com/releases/rabbitmq-server/v<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">10</span>/rabbitmq-server-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">10</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.noarch.rpm</code></pre><p>如果你没有安装wget ，可以运行yum -y install wget 。 您可以随时找到最新版本的RabbitMQ下载页面的链接。</p><p>通过运行导入GPG密钥：</p><pre><code class="hljs groovy">rpm –<span class="hljs-keyword">import</span> <span class="hljs-attr">https:</span><span class="hljs-comment">//www.rabbitmq.com/rabbitmq-release-signing-key.asc</span></code></pre><p>运行RPM安装RPM包：</p><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -Uvh rabbitmq-server-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">10</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.noarch.rpm</code></pre><p>RabbitMQ现已安装在您的系统上。</p><h5 id="开始RabbitMQ"><a href="#开始RabbitMQ" class="headerlink" title="开始RabbitMQ"></a>开始RabbitMQ</h5><p>您可以通过运行以下命令启动RabbitMQ服务器进程。</p><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">start</span> rabbitmq-<span class="hljs-keyword">server</span></code></pre><p>要在引导时自动启动RabbitMQ，请运行以下命令。</p><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">enable</span> rabbitmq-<span class="hljs-keyword">server</span></code></pre><p>要检查RabbitMQ服务器的状态，请运行：</p><pre><code class="hljs axapta">systemctl status rabbitmq-<span class="hljs-keyword">server</span></code></pre><p>如果启动成功，您应该得到以下输出。</p><pre><code class="hljs angelscript">? rabbitmq-server.service - RabbitMQ broker   Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; enabled; vendor preset: disabled)   Active: active (running) since Sat <span class="hljs-number">2017</span><span class="hljs-number">-07</span><span class="hljs-number">-15</span> <span class="hljs-number">18</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span> UTC; <span class="hljs-number">3</span>min <span class="hljs-number">22</span>s ago Main PID: <span class="hljs-number">29006</span> (beam.smp)   Status: <span class="hljs-string">&quot;Initialized&quot;</span>   CGroup: /system.slice/rabbitmq-server.service           ??<span class="hljs-number">29006</span> /usr/lib64/erlang/erts<span class="hljs-number">-9.0</span>/bin/beam.smp -W w -A <span class="hljs-number">64</span> -P <span class="hljs-number">1048576</span> -t <span class="hljs-number">5000000</span> -stbt db -zdbbl <span class="hljs-number">32000</span> -K tr...           ??<span class="hljs-number">29149</span> /usr/lib64/erlang/erts<span class="hljs-number">-9.0</span>/bin/epmd -daemon           ??<span class="hljs-number">29283</span> erl_child_setup <span class="hljs-number">1024</span>           ??<span class="hljs-number">29303</span> inet_gethost <span class="hljs-number">4</span>           ??<span class="hljs-number">29304</span> inet_gethost <span class="hljs-number">4</span>Jul <span class="hljs-number">15</span> <span class="hljs-number">18</span>:<span class="hljs-number">59</span>:<span class="hljs-number">13</span> centos rabbitmq-server[<span class="hljs-number">29006</span>]: Starting broker...Jul <span class="hljs-number">15</span> <span class="hljs-number">18</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span> centos rabbitmq-server[<span class="hljs-number">29006</span>]: systemd unit <span class="hljs-keyword">for</span> activation check: <span class="hljs-string">&quot;rabbitmq-server.service&quot;</span>Jul <span class="hljs-number">15</span> <span class="hljs-number">18</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span> centos systemd[<span class="hljs-number">1</span>]: Started RabbitMQ broker.Jul <span class="hljs-number">15</span> <span class="hljs-number">18</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span> centos rabbitmq-server[<span class="hljs-number">29006</span>]: completed with <span class="hljs-number">0</span> plugins.</code></pre><h5 id="修改防火墙和SELinux规则"><a href="#修改防火墙和SELinux规则" class="headerlink" title="修改防火墙和SELinux规则"></a>修改防火墙和<a href="/2020/08/10/SELinux/">SELinux规则</a></h5><pre><code class="hljs dockerfile"><span class="hljs-comment">#放行5672和15672两个端口，（--permanent表示永久生效，没有此参数重启后失效）</span>firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --zone=public --add-port=5672/tcp --permanent</span>firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --zone=public --add-port=15672/tcp --permanent</span><span class="hljs-comment">#重载防火墙是设置生效</span>firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --reload</span><span class="hljs-comment">#查看放行端口列表，此时列表显示如下图</span>firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --list-all</span></code></pre><p>如果您启用SELinux，则必须运行以下命令以允许RabbitMQ服务。</p><pre><code class="hljs angelscript">setsebool -P nis_enabled <span class="hljs-number">1</span></code></pre><h5 id="访问Web控制台"><a href="#访问Web控制台" class="headerlink" title="访问Web控制台"></a>访问Web控制台</h5><p>启动RabbitMQ Web管理控制台，方法是运行：</p><pre><code class="hljs routeros">rabbitmq-plugins <span class="hljs-builtin-name">enable</span> rabbitmq_management</code></pre><p>通过运行以下命令，将RabbitMQ文件的所有权提供给RabbitMQ用户：</p><pre><code class="hljs crystal">chown -R <span class="hljs-symbol">rabbitmq:</span>rabbitmq /var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">rabbitmq</span>/</span></code></pre><p>现在，您将需要为RabbitMQ Web管理控制台创建管理用户。 运行以下命令相同。</p><pre><code class="hljs nsis"><span class="hljs-comment">#查看当前用户列表</span>rabbitmqctl list_users<span class="hljs-comment">#添加admin用户，用户名和密码都为admin </span>rabbitmqctl add_user <span class="hljs-literal">admin</span> <span class="hljs-literal">admin</span><span class="hljs-comment">#设置admin的角色为administrator</span>rabbitmqctl set_user_tags <span class="hljs-literal">admin</span> administrator<span class="hljs-comment">#设置admin用户的权限，可访问所有</span>rabbitmqctl set_permissions -p / <span class="hljs-literal">admin</span> “.*” “.*” “.*”修改密码rabbitmqctl  change_password  <span class="hljs-literal">admin</span>  <span class="hljs-string">&#x27;Newpassword&#x27;</span></code></pre><p>将管理员更改为管理员用户的首选用户名。 确保将StrongPassword更改为非常强大的密码。</p><p>要访问RabbitMQ的管理面板，请使用您最喜爱的Web浏览器并打开以下URL。</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>Your_Server_IP:<span class="hljs-number">15672</span>/</code></pre><h5 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h5><p>在使用上述新建的账号访问webUI界面可以看到Config file，在overview下面, 如果没有找到配置文件后面会加上（not found）</p><p><img src="https://i.loli.net/2020/09/22/Q1dIyYVlfcCTBJR.png" alt="image-20200922163249512"></p><p>没有就到该目录下新建一个，并开启远程访问（在结合SpringBoot时，RabbitMQ初始化默认是使用guest账户，因此需要给该账户开启远程访问），配置如下</p><pre><code class="hljs prolog">[                                                                                                           &#123; rabbit , [ &#123; tcp_listeners , [ <span class="hljs-number">5672</span> ] &#125; , &#123; loopback_users , [ <span class="hljs-string">&quot;guest&quot;</span> ] &#125; ] &#125;].</code></pre><p><strong>ps：最后的英文句号不能漏掉</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Rabbit</tag>
      
      <tag>消息队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK脚本安装</title>
    <link href="/2020/08/11/JDK%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <url>/2020/08/11/JDK%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><p><strong>脚本与压缩包同目录</strong></p><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#判断是否安装有openJDK</span>yum list installed |grep -e java -e jdk<span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]then        read -p <span class="hljs-string">&quot;继续执行将卸载已有JDK,y确定，其他退出?&quot;</span> choose        <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$choose</span>==<span class="hljs-string">&quot;y&quot;</span> ]        then                yum -y remove java-* &amp;&gt; <span class="hljs-regexp">/dev/</span>null                yum -y remove tzdata-java* &amp;&gt; <span class="hljs-regexp">/dev/</span>null        <span class="hljs-keyword">else</span>                <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>        fifi<span class="hljs-comment">#判断安装包是否存在</span><span class="hljs-keyword">if</span> [ -f jdk-<span class="hljs-number">8</span>u261-linux-x64.tar.gz ]<span class="hljs-comment">#判断是否已经安装</span>then        java &amp;&gt; <span class="hljs-regexp">/dev/</span>null        <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]        then                echo <span class="hljs-string">&quot;已经安装JDK&quot;</span>                <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>                echo <span class="hljs-string">&quot;开始安装JDK&quot;</span>                tar zxvf jdk-<span class="hljs-number">8</span>u261-linux-x64.tar.gz -C <span class="hljs-regexp">/usr/</span>local                echo <span class="hljs-string">&quot;JDK安装完成，开始配置环境变量&quot;</span>            cat <span class="hljs-regexp">/dev/</span>null &gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&#x27;export JAVA_HOME=/usr/local/jdk1.8.0_261&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&#x27;export PATH=$PATH:$JAVA_HOME/bin&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&quot;环境变量配置完成&quot;</span>        fi<span class="hljs-keyword">else</span>        echo <span class="hljs-string">&quot;请将当前shell脚本和安装包放在同一目录&quot;</span>fichmod +x <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.shsource <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.shecho <span class="hljs-string">&quot;======JDK安装完成，请使用命令：java -version检查是否成功安装,若失败请执行source /etc/profile.d/jdkconf.sh=======&quot;</span></code></pre><h4 id="rpm包"><a href="#rpm包" class="headerlink" title="rpm包"></a>rpm包</h4><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#判断是否安装有openJDK</span>yum list installed |grep -e java -e jdk<span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]then        read -p <span class="hljs-string">&quot;继续执行将卸载已有JDK,y确定，其他退出?&quot;</span> choose        <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$choose</span>==<span class="hljs-string">&quot;y&quot;</span> ]        then                yum -y remove java-* &amp;&gt; <span class="hljs-regexp">/dev/</span>null                yum -y remove tzdata-java* &amp;&gt; <span class="hljs-regexp">/dev/</span>null        <span class="hljs-keyword">else</span>                <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>        fifi<span class="hljs-comment">#判断安装包是否存在</span><span class="hljs-keyword">if</span> [ -f jdk-<span class="hljs-number">8</span>u261-linux-x64.rpm ]<span class="hljs-comment">#判断是否已经安装</span>then        java &amp;&gt; <span class="hljs-regexp">/dev/</span>null        <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]        then                echo <span class="hljs-string">&quot;已经安装JDK&quot;</span>                <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>                echo <span class="hljs-string">&quot;开始安装JDK&quot;</span>                rpm -ivh jdk-<span class="hljs-number">8</span>u261-linux-x64.rpm &amp;&gt;<span class="hljs-regexp">/dev/</span>null                echo <span class="hljs-string">&quot;JDK安装完成，开始配置环境变量&quot;</span>                echo <span class="hljs-string">&#x27;export JAVA_HOME=/usr/java/jdk1.8.0_261-amd64&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&quot;环境变量配置完成&quot;</span>        fi<span class="hljs-keyword">else</span>        echo <span class="hljs-string">&quot;请将当前shell脚本和安装包放在同一目录&quot;</span>fichmod +x <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.shsh <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.shecho <span class="hljs-string">&quot;======JDK安装完成，请使用命令：java -version检查是否成功安装=======&quot;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>JDK</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7搭建FTP</title>
    <link href="/2020/08/10/Centos7%E6%90%AD%E5%BB%BAFTP/"/>
    <url>/2020/08/10/Centos7%E6%90%AD%E5%BB%BAFTP/</url>
    
    <content type="html"><![CDATA[<h4 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h4><p>vsftpd是linux下的一款小巧轻快，安全易用的FTP服务器软件，是一款在各个Linux发行版中最受推崇的FTP服务器软件。</p><p>1.安装vsftpd，直接yum 安装就可以了</p><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y vsftpd</code></pre><p>2.相关配置文件：</p><pre><code class="hljs awk">cd <span class="hljs-regexp">/etc/</span>vsftpd/</code></pre><p>3.启动服务</p><p><code>systemctl enable vsftpd.service</code> //设置开机自启动</p><p><code>systemctl start vsftpd.service</code> //启动ftp服务</p><p><code>netstat -antup | grep ftp</code> //查看ftp服务端口</p><p>3.修改相关配置文件</p><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>vsftpd/vsftpd.conf</code></pre><h4 id="创建ftp本地用户"><a href="#创建ftp本地用户" class="headerlink" title="创建ftp本地用户"></a>创建ftp本地用户</h4><p>1.创建用户并指定目录</p><pre><code class="hljs awk">useradd -d <span class="hljs-regexp">/data/</span>ftp ftpuser  <span class="hljs-comment">#目录自己创建  </span>passwd ftpuser  <span class="hljs-comment">#(回车)给用户ftpuser设置登录密码</span></code></pre><p>2.修改配置文件</p><pre><code class="hljs ini"><span class="hljs-attr">userlist_enable</span>=<span class="hljs-literal">YES</span>     <span class="hljs-comment">#启动用户列表</span><span class="hljs-attr">userlist_deny</span>=<span class="hljs-literal">NO</span>        <span class="hljs-comment">#决定是否对用户列表的用户拒绝访问ftp </span><span class="hljs-attr">userlist_file</span>=/etc/vsftpd/user_list</code></pre><p>3.在user_list中写入 ftp这个用户</p><p>4.配置vsftpd.conf 锁定根目录</p><pre><code class="hljs ini"><span class="hljs-attr">local_root</span>= /var/www        <span class="hljs-comment">#本地用户登录后自动转到的ftp根目录</span><span class="hljs-attr">chroot_local_user</span>=<span class="hljs-literal">YES</span>       <span class="hljs-comment">#将所有用户限定在指定的主目录内</span><span class="hljs-attr">chroot_list_enable</span>=<span class="hljs-literal">NO</span>       <span class="hljs-comment">#不启用列外的用户列表</span><span class="hljs-attr">chroot_list_file</span>=/etc/vsftpd/chroot_list  <span class="hljs-comment">#指定列外的用户列表文件 此文件是让用户登录后可以查看其他目录，若要使用户仅在指定的ftp目录，该文件就不要填写该用户,若没有该文件则新建</span></code></pre><p>5.修改ftp目录的权限,将用户添加到root组</p><pre><code class="hljs properties"><span class="hljs-attr">usermod</span> <span class="hljs-string">-g root ftpuser</span><span class="hljs-attr">chown</span> <span class="hljs-string">ftpuser:root /data/ftp</span><span class="hljs-attr">！！添加到root用户组后需要修改配置文件，加上以下配置：</span><span class="hljs-attr">allow_writeable_chroot</span>=<span class="hljs-string">YES</span></code></pre><h4 id="参考配置（vsftpd-conf）"><a href="#参考配置（vsftpd-conf）" class="headerlink" title="参考配置（vsftpd.conf）"></a>参考配置（vsftpd.conf）</h4><pre><code class="hljs ini"><span class="hljs-attr">anonymous_enable</span>=<span class="hljs-literal">NO</span><span class="hljs-attr">local_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">write_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">local_umask</span>=<span class="hljs-number">000</span><span class="hljs-attr">dirmessage_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">xferlog_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">connect_from_port_20</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">xferlog_std_format</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">chroot_local_user</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">chroot_list_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">chroot_list_file</span>=/etc/vsftpd/chroot_list<span class="hljs-attr">listen</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">listen_ipv6</span>=<span class="hljs-literal">NO</span><span class="hljs-attr">pam_service_name</span>=vsftpd<span class="hljs-attr">tcp_wrappers</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">userlist_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">userlist_deny</span>=<span class="hljs-literal">NO</span><span class="hljs-attr">userlist_file</span>=/etc/vsftpd/user_list<span class="hljs-comment">#目录自己创建，记得对应新建用户时的用户目录</span><span class="hljs-attr">local_root</span>= /data/ftp<span class="hljs-attr">allow_writeable_chroot</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">pasv_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-comment">#被动模式端口范围</span><span class="hljs-attr">pasv_min_port</span>=<span class="hljs-number">30000</span><span class="hljs-attr">pasv_max_port</span>=<span class="hljs-number">30999</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>ftp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装MongoDB</title>
    <link href="/2020/08/10/MongoDB/"/>
    <url>/2020/08/10/MongoDB/</url>
    
    <content type="html"><![CDATA[<h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>　　官方下载地址：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></p><h2 id="2-上传解压"><a href="#2-上传解压" class="headerlink" title="2.上传解压"></a>2.上传解压</h2><h3 id="1-使用工具（FileZilla）上传至服务器"><a href="#1-使用工具（FileZilla）上传至服务器" class="headerlink" title="　　1.使用工具（FileZilla）上传至服务器"></a>　　1.使用工具（FileZilla）上传至服务器</h3><p>　　<img src="https://i.loli.net/2020/08/10/1EluM4Qy2CVPpZ6.png" alt="img"></p><h3 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="　　2.解压安装"></a>　　2.解压安装</h3><pre><code class="hljs angelscript">解压：tar -zxvf mongodb-linux-x86_64<span class="hljs-number">-4.0</span><span class="hljs-number">.6</span>.tgz移动：mv ./mongodb-linux-x86_64<span class="hljs-number">-4.0</span><span class="hljs-number">.6</span> /usr/local/mongodb</code></pre><p>　　<img src="https://i.loli.net/2020/12/18/glJos1c4pRftZeq.png" alt="img"></p><h2 id="3-配置conf与目录"><a href="#3-配置conf与目录" class="headerlink" title="3.配置conf与目录"></a>3.配置conf与目录</h2><h3 id="1-进入mongodb目录"><a href="#1-进入mongodb目录" class="headerlink" title="　　1.进入mongodb目录　　　"></a>　　1.进入mongodb目录　　　</h3><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mongodb/</span></code></pre><p>　　　　<img src="https://i.loli.net/2020/12/18/uta8KDdAFbHUhep.png" alt="img"></p><h3 id="2-创建db目录和日志文件"><a href="#2-创建db目录和日志文件" class="headerlink" title="　　2.创建db目录和日志文件　　"></a>　　2.创建db目录和日志文件　　</h3><pre><code class="hljs awk">mkdir -p .<span class="hljs-regexp">/data/</span>dbmkdir -p ./logstouch .<span class="hljs-regexp">/logs/m</span>ongodb.log</code></pre><p>　　　　<img src="https://i.loli.net/2020/12/18/KJgWeotVpI2Da35.png" alt="img"></p><h3 id="3-创建mongodb-conf文件"><a href="#3-创建mongodb-conf文件" class="headerlink" title="　　3.创建mongodb.conf文件"></a>　　3.创建mongodb.conf文件</h3><p>　　　　<strong>vim mongodb.conf</strong></p><pre><code class="hljs ini"><span class="hljs-comment">#端口号</span><span class="hljs-attr">port</span>=<span class="hljs-number">27017</span><span class="hljs-comment">#db目录</span><span class="hljs-attr">dbpath</span>=/usr/local/mongodb/data/db<span class="hljs-comment">#日志目录</span><span class="hljs-attr">logpath</span>=//usr/local/mongodb/logs/mongodb.log<span class="hljs-comment">#后台</span><span class="hljs-attr">fork</span>=<span class="hljs-literal">true</span><span class="hljs-comment">#日志输出</span><span class="hljs-attr">logappend</span>=<span class="hljs-literal">true</span><span class="hljs-comment">#允许远程IP连接</span><span class="hljs-attr">bind_ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span></code></pre><h2 id="4-启动测试"><a href="#4-启动测试" class="headerlink" title="4.启动测试"></a>4.启动测试</h2><h3 id="1-启动"><a href="#1-启动" class="headerlink" title="　　1.启动　"></a>　　1.启动　</h3><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/m</span>ongod --config mongodb.conf</code></pre><p> 　<img src="https://i.loli.net/2020/12/18/xtuVGrRTWA1BelK.png" alt="img"></p><h3 id="2-连接"><a href="#2-连接" class="headerlink" title="　　2.连接　"></a>　　2.连接　</h3><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/m</span>ongo  --默认端口<span class="hljs-number">27017</span>.<span class="hljs-regexp">/bin/m</span>ongo localhost:<span class="hljs-number">23234</span>  --指定端口，需要与配置的端口号一致</code></pre><p>　　<img src="https://i.loli.net/2020/12/18/F8DEWIfRJ9d7C4i.png" alt="img"></p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="　　3.测试　　"></a>　　3.测试　　<img src="https://i.loli.net/2020/12/18/xIGOgkawAnuHLlQ.png" alt="img"></h3><h2 id="5-配置mongodb服务开机启动"><a href="#5-配置mongodb服务开机启动" class="headerlink" title="5.配置mongodb服务开机启动"></a>5.配置mongodb服务开机启动</h2><h3 id="1-设置mongodb-service开机服务启动"><a href="#1-设置mongodb-service开机服务启动" class="headerlink" title="1.设置mongodb.service开机服务启动"></a>1.设置mongodb.service开机服务启动</h3><pre><code class="hljs routeros">cd /lib/systemd/systemvim mongodb.service添加如下配置--记得路劲和自己的配置路径要一致[Unit]<span class="hljs-attribute">Description</span>=mongodb<span class="hljs-attribute">After</span>=network.target remote-fs.target nss-lookup.target[Service]<span class="hljs-attribute">Type</span>=forking<span class="hljs-attribute">ExecStart</span>=/usr/local/mongodb/mongodb/bin/mongod --config /usr/local/mongodb/mongodb/mongodb.conf<span class="hljs-attribute">ExecReload</span>=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><span class="hljs-attribute">ExecStop</span>=/usr/local/mongodb/mongodb/bin/mongod --shutdown --config /usr/local/mongodb/mongodb/mongodb.conf<span class="hljs-attribute">PrivateTmp</span>=<span class="hljs-literal">true</span>[Install]<span class="hljs-attribute">WantedBy</span>=multi-user.target</code></pre><p>   然后设置mongodb.service权限</p><pre><code class="hljs css"><span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">mongodb</span><span class="hljs-selector-class">.service</span></code></pre><p>​    #启动服务 </p><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mongodb.service  </code></pre><p>   #停止服务</p><pre><code class="hljs arduino">systemctl <span class="hljs-built_in">stop</span> mongodb.service</code></pre><p>   #添加开机自启动</p><pre><code class="hljs routeros">systemctl <span class="hljs-builtin-name">enable</span> mongodb.service</code></pre><p>   #重启服务</p><pre><code class="hljs css"><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">restart</span> <span class="hljs-selector-tag">mongodb</span><span class="hljs-selector-class">.service</span></code></pre><h3 id="2）添加环境变量"><a href="#2）添加环境变量" class="headerlink" title="2）添加环境变量"></a>2）添加环境变量</h3><pre><code class="hljs routeros">1、直接用export命令：   <span class="hljs-builtin-name">export</span>  <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:/usr/local/mongodb/bin2、修改profile文件：   cat &gt;&gt;/etc/profile&lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span>   <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:/usr/local/mongodb/bin&quot;</span>   EOF   刷新profile文件：   source /etc/profile3、 修改.bashrc文件：     cat &gt;&gt;/root/.bashrc&lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span>       <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:/usr/local/mongodb/bin&quot;</span>       EOF</code></pre><p>   上述三步依次执行完毕，环境变量配置完成！！！！</p><p>   重启服务器，输入mongo 回车就有了。。。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>mongo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mongo常用查询</title>
    <link href="/2020/08/10/Mongo%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2/"/>
    <url>/2020/08/10/Mongo%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="查询并显示集合中的数据"><a href="#查询并显示集合中的数据" class="headerlink" title="查询并显示集合中的数据"></a>查询并显示集合中的数据</h4><pre><code class="hljs javascript">db.getCollection(<span class="hljs-string">&#x27;pixiv&#x27;</span>).aggregate([    &#123; <span class="hljs-attr">$group</span>: &#123; <span class="hljs-attr">_id</span> : <span class="hljs-string">&#x27;$author.id&#x27;</span>, <span class="hljs-attr">count</span>: &#123; <span class="hljs-attr">$sum</span> : <span class="hljs-number">1</span> &#125; &#125; &#125;,    &#123; <span class="hljs-attr">$match</span>: &#123; <span class="hljs-attr">count</span>: &#123; <span class="hljs-attr">$gt</span> : <span class="hljs-number">1</span>&#125; &#125; &#125;])</code></pre><h4 id="查询条件为数据中对象某个属性值"><a href="#查询条件为数据中对象某个属性值" class="headerlink" title="查询条件为数据中对象某个属性值"></a>查询条件为数据中对象某个属性值</h4><pre><code class="hljs javascript">db.getCollection(<span class="hljs-string">&#x27;pixiv&#x27;</span>).find(&#123;<span class="hljs-string">&quot;author.id&quot;</span>:<span class="hljs-number">35562628</span>&#125;)</code></pre><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><pre><code class="hljs elixir">db.getCollection(<span class="hljs-string">&#x27;pixiv&#x27;</span>).find(&#123;<span class="hljs-string">&quot;author.name&quot;</span><span class="hljs-symbol">:/Rella/</span>&#125;)</code></pre><h4 id="命令导出数据库"><a href="#命令导出数据库" class="headerlink" title="命令导出数据库"></a>命令导出数据库</h4><pre><code class="hljs jboss-cli"><span class="hljs-string">./mongoexport</span> -h 127.0.0.1 <span class="hljs-params">--port</span> 50003 -d Images -c picjson -o <span class="hljs-string">/home/picjson.js</span> <span class="hljs-params">--type</span> json -f <span class="hljs-string">&quot;_id,tags,pid,p,uid,title,author,url,r18,width,height,_v&quot;</span></code></pre><h4 id="命令导入数据库"><a href="#命令导入数据库" class="headerlink" title="命令导入数据库"></a>命令导入数据库</h4><pre><code class="hljs jboss-cli"><span class="hljs-string">./mongoimport</span> -h 127.0.0.1 <span class="hljs-params">--port</span> 50003 -d Pixiv -c picjson <span class="hljs-params">--file</span> <span class="hljs-string">/home/picjson.js</span> <span class="hljs-params">--type</span> json</code></pre><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><pre><code class="hljs plain"></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Navicat12激活</title>
    <link href="/2020/08/10/Navicat12%E6%BF%80%E6%B4%BB/"/>
    <url>/2020/08/10/Navicat12%E6%BF%80%E6%B4%BB/</url>
    
    <content type="html"><![CDATA[<p>本教程更新时间：2019-4-19 16:37:38</p><p><a href="https://www.52pojie.cn/thread-934566-1-1.html">https://www.52pojie.cn/thread-934566-1-1.html</a></p><p>本文所需软件<br>1、navicat_premium原版安装包<br>官网下载地址：<a href="https://www.navicat.com.cn/download/navicat-premium">https://www.navicat.com.cn/download/navicat-premium</a><br>2、注册工具<br>github地址：<a href="https://github.com/DoubleLabyrinth/navicat-keygen">https://github.com/DoubleLabyrinth/navicat-keygen</a><br>以上本文所需文件已整理到网盘，自取：<br>链接：<a href="https://pan.baidu.com/s/1MDuDFBsS0EI-rz4WkQ7kJw">https://pan.baidu.com/s/1MDuDFBsS0EI-rz4WkQ7kJw</a><br>提取码：gdn5<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>~<del>~ 分割线</del></p><p>好了，教程开始<br><strong>1、安装原版navicat</strong><br>正常安装，一直下一步，直到安装成功，这个我就不截图了。<br>默认安装路径是：C:\Program Files\PremiumSoft\Navicat Premium 12<br><strong>2、开始激活</strong><br><strong>2.1、首先需要先替换掉Navicat激活公钥</strong><br>a、解压navicat-keygen-for-x64.zip文件，开始执行cmd命令<br>b、打开命令提示符（管理员），win+x<br>(因为我是安装在了C盘，文件写入需要管理员权限，如果安装在别的盘，普通的命令提示符就行，或者在解压文件夹按住shift点右键，也能选择命令提示符打开)</p><p><img src="https://attach.52pojie.cn/forum/201904/19/160557tm0i0zk08q0a9f99.png" alt="img"></p><p>c、进入到navicat-keygen-for-x64.zip文件的解压目录，执行如下命令</p><pre><code class="hljs latex">cd [解压目录].<span class="hljs-tag">\<span class="hljs-name">navicat</span></span>-patcher.exe &quot;C:<span class="hljs-tag">\<span class="hljs-name">Program</span></span> Files<span class="hljs-tag">\<span class="hljs-name">PremiumSoft</span></span><span class="hljs-tag">\<span class="hljs-name">Navicat</span></span> Premium 12&quot;</code></pre><p><img src="https://attach.52pojie.cn/forum/201904/19/161149zmt1zxgarvrqatj2.png" alt="img"></p><p>d、回车继续，一顿飘屏猛如虎，好的，出现这样的提示表示替换成功。成功之后会在当前文件夹下生成RegPrivateKey.pem文件</p><p><img src="https://attach.52pojie.cn/forum/201904/19/161405f9gdzno4z3d4ob5d.png" alt="img"></p><p><strong>2.2、接下来我们就要开始生成序列号和激活码</strong><br>a、和替换公钥类似，执行如下命令</p><pre><code class="hljs css">.\<span class="hljs-selector-tag">navicat-keygen</span><span class="hljs-selector-class">.exe</span> <span class="hljs-selector-tag">-text</span> .\<span class="hljs-selector-tag">RegPrivateKey</span><span class="hljs-selector-class">.pem</span></code></pre><p>b、接下来你会被要求选择Navicat产品类别、语言以及输入主版本号。之后会随机生成一个序列号。</p><p><img src="https://attach.52pojie.cn/forum/201904/19/162347wpp8fo7pktogsavt.png" alt="img"></p><p>c、得到序列号，复制下来，注意：<strong>窗口不要关闭</strong></p><p>d、此时打开安装的原版Navicat，第一次打开会出现如下提示，点击注册按钮，进入注册页面</p><p><img src="https://attach.52pojie.cn/forum/201904/19/155913jd4w4coog0sx25n5.png" alt="img"></p><p><img src="https://attach.52pojie.cn/forum/201904/19/162730x44dr8xzfg77zwbj.png" alt="img"></p><p>e、接下来输入用户名，组织名和请求码，然后回车两次，获得激活码</p><p><img src="https://attach.52pojie.cn/forum/201904/19/163431if96i5uu2610fs0s.png" alt="img"></p><p>f、把获得到的激活码粘贴到navcat中，点击激活，激活成功。</p><p><img src="https://attach.52pojie.cn/forum/201904/19/163431yrza4l445rprd888.png" alt="img"></p><p><strong>附上激活成功的截图。</strong></p><p><img src="https://attach.52pojie.cn/forum/201904/19/163432k6rbb5wdbb116pp2.png" alt="img"></p><p><img src="https://attach.52pojie.cn/forum/201904/19/164734oam0stsajsuotaja.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Navicat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQ5.7脚本安装</title>
    <link href="/2020/08/10/Mysql5.7%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <url>/2020/08/10/Mysql5.7%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#压缩包目录</span>data=<span class="hljs-string">&quot;home/mysql&quot;</span>echo <span class="hljs-string">&quot;将mysql压缩包解压&quot;</span>tar xvf mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>-linux-glibc2.<span class="hljs-number">12</span>-x86_64.tar.gz echo <span class="hljs-string">&quot;新建mysql文件夹&quot;</span><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/&quot;</span><span class="hljs-variable">$&#123;data&#125;</span><span class="hljs-string">&quot;/mysql-5.7.30-linux-glibc2.12-x86_64&quot;</span> ]; then        echo <span class="hljs-string">&quot;mysql解压未完成&quot;</span>        <span class="hljs-keyword">exit</span>fiecho <span class="hljs-string">&quot;mysql解压完成修改文件夹&quot;</span>mv mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>-linux-glibc2.<span class="hljs-number">12</span>-x86_64 mysqlmv mysql <span class="hljs-regexp">/usr/</span>localecho <span class="hljs-string">&quot;mysql解压完成&quot;</span>echo <span class="hljs-string">&quot;切换目录&quot;</span>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>echo <span class="hljs-string">&quot;新建数据库data目录&quot;</span>mkdir dataecho <span class="hljs-string">&quot;初始化mysql&quot;</span>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<span class="hljs-regexp">/mysqld --initialize --user=root --basedir=/u</span>sr<span class="hljs-regexp">/local/my</span>sql --datadir=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>dataecho <span class="hljs-string">&quot;修改配置文件&quot;</span>cat <span class="hljs-regexp">/dev/</span>null &gt; <span class="hljs-regexp">/etc/my</span>.cnf<span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;/etc/my.cnf&quot;</span> ]; then        mv <span class="hljs-regexp">/etc/my</span>.cnf <span class="hljs-regexp">/etc/my</span>.cnf.bakfi<span class="hljs-comment">#跳过密码验证</span>echo <span class="hljs-string">&#x27;[mysqld]&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;bind-address=0.0.0.0&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;basedir = /usr/local/mysql&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;datadir = /usr/local/mysql/data&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;socket=/tmp/mysql.sock&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;user=root&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;port=3306&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;character-set-server=utf8&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnf<span class="hljs-comment">#echo &#x27;skip-grant-tables&#x27; &gt;&gt; /etc/my.cnf</span>echo <span class="hljs-string">&#x27;# Disabling symbolic-links is recommended to prevent assorted security risks&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;symbolic-links=0&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;# skip-grant-tables&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;[mysqld_safe]&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;log-error=/var/log/mysqld.log&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;pid-file=/var/run/mysqld/mysqld.pid&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;!includedir /etc/my.cnf.d&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;[client]&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;user=root&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;password=123456&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;port=3306&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&quot;配置修改完成，将mysql加入服务&quot;</span>cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>support-files<span class="hljs-regexp">/mysql.server /</span>etc<span class="hljs-regexp">/init.d/my</span>sqld<span class="hljs-comment">#chmod +x /etc/init.d/mysqld</span>echo <span class="hljs-string">&quot;添加mysql指令&quot;</span>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<span class="hljs-regexp">/mysql  /u</span>sr<span class="hljs-regexp">/local/</span>binln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<span class="hljs-regexp">/mysqladmin  /u</span>sr<span class="hljs-regexp">/local/</span>bin<span class="hljs-comment">#echo &quot;服务启动&quot;</span>sudo service mysqld startsudo systemctl restart mysqldsystemctl status mysqld<span class="hljs-comment">#开启端口</span>firewall-cmd --zone=public --add-port=<span class="hljs-number">3306</span>/tcp --permanentsystemctl restart firewalld.service<span class="hljs-comment">#修改root初始化密码</span>mysql -uroot -p &lt; <span class="hljs-regexp">/home/mi</span>rror<span class="hljs-regexp">/mysql/i</span>nit.sql<span class="hljs-comment">#关闭跳过密码验证</span>cat <span class="hljs-regexp">/dev/</span>null &gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;[mysqld]&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;bind-address=0.0.0.0&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;basedir=/usr/local/mysql&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;datadir=/usr/local/mysql/data&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;socket=/tmp/mysql.sock&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;user=root&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;port=3306&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;character-set-server=utf8&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;#skip-grant-tables&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;# Disabling symbolic-links is recommended to prevent assorted security risks&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;symbolic-links=0&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;[mysqld_safe]&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;log-error=/var/log/mysqld.log&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;pid-file=/var/run/mysqld/mysqld.pid&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;!includedir /etc/my.cnf.d&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfsudo systemctl restart mysqldsudo systemctl status mysqld</code></pre><h4 id="1、-修改用户密码（init-sql）"><a href="#1、-修改用户密码（init-sql）" class="headerlink" title="1、 修改用户密码（init.sql）"></a>1、 修改用户密码（init.sql）</h4><pre><code class="hljs sql"><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<span class="hljs-comment">#修改root密码为root</span><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;root&#x27;</span>;  <span class="hljs-comment">#刷新权限</span><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;</code></pre><h4 id="2、远程登录"><a href="#2、远程登录" class="headerlink" title="2、远程登录"></a>2、远程登录</h4><pre><code class="hljs routeros">use mysql;update<span class="hljs-built_in"> user </span><span class="hljs-builtin-name">set</span> host = <span class="hljs-string">&#x27;%&#x27;</span> where<span class="hljs-built_in"> user </span>= <span class="hljs-string">&#x27;root&#x27;</span>;<span class="hljs-comment">#刷新权限</span>flush privileges;</code></pre><h4 id="3、添加用户"><a href="#3、添加用户" class="headerlink" title="3、添加用户"></a>3、添加用户</h4><pre><code class="hljs sql"><span class="hljs-comment">#添加用户“xiao&quot;，密码为: aquatic@zkcm</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;cpbdb&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;cpbdb@zkcm&#x27;</span>;<span class="hljs-comment">#赋权所有权限，并且可以查看所有表</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;cpbdb&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<span class="hljs-comment">#赋权test数据库所有权限，只可以使用数据库test</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> cpbdb.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;cpbdb&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<span class="hljs-comment">#刷新权限</span><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<span class="hljs-comment">#收回权限</span><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cpbdb&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<span class="hljs-comment">#主从</span><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">REPLICATION</span> <span class="hljs-keyword">SLAVE</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<span class="hljs-keyword">CHANGE</span> <span class="hljs-keyword">MASTER</span> <span class="hljs-keyword">TO</span>MASTER_HOST=<span class="hljs-string">&#x27;192.168.186.150&#x27;</span>,MASTER_USER=<span class="hljs-string">&#x27;slave&#x27;</span>,MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,MASTER_LOG_FILE=<span class="hljs-string">&#x27;mysql-bin.000008&#x27;</span>,MASTER_LOG_POS=<span class="hljs-number">154</span>;</code></pre><h4 id="4、查找并删除mysql有关的文件"><a href="#4、查找并删除mysql有关的文件" class="headerlink" title="4、查找并删除mysql有关的文件"></a>4、查找并删除mysql有关的文件</h4><pre><code class="hljs swift"><span class="hljs-built_in">find</span> / -name mysqlrm -rf 上边查找到的路径，多个路径用空格隔开#或者下边一条命令即可<span class="hljs-built_in">find</span> / -name mysql|xargs rm -rf</code></pre><h4 id="5、建库"><a href="#5、建库" class="headerlink" title="5、建库"></a>5、建库</h4><pre><code class="hljs routeros">CREATE DATABASE `fx`<span class="hljs-built_in"> DEFAULT </span>CHARACTER <span class="hljs-builtin-name">SET</span> utf8mb4 COLLATE utf8mb4_general_ci;CREATE DATABASE `cpbdb-backup`<span class="hljs-built_in"> DEFAULT </span>CHARACTER <span class="hljs-builtin-name">SET</span> utf8mb4 COLLATE utf8mb4_general_ci;CREATE DATABASE `cpbdb-dev`<span class="hljs-built_in"> DEFAULT </span>CHARACTER <span class="hljs-builtin-name">SET</span> utf8mb4 COLLATE utf8mb4_general_ci;CREATE DATABASE `cpbdb-dev-test`<span class="hljs-built_in"> DEFAULT </span>CHARACTER <span class="hljs-builtin-name">SET</span> utf8mb4 COLLATE utf8mb4_general_ci;CREATE DATABASE `cpbdb`<span class="hljs-built_in"> DEFAULT </span>CHARACTER <span class="hljs-builtin-name">SET</span> utf8mb4 COLLATE utf8mb4_general_ci;</code></pre><h4 id="6、导出"><a href="#6、导出" class="headerlink" title="6、导出"></a>6、导出</h4><pre><code class="hljs arcade">-- 只导出数据./mysqldump -t cpbdb -uroot -proot &gt; <span class="hljs-regexp">/home/</span>cpbdb.sql-- 只导出表结构./mysqldump -d cpbdb -uroot -proot &gt; <span class="hljs-regexp">/home/</span>cpbdb.sql-- 导出整个数据库./mysqldump -uroot -proot cpbdb &gt; <span class="hljs-regexp">/home/</span>cpbdb.sql</code></pre><h4 id="7、查询表结构"><a href="#7、查询表结构" class="headerlink" title="7、查询表结构"></a>7、查询表结构</h4><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span>  TABLE_NAME 表名,  COLUMN_NAME 列名,  COLUMN_TYPE 数据类型,    COLUMN_DEFAULT 默认值,  IS_NULLABLE 强制,      COLUMN_COMMENT 注释 <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS<span class="hljs-keyword">where</span><span class="hljs-comment">-- db2为数据库名称，到时候只需要修改成你要导出表结构的数据库即可</span>table_schema =<span class="hljs-string">&#x27;db2&#x27;</span><span class="hljs-keyword">and</span> table_name = <span class="hljs-string">&#x27;t_author_area&#x27;</span></code></pre><p><img src="https://i.loli.net/2021/03/30/qHUOgFj9o3WCpnR.png" alt="image-20210330163131838"></p><table><thead><tr><th align="left">列名</th><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>TABLE_CATALOG</strong></td><td align="left"><strong>nvarchar(128)</strong></td><td align="left">表限定符。</td></tr><tr><td align="left"><strong>TABLE_SCHEMA</strong></td><td align="left"><strong>nvarchar(128)</strong></td><td align="left">表所有者。</td></tr><tr><td align="left"><strong>TABLE_NAME</strong></td><td align="left"><strong>nvarchar(128)</strong></td><td align="left">表名。</td></tr><tr><td align="left"><strong>COLUMN_NAME</strong></td><td align="left"><strong>nvarchar(128)</strong></td><td align="left">列名。</td></tr><tr><td align="left"><strong>ORDINAL_POSITION</strong></td><td align="left"><strong>smallint</strong></td><td align="left">列标识号。</td></tr><tr><td align="left"><strong>COLUMN_DEFAULT</strong></td><td align="left"><strong>nvarchar(4000)</strong></td><td align="left">列的默认值。</td></tr><tr><td align="left"><strong>IS_NULLABLE</strong></td><td align="left"><strong>varchar(3)</strong></td><td align="left">列的为空性。如果列允许 NULL，那么该列返回 YES。否则，返回 NO。</td></tr><tr><td align="left"><strong>DATA_TYPE</strong></td><td align="left"><strong>nvarchar(128)</strong></td><td align="left">系统提供的数据类型。</td></tr><tr><td align="left"><strong>CHARACTER_MAXIMUM_LENGTH</strong></td><td align="left"><strong>smallint</strong></td><td align="left">以字符为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 NULL。有关更多信息，请参见数据类型。</td></tr><tr><td align="left"><strong>CHARACTER_OCTET_LENGTH</strong></td><td align="left"><strong>smallint</strong></td><td align="left">以字节为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 NULL。</td></tr><tr><td align="left"><strong>NUMERIC_PRECISION</strong></td><td align="left"><strong>tinyint</strong></td><td align="left">近似数字数据、精确数字数据、整型数据或货币数据的精度。否则，返回 NULL。</td></tr><tr><td align="left"><strong>NUMERIC_PRECISION_RADIX</strong></td><td align="left"><strong>smallint</strong></td><td align="left">近似数字数据、精确数字数据、整型数据或货币数据的精度基数。否则，返回 NULL。</td></tr><tr><td align="left"><strong>NUMERIC_SCALE</strong></td><td align="left"><strong>tinyint</strong></td><td align="left">近似数字数据、精确数字数据、整数数据或货币数据的小数位数。否则，返回 NULL。</td></tr><tr><td align="left"><strong>DATETIME_PRECISION</strong></td><td align="left"><strong>smallint</strong></td><td align="left"><strong>datetime</strong> 及 SQL-92 <strong>interval</strong> 数据类型的子类型代码。对于其它数据类型，返回 NULL。</td></tr><tr><td align="left"><strong>CHARACTER_SET_CATALOG</strong></td><td align="left"><strong>varchar(6)</strong></td><td align="left">如果列是字符数据或 <strong>text</strong> 数据类型，那么返回 <strong>master</strong>，指明字符集所在的数据库。否则，返回 NULL。</td></tr><tr><td align="left"><strong>CHARACTER_SET_SCHEMA</strong></td><td align="left"><strong>varchar(3)</strong></td><td align="left">如果列是字符数据或 <strong>text</strong> 数据类型，那么返回 <strong>DBO</strong>，指明字符集的所有者名称。否则，返回 NULL。</td></tr><tr><td align="left"><strong>CHARACTER_SET_NAME</strong></td><td align="left"><strong>nvarchar(128)</strong></td><td align="left">如果该列是字符数据或 <strong>text</strong> 数据类型，那么为字符集返回唯一的名称。否则，返回 NULL。</td></tr><tr><td align="left"><strong>COLLATION_CATALOG</strong></td><td align="left"><strong>varchar(6)</strong></td><td align="left">如果列是字符数据或 <strong>text</strong> 数据类型，那么返回 <strong>master</strong>，指明在其中定义排序次序的数据库。否则此列为 NULL。</td></tr><tr><td align="left"><strong>COLLATION_SCHEMA</strong></td><td align="left"><strong>varchar(3)</strong></td><td align="left">返回 <strong>DBO</strong>，为字符数据或 <strong>text</strong> 数据类型指明排序次序的所有者。否则，返回 NULL。</td></tr><tr><td align="left"><strong>COLLATION_NAME</strong></td><td align="left"><strong>nvarchar(128)</strong></td><td align="left">如果列是字符数据或 <strong>text</strong> 数据类型，那么为排序次序返回唯一的名称。否则，返回 NULL。</td></tr><tr><td align="left"><strong>DOMAIN_CATALOG</strong></td><td align="left"><strong>nvarchar(128)</strong></td><td align="left">如果列是一种用户定义数据类型，那么该列是某个数据库名称，在该数据库名中创建了这种用户定义数据类型。否则，返回 NULL。</td></tr><tr><td align="left"><strong>DOMAIN_SCHEMA</strong></td><td align="left"><strong>nvarchar(128)</strong></td><td align="left">如果列是一种用户定义数据类型，那么该列是这种用户定义数据类型的创建者。否则，返回 NULL。</td></tr><tr><td align="left"><strong>DOMAIN_NAME</strong></td><td align="left"><strong>nvarchar(128)</strong></td><td align="left">如果列是一种用户定义数据类型，那么该列是这种用户定义数据类型的名称。否则，返回 NULL。</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware Workstation 15 Pro 密钥</title>
    <link href="/2020/08/10/VMware%20Workstation%2015%20Pro%20%E5%AF%86%E9%92%A5/"/>
    <url>/2020/08/10/VMware%20Workstation%2015%20Pro%20%E5%AF%86%E9%92%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="VMware-Workstation-15-Pro-密钥"><a href="#VMware-Workstation-15-Pro-密钥" class="headerlink" title="VMware Workstation 15 Pro 密钥"></a>VMware Workstation 15 Pro 密钥</h1><pre><code class="hljs apache"><span class="hljs-attribute">UG5J2</span>-<span class="hljs-number">0</span>ME<span class="hljs-number">12</span>-M<span class="hljs-number">89</span>WY-NPWXX-WQH<span class="hljs-number">88</span><span class="hljs-attribute">GA590</span>-<span class="hljs-number">86</span>Y<span class="hljs-number">05</span>-<span class="hljs-number">4806</span>Y-X<span class="hljs-number">4</span>PEE-ZV<span class="hljs-number">8</span>E<span class="hljs-number">0</span><span class="hljs-attribute">YA18K</span>-<span class="hljs-number">0</span>WY<span class="hljs-number">8</span>P-H<span class="hljs-number">85</span>DY-L<span class="hljs-number">4</span>NZG-X<span class="hljs-number">7</span>RAD<span class="hljs-attribute">UA5DR</span>-<span class="hljs-number">2</span>ZD<span class="hljs-number">4</span>H-<span class="hljs-number">089</span>FY-<span class="hljs-number">6</span>YQ<span class="hljs-number">5</span>T-YPRX<span class="hljs-number">6</span><span class="hljs-attribute">B806Y</span>-<span class="hljs-number">86</span>Y<span class="hljs-number">05</span>-GA<span class="hljs-number">590</span>-X<span class="hljs-number">4</span>PEE-ZV<span class="hljs-number">8</span>E<span class="hljs-number">0</span><span class="hljs-attribute">ZF582</span>-<span class="hljs-number">0</span>NW<span class="hljs-number">5</span>N-H<span class="hljs-number">8</span>D<span class="hljs-number">2</span>P-<span class="hljs-number">0</span>XZEE-Z<span class="hljs-number">22</span>VA</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>VMware Workstation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue代理</title>
    <link href="/2020/08/10/Vue%E7%9B%B8%E5%85%B3/"/>
    <url>/2020/08/10/Vue%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h4 id="资源路径代理（图片等）"><a href="#资源路径代理（图片等）" class="headerlink" title="资源路径代理（图片等）"></a>资源路径代理（图片等）</h4><h5 id="修改index-js"><a href="#修改index-js" class="headerlink" title="修改index.js"></a>修改index.js</h5><pre><code class="hljs dts"><span class="hljs-symbol">proxyTable:</span> &#123;    <span class="hljs-string">&quot;/resources&quot;</span>: &#123;<span class="hljs-symbol">        target:</span> <span class="hljs-string">&quot;http://localhost:9100/&quot;</span>, <span class="hljs-comment">//这里填写后端存放资源文件的域名</span><span class="hljs-symbol">        ws:</span> true,<span class="hljs-symbol">        changeOrigin:</span> true, 是否跨域        <span class="hljs-comment">// 如果接口中是没有api的，那就直接置空（如上）。如果接口中有api，就需要写成&#123;‘^/api’:‘/api’&#125;</span><span class="hljs-symbol">        pathRewrite:</span> &#123;        <span class="hljs-string">&quot;/api&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>    &#125;&#125;,</code></pre><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">febs-gateway:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">febs-gateway:latest</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">febs-gateway</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">febs-register</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/home/docker/febs/logs:/log&quot;</span>    <span class="hljs-attr">command:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--nacos.url=192.168.186.140&quot;</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">8301</span><span class="hljs-string">:8301</span>  <span class="hljs-attr">febs-auth:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">febs-auth:latest</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">febs-auth</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">febs-register</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/home/docker/febs/logs:/log&quot;</span>    <span class="hljs-attr">command:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--nacos.url=192.168.186.140&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--mysql.username=root&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--mysql.password=zkcmroot&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--mysql.url=192.168.30.100&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--redis.url=192.168.30.100&quot;</span>  <span class="hljs-attr">febs-server-system:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">febs-server-system:latest</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">febs-server-system</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">febs-register</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/home/docker/febs/logs:/log&quot;</span>    <span class="hljs-attr">command:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--nacos.url=192.168.186.140&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--rabbitmq.url=192.168.186.140&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--rabbitmq.username=admin&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--rabbitmq.password=admin&quot;</span>  <span class="hljs-attr">febs-server-test:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">febs-server-test:latest</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">febs-server-test</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">febs-register</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/home/docker/febs/logs:/log&quot;</span>    <span class="hljs-attr">command:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--nacos.url=192.168.186.140&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--rabbitmq.url=192.168.186.140&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--rabbitmq.username=admin&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--rabbitmq.password=admin&quot;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMWare Centos7 NAT模式</title>
    <link href="/2020/08/10/%E8%99%9A%E6%8B%9F%E6%9C%BANAT%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/08/10/%E8%99%9A%E6%8B%9F%E6%9C%BANAT%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1、VMware设置"><a href="#1、VMware设置" class="headerlink" title="1、VMware设置"></a>1、VMware设置</h2><p>点击 编辑 -&gt; 虚拟网络编辑器 -&gt; 更改设置 </p><p><img src="D:\Photos\1.jpg" alt="img"></p><p>选择 NAT模式，具体勾选如下：</p><p><img src="D:\Photos\2.jpg" alt="img"></p><p>打开 NAT设置，记录子网掩码，网关ip</p><p><img src="D:\Photos\3.jpg" alt="img"></p><p>记录网段信息</p><p><img src="D:\Photos\ccd0b119b11e4b9bb02d3202286a76ab.jpg" alt="img"></p><h2 id="2、登录虚拟机"><a href="#2、登录虚拟机" class="headerlink" title="2、登录虚拟机"></a>2、登录虚拟机</h2><p>root用户登录虚拟机，输入以命令，编辑保存</p><pre><code class="hljs lsl">vi /etc/sysconfig/network-scripts/ifcfg-ens33BOOTPROTO=<span class="hljs-string">&quot;static&quot;</span>ONBOOT=yesIPADDR=<span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.130</span>METMASK=<span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span>GATEWAY=<span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.2</span>DNS=<span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span>vi /etc/resolv.conf 编辑DNS，填入网关的IPnameserver <span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.2</span></code></pre><p>输入一下命令，重启network</p><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart network</span></code></pre><h2 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h2><p>  输入以下命令，查看结果</p><pre><code class="hljs css"><span class="hljs-selector-tag">ping</span> <span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node</title>
    <link href="/2020/08/10/Node/"/>
    <url>/2020/08/10/Node/</url>
    
    <content type="html"><![CDATA[<h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><pre><code class="hljs arduino">持久使用npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span>配置后可通过下面方式来验证是否成功npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">get</span> registry</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SELinux</title>
    <link href="/2020/08/10/SELinux/"/>
    <url>/2020/08/10/SELinux/</url>
    
    <content type="html"><![CDATA[<h4 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h4><pre><code class="hljs routeros">查看SELinux状态：1、/usr/sbin/sestatus -v      ##如果SELinux status参数为enabled即为开启状态SELinux status:                 enabled2、getenforce                 ##也可以用这个命令检查关闭SELinux：1、临时关闭（不用重启机器）：setenforce 0 ##设置SELinux 成为permissive模式 √setenforce 1 ##设置SELinux 成为enforcing模式2、修改配置文件需要重启机器：修改/etc/selinux<span class="hljs-built_in">/config </span>文件将<span class="hljs-attribute">SELINUX</span>=enforcing改为SELINUX=disabled重启机器即可</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Consul</title>
    <link href="/2020/08/10/Consul/"/>
    <url>/2020/08/10/Consul/</url>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>1.下载</p><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://releases.hashicorp.com/consul/<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>/consul_<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>_linux_amd<span class="hljs-number">64</span>.zip <span class="hljs-attribute">curl</span> https://releases.hashicorp.com/consul/<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>/consul_<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>_linux_amd<span class="hljs-number">64</span>.zip &gt; consul.zip</code></pre><p><strong>ps:下载过慢请试着直接浏览器下载，再用FTP工具上传至服务器</strong></p><p>2.解压</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>安装unzip    yum -y install zip unzip<span class="hljs-number">2.</span>解压    unzip consul.zip</code></pre><h4 id="ui界面启动"><a href="#ui界面启动" class="headerlink" title="ui界面启动"></a>ui界面启动</h4><pre><code class="hljs angelscript">./consul agent -dev  -client <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> -ui访问 IP:<span class="hljs-number">8500</span>记得开端口，或者把防火墙关闭</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>httpd</title>
    <link href="/2020/08/10/httpd/"/>
    <url>/2020/08/10/httpd/</url>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> -y install httpd.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span></code></pre><h4 id="配置文件-位置：-etc-httpd-conf-httpd-conf"><a href="#配置文件-位置：-etc-httpd-conf-httpd-conf" class="headerlink" title="配置文件(位置：/etc/httpd/conf/httpd.conf)"></a>配置文件(位置：/etc/httpd/conf/httpd.conf)</h4><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">Listen</span></span> <span class="hljs-number">80</span><span class="hljs-attribute"><span class="hljs-nomarkup">Listen</span></span> <span class="hljs-number">192.168.31.30:8080</span><span class="hljs-section">&lt;virtualhost <span class="hljs-number">192.168.31.30:8080</span>&gt;</span>        <span class="hljs-attribute"><span class="hljs-nomarkup">Documentroot</span></span> /home/diskdata/ftp/minioData        <span class="hljs-section">&lt;Directory <span class="hljs-string">&quot;/home/diskdata/ftp/minioData&quot;</span>&gt;</span>            <span class="hljs-attribute"><span class="hljs-nomarkup">Options</span></span> FollowSymLinks            <span class="hljs-attribute">AllowOverride</span> none            <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted        <span class="hljs-section">&lt;/Directory&gt;</span><span class="hljs-section">&lt;/virtualhost&gt;</span></code></pre><h4 id="第一、启动、终止、重启"><a href="#第一、启动、终止、重启" class="headerlink" title="第一、启动、终止、重启"></a>第一、启动、终止、重启</h4><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> httpd.service <span class="hljs-comment">#启动</span>systemctl <span class="hljs-literal">stop</span> httpd.service <span class="hljs-comment">#停止</span>systemctl restart httpd.service <span class="hljs-comment">#重启</span></code></pre><h4 id="第二、设置开机启动-关闭"><a href="#第二、设置开机启动-关闭" class="headerlink" title="第二、设置开机启动/关闭"></a>第二、设置开机启动/关闭</h4><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> httpd.service <span class="hljs-comment">#开机启动</span>systemctl <span class="hljs-built_in">disable</span> httpd.service <span class="hljs-comment">#开机不启动</span></code></pre><h4 id="第三、检查httpd状态"><a href="#第三、检查httpd状态" class="headerlink" title="第三、检查httpd状态"></a>第三、检查httpd状态</h4><pre><code class="hljs css"><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">status</span> <span class="hljs-selector-tag">httpd</span><span class="hljs-selector-class">.service</span></code></pre><h4 id="解决启动Apache遇到的问题Permission-denied-AH00072-make-sock-could-not-bind-to-address-0-0-0-0-8888"><a href="#解决启动Apache遇到的问题Permission-denied-AH00072-make-sock-could-not-bind-to-address-0-0-0-0-8888" class="headerlink" title="解决启动Apache遇到的问题Permission denied: AH00072: make_sock: could not bind to address 0.0.0.0:8888"></a>解决启动Apache遇到的问题Permission denied: AH00072: make_sock: could not bind to address 0.0.0.0:8888</h4><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.可能原因：SELinux限制了Apache的端口设置</span><span class="hljs-number">2</span><span class="hljs-string">.关闭SELinux</span><span class="hljs-string">setenforce</span> <span class="hljs-number">0</span> <span class="hljs-comment">##设置SELinux 成为permissive模式 √</span><span class="hljs-number">3</span><span class="hljs-string">.</span><span class="hljs-string">//安装semanage</span><span class="hljs-string">yum</span> <span class="hljs-string">provides</span> <span class="hljs-string">/usr/sbin/semanage</span><span class="hljs-string">yum</span> <span class="hljs-string">-y</span> <span class="hljs-string">install</span> <span class="hljs-string">policycoreutils-python</span><span class="hljs-string">//查看默认允许的端口</span><span class="hljs-string">semanage</span> <span class="hljs-string">port</span> <span class="hljs-string">-l</span> <span class="hljs-string">|</span> <span class="hljs-string">grep</span> <span class="hljs-string">-w</span> <span class="hljs-string">http_port_t</span><span class="hljs-string">//</span> <span class="hljs-string">http_port_t</span>  <span class="hljs-string">tcp</span> <span class="hljs-number">80</span><span class="hljs-string">,</span> <span class="hljs-number">81</span><span class="hljs-string">,</span> <span class="hljs-number">443</span><span class="hljs-string">,</span> <span class="hljs-number">488</span><span class="hljs-string">,</span> <span class="hljs-number">8008</span><span class="hljs-string">,</span> <span class="hljs-number">8009</span><span class="hljs-string">,</span> <span class="hljs-number">8443</span><span class="hljs-string">,</span> <span class="hljs-number">9000</span><span class="hljs-string">//使用semanage添加apache侦听的端口</span><span class="hljs-string">semanage</span> <span class="hljs-string">port</span> <span class="hljs-string">-a</span> <span class="hljs-string">-t</span> <span class="hljs-string">http_port_t</span> <span class="hljs-string">-p</span> <span class="hljs-string">tcp</span> <span class="hljs-number">8888</span><span class="hljs-string">//启动apache</span><span class="hljs-string">systemctl</span> <span class="hljs-string">start</span> <span class="hljs-string">httpd</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>httpd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 7中添加一个新用户并授权</title>
    <link href="/2020/08/10/Centos7%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/"/>
    <url>/2020/08/10/Centos7%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS-7中添加一个新用户并授权"><a href="#CentOS-7中添加一个新用户并授权" class="headerlink" title="CentOS 7中添加一个新用户并授权"></a>CentOS 7中添加一个新用户并授权</h1><h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h2><p>创建一个用户名为：linuxidc</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># adduser linuxidc</span></code></pre><p>为这个用户初始化密码，linux会判断密码复杂度，不过可以强行忽略：</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># passwd linuxidc</span>更改用户 zhangbiao 的密码 。新的 密码：无效的密码： 密码未通过字典检查 - 过于简单化/系统化重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。</code></pre><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>个人用户的权限只可以在本home下有完整权限，其他目录要看别人授权。而经常需要root用户的权限，这时候sudo可以化身为root来操作。我记得我曾经sudo创建了文件，然后发现自己并没有读写权限，因为查看权限是root创建的。</p><p>新创建的用户并不能使用sudo命令，需要给他添加授权。</p><p>sudo命令的授权管理是在sudoers文件里的。可以看看sudoers：</p><pre><code class="hljs awk">[root@localhost ~]<span class="hljs-comment"># sudoers</span>bash: sudoers: 未找到命令...[root@localhost ~]<span class="hljs-comment"># whereis sudoers</span>sudoers: <span class="hljs-regexp">/etc/</span>sudoers <span class="hljs-regexp">/etc/</span>sudoers.d <span class="hljs-regexp">/usr/</span>libexec<span class="hljs-regexp">/sudoers.so /u</span>sr<span class="hljs-regexp">/share/m</span>an<span class="hljs-regexp">/man5/</span>sudoers.<span class="hljs-number">5</span>.gz</code></pre><p>找到这个文件位置之后再查看权限：</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# ls -l /etc/sudoers-r--r----- <span class="hljs-number">1</span> root root <span class="hljs-number">4251</span> <span class="hljs-number">9</span>月  <span class="hljs-number">25</span> <span class="hljs-number">15</span>:<span class="hljs-number">08</span> /etc/sudoers</code></pre><p>是的，只有只读的权限，如果想要修改的话，需要先添加w权限：</p><pre><code class="hljs livescript">[root@localhost ~]<span class="hljs-comment"># chmod -v u+w /etc/sudoers</span>mode <span class="hljs-keyword">of</span> <span class="hljs-string">&quot;/etc/sudoers&quot;</span> changed <span class="hljs-keyword">from</span> <span class="hljs-number">0440</span> (r--r-----) <span class="hljs-keyword">to</span> <span class="hljs-number">0640</span> (rw-r-----)</code></pre><p>然后就可以添加内容了，在下面的一行下追加新增的用户：</p><pre><code class="hljs pgsql">[root@localhost ~]# vim /etc/sudoers## Allow root <span class="hljs-keyword">to</span> run <span class="hljs-keyword">any</span> commands anywher  root    <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)       <span class="hljs-keyword">ALL</span>  linuxidc  <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)       <span class="hljs-keyword">ALL</span>  #这个是新增的用户 默认<span class="hljs-number">5</span>分钟后刚才输入的sudo密码过期，下次sudo需要重新输入密码，如果觉得在sudo的时候输入密码麻烦，把刚才的输入换成如下内容即可：linuxidc <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>) NOPASSWD:<span class="hljs-keyword">ALL</span></code></pre><p>wq保存退出，这时候要记得将写权限收回：</p><pre><code class="hljs livescript">[root@localhost ~]<span class="hljs-comment"># chmod -v u-w /etc/sudoers</span>mode <span class="hljs-keyword">of</span> <span class="hljs-string">&quot;/etc/sudoers&quot;</span> changed <span class="hljs-keyword">from</span> <span class="hljs-number">0640</span> (rw-r-----) <span class="hljs-keyword">to</span> <span class="hljs-number">0440</span> (r--r-----)</code></pre><p>这时候使用新用户登录，使用sudo：</p><pre><code class="hljs routeros">[linuxidc@localhost ~]$ sudo cat /etc/passwd[sudo] password <span class="hljs-keyword">for</span> linuxidc: We trust you have received the usual lecture <span class="hljs-keyword">from</span> the local SystemAdministrator. It usually boils down <span class="hljs-keyword">to</span> these three things:    #1) Respect the privacy of others.    #2) Think before you type.    #3) With great power comes great responsibility.</code></pre><p>第一次使用会提示你，你已经化身超人，身负责任。而且需要输入密码才可以下一步。如果不想需要输入密码怎么办，将最后一个ALL修改成NOPASSWD: ALL。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装Node+Npm</title>
    <link href="/2020/08/10/Centos7%E5%AE%89%E8%A3%85Node+Npm/"/>
    <url>/2020/08/10/Centos7%E5%AE%89%E8%A3%85Node+Npm/</url>
    
    <content type="html"><![CDATA[<h4 id="Centos7安装Node-Npm"><a href="#Centos7安装Node-Npm" class="headerlink" title="Centos7安装Node+Npm"></a>Centos7安装Node+Npm</h4><ul><li>node官网下载node（**Linux Binaries (x64)**）安装包 [<a href="https://nodejs.org/zh-cn/download/]">https://nodejs.org/zh-cn/download/]</a></li><li>执行解压操作</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">-xvf</span> <span class="hljs-selector-tag">node-v10</span><span class="hljs-selector-class">.16</span><span class="hljs-selector-class">.3-linux-x64</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.xz</span> </code></pre><h5 id="确认一下nodejs下bin目录是否有node-和npm文件-如果有执行软连接，如果没有重新下载"><a href="#确认一下nodejs下bin目录是否有node-和npm文件-如果有执行软连接，如果没有重新下载" class="headerlink" title="确认一下nodejs下bin目录是否有node 和npm文件,如果有执行软连接，如果没有重新下载"></a><strong>确认一下nodejs下bin目录是否有node 和npm文件,如果有执行软连接，如果没有重新下载</strong></h5><ul><li>建立软连接，变为全局,对应自己路径</li></ul><pre><code class="hljs bash">ln -s /usr/<span class="hljs-built_in">local</span>/src/node-v10.16.3-linux-x64/bin/npm  /usr/<span class="hljs-built_in">local</span>/bin/(此处不改)ln -s /usr/<span class="hljs-built_in">local</span>/src/node-v10.16.3-linux-x64/bin/node /usr/<span class="hljs-built_in">local</span>/bin/</code></pre><ul><li>验证node是否生效</li></ul><pre><code class="hljs undefined">npm -v node -v</code></pre><h4 id="npm换源"><a href="#npm换源" class="headerlink" title="npm换源"></a>npm换源</h4><pre><code class="hljs arduino">npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><span class="hljs-comment">// 配置后可通过下面方式来验证是否成功</span>npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">get</span> registry</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>node</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx脚本安装</title>
    <link href="/2020/08/10/Nginx%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <url>/2020/08/10/Nginx%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><pre><code class="hljs properties"><span class="hljs-attr">1</span> <span class="hljs-string">gcc 安装</span><span class="hljs-attr">yum</span> <span class="hljs-string">install -y gcc gcc-c++</span><span class="hljs-attr">2</span> <span class="hljs-string">PCRE pcre-devel 安装</span><span class="hljs-attr">yum</span> <span class="hljs-string">install -y pcre pcre-devel</span><span class="hljs-attr">3</span> <span class="hljs-string">zlib 安装</span><span class="hljs-attr">yum</span> <span class="hljs-string">install -y zlib zlib-devel</span><span class="hljs-attr">4</span> <span class="hljs-string">OpenSSL 安装</span><span class="hljs-attr">yum</span> <span class="hljs-string">install -y openssl openssl-devel</span></code></pre><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment">#安装目录</span>data=<span class="hljs-string">&quot;usr/local&quot;</span><span class="hljs-comment">#压缩包目录</span>default=<span class="hljs-string">&quot;home/mirror/nginx&quot;</span><span class="hljs-comment">#安装依赖</span><span class="hljs-comment">#1 gcc 安装</span>yum install -y gcc gcc-c++<span class="hljs-comment">#2 PCRE pcre-devel 安装</span>yum install -y pcre pcre-devel<span class="hljs-comment">#3 zlib 安装</span>yum install -y zlib zlib-devel<span class="hljs-comment">#4 OpenSSL 安装</span>yum install -y openssl openssl-devel<span class="hljs-comment">## 解压</span>tar -xvf ./nginx-1.19.1.tar.gz -C /<span class="hljs-variable">$&#123;data&#125;</span>/mv /<span class="hljs-variable">$&#123;data&#125;</span>/nginx-1.19.1 /<span class="hljs-variable">$&#123;data&#125;</span>/nginx<span class="hljs-comment">##进入nginx目录</span><span class="hljs-built_in">cd</span> /<span class="hljs-variable">$&#123;data&#125;</span>/nginx<span class="hljs-comment">## 配置</span>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/nginx<span class="hljs-comment"># make</span>makemake installrm -rf logsmkdir logschmod 700 logs<span class="hljs-comment"># cd到刚才配置的安装目录/usr/loca/nginx/</span><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/nginx./sbin/nginx -t<span class="hljs-comment">#在文件的最后一行加入文件引入</span><span class="hljs-built_in">cd</span> confsed -i <span class="hljs-string">&#x27;$d&#x27;</span> nginx.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;include /&#x27;</span><span class="hljs-variable">$&#123;default&#125;</span><span class="hljs-string">&#x27;/default.conf;&#x27;</span> &gt;&gt; nginx.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&#125;&#x27;</span> &gt;&gt; nginx.conffirewall-cmd --zone=public --add-port=80/tcp --permanentsystemctl restart firewalld.service</code></pre><p>default.conf</p><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span>  /backApi &#123;    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:9100</span>;&#125;<span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span> default_server;    <span class="hljs-attribute">server_name</span>  www.xxxx.com;    <span class="hljs-attribute">index</span> index.html;    <span class="hljs-attribute">location</span> / &#123;        <span class="hljs-attribute">alias</span>   /root;        <span class="hljs-attribute">index</span>  index.html index.htm;    &#125;    <span class="hljs-attribute">location</span> /api &#123;        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/api/(.*)$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;        <span class="hljs-attribute">proxy_pass</span>   http://backApi;        <span class="hljs-attribute">proxy_set_header</span>   Host             <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>;        <span class="hljs-attribute">proxy_set_header</span>   X-Real-IP        <span class="hljs-variable">$remote_addr</span>;        <span class="hljs-attribute">proxy_set_header</span>   X-Forwarded-For  <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;        <span class="hljs-attribute">proxy_set_header</span>   Proxy-Client-IP  <span class="hljs-variable">$remote_addr</span>;    &#125;&#125;<span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span>  <span class="hljs-number">8888</span>    server_name  www.xxxx.com;    <span class="hljs-attribute">location</span> /wqe/ &#123;        <span class="hljs-attribute">alais</span> /home/xxxx    &#125;&#125;</code></pre><h4 id="目录浏览配置"><a href="#目录浏览配置" class="headerlink" title="目录浏览配置"></a>目录浏览配置</h4><pre><code class="hljs applescript">autoindex_localtime <span class="hljs-keyword">on</span>; 默认为off，显示的文件时间为GMT时间。改为<span class="hljs-keyword">on</span>后，显示的文件时间为文件的服务器时间。autoindex_exact_size off;    默认为<span class="hljs-keyword">on</span>，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB。charset utf<span class="hljs-number">-8</span>,gbk;解决中文乱码问题。</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7常用命令</title>
    <link href="/2020/08/10/Centos7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/08/10/Centos7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="开端口"><a href="#开端口" class="headerlink" title="开端口"></a>开端口</h4><pre><code class="hljs routeros">【单个】firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=2181/tcp --permanent【范围】firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=30000-30999/tcp --permanent【删除】firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--remove-port</span>=8080/tcp --permanent【刷新配置】firewall-cmd --reload<span class="hljs-comment">#找出公共区域的所有设置</span>firewall-cmd <span class="hljs-attribute">--zone</span>=public --list-allfirewall-cmd --list-all</code></pre><h4 id="重启防火墙："><a href="#重启防火墙：" class="headerlink" title="重启防火墙："></a>重启防火墙：</h4><pre><code class="hljs css"><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">restart</span> <span class="hljs-selector-tag">firewalld</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">stop</span> <span class="hljs-selector-tag">firewalld</span><span class="hljs-selector-class">.service</span></code></pre><h4 id="开机启动配置"><a href="#开机启动配置" class="headerlink" title="开机启动配置"></a>开机启动配置</h4><pre><code class="hljs applescript">/etc/rc.<span class="hljs-keyword">local</span>可加入命令，如：nohup java -jar <span class="hljs-built_in">text</span>.jar</code></pre><h4 id="shell脚本执行报错（-bin-bash-M-坏的解释器-没有那个文件或目录）"><a href="#shell脚本执行报错（-bin-bash-M-坏的解释器-没有那个文件或目录）" class="headerlink" title="shell脚本执行报错（ /bin/bash^M: 坏的解释器: 没有那个文件或目录）"></a>shell脚本执行报错（ /bin/bash^M: 坏的解释器: 没有那个文件或目录）</h4><pre><code class="hljs cmake">sed -i <span class="hljs-string">&quot;s/\r//&quot;</span> <span class="hljs-keyword">install</span>.sh</code></pre><h4 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h4><pre><code class="hljs awk">cat <span class="hljs-regexp">/proc/</span>versioncat <span class="hljs-regexp">/etc/</span>redhat-release</code></pre><h4 id="查看文件-文件夹大小"><a href="#查看文件-文件夹大小" class="headerlink" title="查看文件/文件夹大小"></a>查看文件/文件夹大小</h4><pre><code class="hljs stata">指定目录的总大小，可以使用 du -<span class="hljs-keyword">sh</span> 目录名称，du -<span class="hljs-keyword">sh</span> <span class="hljs-keyword">test</span>/ 或 du -<span class="hljs-keyword">h</span> <span class="hljs-keyword">test</span>/当前目录大小 du -<span class="hljs-keyword">sh</span> 或  du -<span class="hljs-keyword">h</span>文件大小 du -<span class="hljs-keyword">h</span> index.html</code></pre><h4 id="查看系统时间"><a href="#查看系统时间" class="headerlink" title="查看系统时间"></a>查看系统时间</h4><ul><li>查看系统时间的命令： date</li></ul><h4 id="查看硬件时间"><a href="#查看硬件时间" class="headerlink" title="查看硬件时间"></a>查看硬件时间</h4><ul><li>查看硬件时间的命令：  hwclock</li></ul><h4 id="时间服务器上的时间同步的方法"><a href="#时间服务器上的时间同步的方法" class="headerlink" title="时间服务器上的时间同步的方法"></a>时间服务器上的时间同步的方法</h4><pre><code class="hljs vala">安装ntpdate工具<span class="hljs-meta"># yum -y install ntp ntpdate</span>设置系统时间与网络时间同步<span class="hljs-meta"># ntpdate cn.pool.ntp.org</span>将系统时间写入硬件时间<span class="hljs-meta"># hwclock --systohc</span></code></pre><h4 id="安装net-tools"><a href="#安装net-tools" class="headerlink" title="安装net-tools"></a>安装net-tools</h4><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install -y net-tools.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span> </code></pre><h4 id="安装lrzsz"><a href="#安装lrzsz" class="headerlink" title="安装lrzsz"></a>安装lrzsz</h4><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> lrzsz</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/08/07/hello-world/"/>
    <url>/2020/08/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
