<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kafka安装使用</title>
    <link href="/2020/10/29/Kafka%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/10/29/Kafka%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>1.<a href="https://kafka.apachecn.org/downloads.html">官网下载</a></p><p>2.解压 tar -zxvf  xxxxxxx.tar.gz</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre><code class="hljs clean">############################# Server Basics ############################## broker的id，要求唯一，集群部署不能重复broker.id=<span class="hljs-number">0</span>############################# Socket Server Settings ############################## 监听的服务端口，所部署机器的IP或者域名＋端口，记得防火墙开端口 # 监听器列表 - 使用逗号分隔URI列表和监听器名称。如果侦听器名称不是安全协议，则还必须设置listener.security.protocol.map。指定主机名为<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>来绑定到所有接口。留空则绑定到默认接口上# java.net.InetAddress.getCanonicalHostName() <span class="hljs-keyword">if</span> not configured.#   FORMAT:#     listeners = listener_name:<span class="hljs-comment">//host_name:port</span>#   EXAMPLE:#     listeners = PLAINTEXT:<span class="hljs-comment">//your.host.name:9092</span>listeners=PLAINTEXT:<span class="hljs-comment">//192.168.186.144:9092</span># Hostname and port the broker will advertise to producers and consumers. If not set, # it uses the value for <span class="hljs-string">&quot;listeners&quot;</span> <span class="hljs-keyword">if</span> configured.  Otherwise, it will use the value# returned <span class="hljs-keyword">from</span> java.net.InetAddress.getCanonicalHostName().#advertised.listeners=PLAINTEXT:<span class="hljs-comment">//your.host.name:9092</span># Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL# 服务器用于从接收网络请求并发送网络响应的线程数num.network.threads=<span class="hljs-number">3</span># 服务器用于处理请求的线程数，可能包括磁盘I/Onum.io.threads=<span class="hljs-number">8</span># 服务端用来处理socket连接的SO_SNDBUF缓冲大小。如果值为<span class="hljs-number">-1</span>，则使用系统默认值。socket.send.buffer.bytes=<span class="hljs-number">102400</span># 服务端用来处理socket连接的SO_RCVBUFF缓冲大小。如果值为<span class="hljs-number">-1</span>，则使用系统默认值socket.receive.buffer.bytes=<span class="hljs-number">102400</span># socket请求的最大大小，这是为了防止server跑光内存，不能大于Java堆的大小。（<span class="hljs-number">104857600</span>-&gt;<span class="hljs-number">100</span>MB）socket.request.max.bytes=<span class="hljs-number">104857600</span>############################# Log Basics ############################## 保存日志数据的目录，如果未设置将使用log.dir的配置。log.dirs=/home/cloud/server/kafka/kafka/logs# ！！每个topic的默认日志分区数 主题分区数必须大于broker数 ！！num.partitions=<span class="hljs-number">3</span># 每个数据目录，用于启动时日志恢复和关闭时刷新的线程数num.recovery.threads.per.data.dir=<span class="hljs-number">1</span>############################# Internal Topic Settings  ############################## The replication factor for the group metadata internal topics <span class="hljs-string">&quot;__consumer_offsets&quot;</span> and <span class="hljs-string">&quot;__transaction_state&quot;</span># For anything other than development testing, a value greater than <span class="hljs-number">1</span> is recommended for to ensure availability such <span class="hljs-keyword">as</span> <span class="hljs-number">3.</span># offset topic的副本数（设置的越大，可用性越高）。内部topic创建将失败，直到集群大小满足此副本数要求。offsets.topic.replication.factor=<span class="hljs-number">1</span># 事务topic的副本数（设置的越大，可用性越高）。内部topic在集群数满足副本数之前，将会一直创建失败。transaction.state.log.replication.factor=<span class="hljs-number">1</span># 覆盖事务topic的min.insync.replicas配置# 当producer将ack设置为“全部”（或“<span class="hljs-number">-1</span>”）时，min.insync.replicas指定了被认为写入成功的最小副本数。# 如果这个最小值不能满足，那么producer将会引发一个异常（NotEnoughReplicas或NotEnoughReplicasAfterAppend）。# 当一起使用时，min.insync.replicas和acks允许您强制更大的耐久性保证。 # 一个经典的情况是创建一个复本数为<span class="hljs-number">3</span>的topic，将min.insync.replicas设置为<span class="hljs-number">2</span>，并且producer使用“all”选项。 # 这将确保如果大多数副本没有写入producer则抛出异常。transaction.state.log.min.isr=<span class="hljs-number">1</span>############################# Log Flush Policy ############################## Messages are immediately written to the filesystem but by default we only fsync() to sync# the OS cache lazily. The following configurations control the flush <span class="hljs-keyword">of</span> data to disk.# There are a few important trade-offs here:#    <span class="hljs-number">1.</span> Durability: Unflushed data may be lost <span class="hljs-keyword">if</span> you are not using replication.#    <span class="hljs-number">2.</span> Latency: Very large flush intervals may lead to latency spikes when the flush does occur <span class="hljs-keyword">as</span> there will be a lot <span class="hljs-keyword">of</span> data to flush.#    <span class="hljs-number">3.</span> Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.# The settings below allow one to configure the flush policy to flush data after a period <span class="hljs-keyword">of</span> time or# every N messages (or both). This can be done globally and overridden on a per-topic basis.# 在将消息刷新到磁盘之前，在日志分区上累积的消息数量。默认：    <span class="hljs-number">9223372036854775807</span>#log.flush.interval.messages=<span class="hljs-number">10000</span># 在刷新到磁盘之前，任何topic中的消息保留在内存中的最长时间（以毫秒为单位）。如果未设置，则使用# 如果未设置，则使用log.flush.scheduler.interval.ms中的值。 #log.flush.interval.ms=<span class="hljs-number">1000</span>############################# Log Retention Policy ############################## The following configurations control the disposal <span class="hljs-keyword">of</span> log segments. The policy can# be set to delete segments after a period <span class="hljs-keyword">of</span> time, or after a given size has accumulated.# A segment will be deleted whenever *either* <span class="hljs-keyword">of</span> these criteria are met. Deletion always happens# <span class="hljs-keyword">from</span> the end <span class="hljs-keyword">of</span> the log.# The minimum age <span class="hljs-keyword">of</span> a log file to be eligible for deletion due to agelog.retention.hours=<span class="hljs-number">168</span># A size-based retention policy for logs. Segments are pruned <span class="hljs-keyword">from</span> the log unless the remaining# segments drop below log.retention.bytes. Functions independently <span class="hljs-keyword">of</span> log.retention.hours.#log.retention.bytes=<span class="hljs-number">1073741824</span># The maximum size <span class="hljs-keyword">of</span> a log segment file. When this size is reached a new log segment will be created.log.segment.bytes=<span class="hljs-number">1073741824</span># The interval at which log segments are checked to see <span class="hljs-keyword">if</span> they can be deleted according# to the retention policieslog.retention.check.interval.ms=<span class="hljs-number">300000</span>############################# Zookeeper ############################## Zookeeper connection string (see zookeeper docs for details).# This is a comma separated host:port pairs, each corresponding to a zk# server. e.g. <span class="hljs-string">&quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;</span>.# You can also append an optional chroot string to the urls to specify the# root directory for all kafka znodes.zookeeper.connect=localhost:<span class="hljs-number">2181</span># Timeout <span class="hljs-keyword">in</span> ms for connecting to zookeeperzookeeper.connection.timeout.ms=<span class="hljs-number">6000</span>############################# Group Coordinator Settings ############################## The following configuration specifies the time, <span class="hljs-keyword">in</span> milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.# The rebalance will be further delayed by the value <span class="hljs-keyword">of</span> group.initial.rebalance.delay.ms <span class="hljs-keyword">as</span> new members join the group, up to a maximum <span class="hljs-keyword">of</span> max.poll.interval.ms.# The default value for this is <span class="hljs-number">3</span> seconds.# We override this to <span class="hljs-number">0</span> here <span class="hljs-keyword">as</span> it makes for a better out-<span class="hljs-keyword">of</span>-the-box experience for development and testing.# However, <span class="hljs-keyword">in</span> production environments the default value <span class="hljs-keyword">of</span> <span class="hljs-number">3</span> seconds is more suitable <span class="hljs-keyword">as</span> this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.group.initial.rebalance.delay.ms=<span class="hljs-number">0</span></code></pre><h4 id="启动zk"><a href="#启动zk" class="headerlink" title="启动zk"></a>启动zk</h4><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/</span>zkServer.sh start</code></pre><h4 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h4><pre><code class="hljs pgsql">nohup ./bin/kafka-<span class="hljs-keyword">server</span>-<span class="hljs-keyword">start</span>.sh config/<span class="hljs-keyword">server</span>.properties &gt; <span class="hljs-keyword">server</span>.<span class="hljs-keyword">out</span> &amp;nohup ./bin/kafka-<span class="hljs-keyword">server</span>-<span class="hljs-keyword">start</span>.sh config/<span class="hljs-keyword">server</span><span class="hljs-number">-1.</span>properties &gt; server1.<span class="hljs-keyword">out</span> &amp;nohup ./bin/kafka-<span class="hljs-keyword">server</span>-<span class="hljs-keyword">start</span>.sh config/<span class="hljs-keyword">server</span><span class="hljs-number">-2.</span>properties &gt; server2.<span class="hljs-keyword">out</span> &amp;</code></pre><h4 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h4><pre><code class="hljs brainfuck"><span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> --<span class="hljs-comment">create</span> --<span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> --<span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">1</span> --<span class="hljs-comment">partitions</span> <span class="hljs-comment">1</span> --<span class="hljs-comment">topic</span> <span class="hljs-comment">kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">stream1</span></code></pre><h4 id="查看topic描述"><a href="#查看topic描述" class="headerlink" title="查看topic描述"></a>查看topic描述</h4><pre><code class="hljs jboss-cli"><span class="hljs-string">./bin/kafka-topics.sh</span> <span class="hljs-params">--describe</span> <span class="hljs-params">--zookeeper</span> localhost<span class="hljs-function">:2181</span> <span class="hljs-params">--topic</span> kafka-more</code></pre><h4 id="查看消费者组"><a href="#查看消费者组" class="headerlink" title="查看消费者组"></a>查看消费者组</h4><pre><code class="hljs jboss-cli"><span class="hljs-string">./bin/kafka-consumer-groups.sh</span> <span class="hljs-params">--new-consumer</span> <span class="hljs-params">--bootstrap-server</span> 192.168.186.140<span class="hljs-function">:9092</span> <span class="hljs-params">--list</span><span class="hljs-string">./bin/kafka-consumer-groups.sh</span> <span class="hljs-params">--zookeeper</span> localhost<span class="hljs-function">:2181</span> <span class="hljs-params">--list</span><span class="hljs-string">./bin/kafka-topics.sh</span> <span class="hljs-params">--zookeeper</span> localhost<span class="hljs-function">:2181</span>/kafka-cluster <span class="hljs-params">--list</span>  </code></pre><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><pre><code class="hljs jboss-cli"><span class="hljs-string">./bin/kafka-console-consumer.sh</span> <span class="hljs-params">--bootstrap-server</span> localhost<span class="hljs-function">:9092</span> <span class="hljs-params">--from-beginning</span> <span class="hljs-params">--topic</span> kafka-more</code></pre><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><pre><code class="hljs jboss-cli"><span class="hljs-string">./bin/kafka-console-producer.sh</span> <span class="hljs-params">--broker-list</span> localhost<span class="hljs-function">:9092</span> <span class="hljs-params">--topic</span> kafka-more</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Kafka</tag>
      
      <tag>Spring-Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2020/10/10/Docker/"/>
    <url>/2020/10/10/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装&amp;配置"></a>安装&amp;配置</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><pre><code class="hljs properties"><span class="hljs-comment">#启动服务</span><span class="hljs-attr">systemctl</span> <span class="hljs-string">start docker</span><span class="hljs-comment">#获取镜像</span><span class="hljs-attr">docker</span>  <span class="hljs-string">pull [镜像:xx.xx]</span><span class="hljs-meta">//docker</span> <span class="hljs-string">pull mysql:8.0.12</span><span class="hljs-comment">#列出镜像</span><span class="hljs-attr">docker</span> <span class="hljs-string">image ls -a</span><span class="hljs-comment">#运行容器</span><span class="hljs-attr">docker</span> <span class="hljs-string">run [镜像]</span><span class="hljs-comment">#查看正在运行的容器</span><span class="hljs-attr">docker</span> <span class="hljs-string">ps</span><span class="hljs-comment">#进入交互界面</span><span class="hljs-attr">docker</span> <span class="hljs-string">exec -it 【短ID】 /bin/bash</span><span class="hljs-comment">#查找镜像</span><span class="hljs-attr">docker</span> <span class="hljs-string">search [镜像]</span><span class="hljs-comment">#查看终止状态的容器</span><span class="hljs-attr">docker</span> <span class="hljs-string">container ls -a</span><span class="hljs-comment">#保存容器</span><span class="hljs-attr">docker</span> <span class="hljs-string">commit 【短ID】 容器名称:容器版本 </span><span class="hljs-comment">#删除容器（首先kill运行中的容器然后删除终止状态的容器）</span><span class="hljs-attr">docker</span> <span class="hljs-string">kill -s KILL [短ID(终止状态)]</span><span class="hljs-attr">docker</span> <span class="hljs-string">container rm 【短ID】来删除一个处于终止状态的容器</span><span class="hljs-comment">#清理所有处于终止状态的容器</span><span class="hljs-attr">docker</span> <span class="hljs-string">container prune</span><span class="hljs-comment">#删除镜像</span><span class="hljs-attr">docker</span> <span class="hljs-string">image rm 【短ID】</span><span class="hljs-comment">#若需要删除所有仓库名为 redis 的镜像：</span><span class="hljs-attr">docker</span> <span class="hljs-string">image rm $(docker image ls -q redis)</span><span class="hljs-comment">#查看容器信息</span><span class="hljs-attr">docker</span> <span class="hljs-string">inspect 【短ID】</span></code></pre><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p><strong>docker 安装 mysql 8 版本</strong></p><pre><code class="hljs routeros"><span class="hljs-comment"># docker 中下载 mysql</span>docker pull mysql:8.0.12<span class="hljs-comment">#启动</span>   docker <span class="hljs-builtin-name">run</span> --name mysql  -v D:\DockerImgs\MySQLdatabase:/var/lib/mysql -p 3306:3306 -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=root -e <span class="hljs-attribute">MYSQL_DATABASE</span>=inst1 -d mysql:8.0.12--name mysql  将容器命名为mysql，后面可以用这个name进行容器的启动暂停等操作-e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=123456 设置MySQL密码为123456-d 此容器在后台运行,并且返回容器的ID-i 以交互模式运行容器-p 进行端口映射，格式为主机(宿主)端口:容器端口<span class="hljs-attribute">--restart</span>=always 当docker重启时，该容器自动重启<span class="hljs-comment">#进入容器</span>docker exec -it mysql bash<span class="hljs-comment">#登录mysql</span>mysql -u root -p<span class="hljs-comment">#查看表</span>show databases;<span class="hljs-comment">##修改本地连接 </span>ALTER<span class="hljs-built_in"> USER </span><span class="hljs-string">&#x27;root&#x27;</span>@localhost IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;123456&#x27;</span>;flush privileges;<span class="hljs-comment">#远程连接</span>ALTER<span class="hljs-built_in"> USER </span><span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;123456&#x27;</span>;flush privileges;<span class="hljs-comment">#挂载到本地（需要授权）</span> -v D:\DockerImgs\MySQLdatabase:/var/lib/mysql</code></pre><h3 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h3><pre><code class="hljs awk"><span class="hljs-comment"># docker 中下载 ubuntu</span>docker pull ubuntu:<span class="hljs-number">18.04</span><span class="hljs-comment">#启动且允许用户进行交互</span>docker run --name ubuntu ubuntu:<span class="hljs-number">18.04</span> <span class="hljs-regexp">/usr/</span>sbin/initdocker run --privileged --name centos centos <span class="hljs-regexp">/usr/</span>sbin/init<span class="hljs-comment">#进入</span>docker exec -it centos bash<span class="hljs-comment">#查看信息</span>root@af8bae53bdd3:<span class="hljs-regexp">/#cat /</span>etc/os-release<span class="hljs-comment">#安装firewalld 防火墙</span>yum install firewalld<span class="hljs-comment">#安装ifconfig</span>yum search ifconfigyum install net-tools.x86_64 -y<span class="hljs-comment">#设置密码</span>passwd    <span class="hljs-comment">#如果没有该命令 使用yum install passwd</span><span class="hljs-comment">#安装Openssh </span>yum -y install openssh-serveryum -y install openssh-clients<span class="hljs-comment">#修改/etc/ssh/sshd_config配置并保存：</span>vi <span class="hljs-regexp">/etc/</span>ssh/sshd_configPermitRootLogin yes    UsePAM noport=<span class="hljs-number">22</span> <span class="hljs-comment">#开启22端口</span>RSAAuthentication yes <span class="hljs-comment">#启用 RSA 认证</span>PubkeyAuthentication yes <span class="hljs-comment">#启用公钥私钥配对认证方式</span>AuthorizedKeysFile .ssh/authorized_keys <span class="hljs-comment">#公钥文件路径（和上面生成的文件同）</span>PermitRootLogin yes <span class="hljs-comment">#root能使用ssh登录</span><span class="hljs-comment">#启动ssh服务</span>systemctl start sshdsystemctl status sshd<span class="hljs-comment">#重启ssh服务，并设置开机启动：</span>yum install initscripts -yservice sshd restartchkconfig sshd on<span class="hljs-comment">#安装jdk</span>查看yum库中的java安装包 ：yum -y list java*yum -y install java-<span class="hljs-number">11</span>-openjdk.x86_64 java-<span class="hljs-number">11</span>-openjdk-devel.x86_64<span class="hljs-comment">#安装路径</span> cd <span class="hljs-regexp">/usr/</span>lib/jvm <span class="hljs-comment">#安装MySQL</span>  yum install wget.x86_64 -y  wget http:<span class="hljs-regexp">//</span>repo.mysql.com/mysql80-community-release-el7-<span class="hljs-number">1</span>.noarch.rpm  yum -y install mysql80-community-release-el7-<span class="hljs-number">1</span>.noarch.rpm  yum -y install mysql-community-server  <span class="hljs-comment">#查看默认密码</span>  grep <span class="hljs-string">&#x27;temporary password&#x27;</span> <span class="hljs-regexp">/var/</span>log/mysqld.log  <span class="hljs-comment">#修改密码</span>  ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;Xiao_00oo&#x27;</span>;(过于简单改不了)  （      ===<span class="hljs-comment">#跳过密码(算了吧)</span>      vi <span class="hljs-regexp">/etc/my</span>.cnf       配置文件添加skip-grant-tables       ===  ）  <span class="hljs-comment">#修改远程连接</span>  update user set host = <span class="hljs-string">&#x27;%&#x27;</span> where user = <span class="hljs-string">&#x27;root&#x27;</span>;  <span class="hljs-comment">#保存后重启mysql</span>  systemctl restart mysqld  <span class="hljs-comment">#查看状态</span>  systemctl status mysqld  <span class="hljs-comment">#卸载mysql</span>  yum remove mysql mysql-server mysql-libs compat-mysql8  <span class="hljs-comment">#下载tomcat9</span>  wget http:<span class="hljs-regexp">//mi</span>rror.bit.edu.cn<span class="hljs-regexp">/apache/</span>tomcat<span class="hljs-regexp">/tomcat-9/</span>v9.<span class="hljs-number">0.24</span><span class="hljs-regexp">/bin/</span>apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">24</span>.tar.gz  <span class="hljs-comment">#解压</span>   tar zxvf apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">24</span>.tar.gz  <span class="hljs-comment">#启动 cd到安装目录 </span>  启动服务 ./catlina run  关闭服务 ctrl+c <span class="hljs-comment">#开端口命令：</span>     【单个】    firewall-cmd --zone=public --add-port=<span class="hljs-number">80</span>/tcp --permanent    【范围】    firewall-cmd --zone=public --add-port=<span class="hljs-number">50000</span>-<span class="hljs-number">50100</span>/tcp --permanent    【删除】    firewall-cmd --zone=public --remove-port=<span class="hljs-number">80</span>/tcp --permanent <span class="hljs-comment">#重启防火墙：</span>     systemctl restart firewalld.service <span class="hljs-comment">#找出公共区域的所有设置</span>     firewall-cmd --zone=public --list-all     firewall-cmd --list-all <span class="hljs-comment">#用于显示 tcp，udp 的端口和进程等相关情况</span>     netstat -tunlp  <span class="hljs-comment">#后台运行程序并把日志输出到output文件中</span> nohup PORT=<span class="hljs-number">9999</span> node app.js &gt;music.txt <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;</code></pre><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 启动Redis</span>    docker run -di <span class="hljs-params">--name</span> myredis -p 6379<span class="hljs-function">:6379</span> redis    docker exec -it myredis redis-cli docker run <span class="hljs-params">--name</span> myredis -v C:\Users\Admin\Desktop\redis-2.4.5-win32-win64\64bit:<span class="hljs-string">/data</span> -di -p 6379<span class="hljs-function">:6379</span> redis     -p 6379<span class="hljs-function">:6379</span> : 将容器的6379端口映射到主机的6379端口 -d : 将容器的在后台运行 -v $PWD/data:<span class="hljs-string">/data</span> : 将主机中当前目录下的data挂载到容器的<span class="hljs-string">/data</span> <span class="hljs-string">.redis</span>数据卷,如未加上这个,容器重启后数据将丢失. redis-server <span class="hljs-params">--appendonly</span> yes : 在容器执行redis-server启动命令，并打开redis持久化配置  <span class="hljs-params">--requirepass</span> <span class="hljs-string">&quot;ReDis@.1*1PWD&quot;</span>  设置引号里字符为密码 –restart=always : 随docker启动而启动$ <span class="hljs-keyword">cd</span> src$  <span class="hljs-string">./src/redis-server</span> <span class="hljs-string">./redis.conf</span>    <span class="hljs-string">./src/redis-cli</span></code></pre><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><pre><code class="hljs properties"><span class="hljs-comment">#拉取镜像</span>    <span class="hljs-attr">docker</span> <span class="hljs-string">pull tomcat  默认是最新的</span>    <span class="hljs-attr">docker</span> <span class="hljs-string">pull tomcat:8  指定版本</span><span class="hljs-comment"># 启动</span>    <span class="hljs-attr">docker</span> <span class="hljs-string">run -it --rm -p 8888:8080 tomcat  打印日志</span>    <span class="hljs-attr">docker</span> <span class="hljs-string">run -it -d -p 8888:8080 tomcat:8  指定版本且后台启动</span><span class="hljs-comment"># 访问</span>    <span class="hljs-attr">ip</span>:<span class="hljs-string">8888</span><span class="hljs-comment">####如果出现404，则</span>    <span class="hljs-meta">使用命令</span>: <span class="hljs-string">docker exec -it 运行的tomcat容器ID /bin/bash 进入到tomcat的目录</span>    <span class="hljs-meta">使用命令</span>: <span class="hljs-string">ls -l 发现有webapps 和 webapps.dist 两个文件夹</span>    <span class="hljs-meta">查看webapps</span> <span class="hljs-string">文件夹，发现里面没有文件，而 webapps.dist 里面有文件</span>    <span class="hljs-attr">使用过tomcat的都应该知道，webapps是tomcat存放静态资源的目录</span>    <span class="hljs-attr">只要把webapps.dist重命名为webapps就好了</span>     <span class="hljs-attr">mv</span> <span class="hljs-string">webapps webapps2</span>     <span class="hljs-attr">mv</span> <span class="hljs-string">webapps.dist/ webapps</span>    <span class="hljs-attr">再次访问就ok了</span></code></pre><p><img src="https://i.loli.net/2020/09/30/tFSDfVOzy4l7MqY.png" alt="image-20200930104659743"></p><pre><code class="hljs elixir"><span class="hljs-comment">#复制tomcat配置文件和webapps</span>     docker cp 【短ID】<span class="hljs-symbol">:/usr/local/tomcat/conf</span> /home/data/tomcat     docker cp 【短ID】<span class="hljs-symbol">:/usr/local/tomcat/conf/webapps</span> /home/data/tomcat<span class="hljs-comment">#挂载目录启动      </span>    docker run -d --name mytomcat -p <span class="hljs-number">8888:8080</span> -v /home/data/tomcat/conf/<span class="hljs-symbol">:/usr/local/tomcat/conf/</span> -v /home/data/tomcat/webapps/<span class="hljs-symbol">:/usr/local/tomcat/webapps/</span> tomcat</code></pre><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><pre><code class="hljs awk"><span class="hljs-comment">#获取nginx</span>    docker pull nginx<span class="hljs-comment">#运行</span>    docker run -id -p <span class="hljs-number">82</span>:<span class="hljs-number">80</span> nginx<span class="hljs-comment">#访问</span>    ip:<span class="hljs-number">82</span><span class="hljs-comment">#重启</span>    docker restart 【短ID】<span class="hljs-comment">#停止</span>    docker stop 【短ID】<span class="hljs-comment">#复制配置文件夹到服务器---(/home/data需要自己创建)</span>    docker cp 【短ID】:<span class="hljs-regexp">/etc/</span>nginx <span class="hljs-regexp">/home/</span>data    docker cp ea14a70c74ab:<span class="hljs-regexp">/etc/</span>nginx <span class="hljs-regexp">/home/</span>data<span class="hljs-comment">#挂载容器目录启动nginx容器</span>    docker run -id --name mynginx -v <span class="hljs-regexp">/home/</span>data<span class="hljs-regexp">/nginx:/</span>etc/nginx -p <span class="hljs-number">82</span>:<span class="hljs-number">80</span> nginx<span class="hljs-comment">#挂载静态资源目录 (/home/data/web)</span>    docker run -id --name mynginx -v <span class="hljs-regexp">/home/</span>data<span class="hljs-regexp">/nginx:/</span>etc<span class="hljs-regexp">/nginx -v /</span>home<span class="hljs-regexp">/data/</span>web:<span class="hljs-regexp">/home/</span>data/web -p <span class="hljs-number">82</span>:<span class="hljs-number">80</span> nginx<span class="hljs-comment">#访问</span>    ip:<span class="hljs-number">82</span></code></pre><h3 id="MinIO-Docker"><a href="#MinIO-Docker" class="headerlink" title="MinIO Docker"></a>MinIO Docker</h3><pre><code class="hljs routeros"><span class="hljs-comment"># docker安装镜像</span>    docker pull minio/minio<span class="hljs-comment"># 启动</span>    docker <span class="hljs-builtin-name">run</span> -p 9000:9000 -d --name minio \      -v /home/zkcm/ftp:/data \      -v /mnt/config:/root/.minio \      minio/minio<span class="hljs-built_in"> server </span>/data<span class="hljs-comment"># 默认用户密码 </span>    minioadmin    minioadmin</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装RabbitMQ</title>
    <link href="/2020/09/22/Centos7%E5%AE%89%E8%A3%85RabbitMQ/"/>
    <url>/2020/09/22/Centos7%E5%AE%89%E8%A3%85RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h5 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h5><p>RabbitMQ是用Erlang语言编写的，在本教程中我们将安装最新版本的Erlang到服务器中。 Erlang在默认的YUM存储库中不可用，因此您将需要安装EPEL存储库。 运行以下命令相同。</p><pre><code class="hljs sql">yum -y <span class="hljs-keyword">install</span> epel-<span class="hljs-keyword">release</span>yum -y <span class="hljs-keyword">update</span></code></pre><p>现在使用以下命令安装Erlang。</p><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> erlang socat</code></pre><p>您现在可以使用以下命令检查Erlang版本。</p><p>erl -version</p><p>您将得到以下输出。</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>liptan-pc ~]# erl -versionErlang (ASYNC_THREADS,HIPE) (BEAM) emulator version <span class="hljs-number">5.10</span><span class="hljs-number">.4</span></code></pre><p>要切换到Erlang <a href="https://www.linuxcool.com/">shell</a>，可以键入以下命令。</p><pre><code class="hljs ebnf"><span class="hljs-attribute">erl</span></code></pre><p>shell将更改，您将得到以下输出。</p><pre><code class="hljs apache"><span class="hljs-attribute">Erlang</span> R<span class="hljs-number">16</span>B<span class="hljs-number">03</span>-<span class="hljs-number">1</span> (erts-<span class="hljs-number">5</span>.<span class="hljs-number">10</span>.<span class="hljs-number">4</span>)<span class="hljs-meta"> [source] [64-bit] [async-threads:10] [hipe] [kernel-poll:false]</span><span class="hljs-attribute">Eshell</span> V<span class="hljs-number">5</span>.<span class="hljs-number">10</span>.<span class="hljs-number">4</span>  (abort with ^G)<span class="hljs-attribute">1</span>&gt;</code></pre><p>您可以通过按ctrl + C两次退出shell。 Erlang现在安装在系统上，现在可以继续安装RabbitMQ。</p><h5 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h5><p>RabbitMQ为预编译并可以直接安装的企业<a href="https://www.linuxprobe.com/">Linux系统</a>提供RPM软件包。 唯一需要的依赖是将Erlang安装到系统中。 我们已经安装了Erlang，我们可以进一步下载RabbitMQ。 通过运行下载Erlang RPM软件包。</p><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://www.rabbitmq.com/releases/rabbitmq-server/v<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">10</span>/rabbitmq-server-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">10</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.noarch.rpm</code></pre><p>如果你没有安装wget ，可以运行yum -y install wget 。 您可以随时找到最新版本的RabbitMQ下载页面的链接。</p><p>通过运行导入GPG密钥：</p><pre><code class="hljs groovy">rpm –<span class="hljs-keyword">import</span> <span class="hljs-attr">https:</span><span class="hljs-comment">//www.rabbitmq.com/rabbitmq-release-signing-key.asc</span></code></pre><p>运行RPM安装RPM包：</p><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -Uvh rabbitmq-server-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">10</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.noarch.rpm</code></pre><p>RabbitMQ现已安装在您的系统上。</p><h5 id="开始RabbitMQ"><a href="#开始RabbitMQ" class="headerlink" title="开始RabbitMQ"></a>开始RabbitMQ</h5><p>您可以通过运行以下命令启动RabbitMQ服务器进程。</p><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">start</span> rabbitmq-<span class="hljs-keyword">server</span></code></pre><p>要在引导时自动启动RabbitMQ，请运行以下命令。</p><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">enable</span> rabbitmq-<span class="hljs-keyword">server</span></code></pre><p>要检查RabbitMQ服务器的状态，请运行：</p><pre><code class="hljs axapta">systemctl status rabbitmq-<span class="hljs-keyword">server</span></code></pre><p>如果启动成功，您应该得到以下输出。</p><pre><code class="hljs angelscript">? rabbitmq-server.service - RabbitMQ broker   Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; enabled; vendor preset: disabled)   Active: active (running) since Sat <span class="hljs-number">2017</span><span class="hljs-number">-07</span><span class="hljs-number">-15</span> <span class="hljs-number">18</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span> UTC; <span class="hljs-number">3</span>min <span class="hljs-number">22</span>s ago Main PID: <span class="hljs-number">29006</span> (beam.smp)   Status: <span class="hljs-string">&quot;Initialized&quot;</span>   CGroup: /system.slice/rabbitmq-server.service           ??<span class="hljs-number">29006</span> /usr/lib64/erlang/erts<span class="hljs-number">-9.0</span>/bin/beam.smp -W w -A <span class="hljs-number">64</span> -P <span class="hljs-number">1048576</span> -t <span class="hljs-number">5000000</span> -stbt db -zdbbl <span class="hljs-number">32000</span> -K tr...           ??<span class="hljs-number">29149</span> /usr/lib64/erlang/erts<span class="hljs-number">-9.0</span>/bin/epmd -daemon           ??<span class="hljs-number">29283</span> erl_child_setup <span class="hljs-number">1024</span>           ??<span class="hljs-number">29303</span> inet_gethost <span class="hljs-number">4</span>           ??<span class="hljs-number">29304</span> inet_gethost <span class="hljs-number">4</span>Jul <span class="hljs-number">15</span> <span class="hljs-number">18</span>:<span class="hljs-number">59</span>:<span class="hljs-number">13</span> centos rabbitmq-server[<span class="hljs-number">29006</span>]: Starting broker...Jul <span class="hljs-number">15</span> <span class="hljs-number">18</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span> centos rabbitmq-server[<span class="hljs-number">29006</span>]: systemd unit <span class="hljs-keyword">for</span> activation check: <span class="hljs-string">&quot;rabbitmq-server.service&quot;</span>Jul <span class="hljs-number">15</span> <span class="hljs-number">18</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span> centos systemd[<span class="hljs-number">1</span>]: Started RabbitMQ broker.Jul <span class="hljs-number">15</span> <span class="hljs-number">18</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span> centos rabbitmq-server[<span class="hljs-number">29006</span>]: completed with <span class="hljs-number">0</span> plugins.</code></pre><h5 id="修改防火墙和SELinux规则"><a href="#修改防火墙和SELinux规则" class="headerlink" title="修改防火墙和SELinux规则"></a>修改防火墙和<a href="/2020/08/10/SELinux/">SELinux规则</a></h5><pre><code class="hljs dockerfile"><span class="hljs-comment">#放行5672和15672两个端口，（--permanent表示永久生效，没有此参数重启后失效）</span>firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --zone=public --add-port=5672/tcp --permanent</span>firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --zone=public --add-port=15672/tcp --permanent</span><span class="hljs-comment">#重载防火墙是设置生效</span>firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --reload</span><span class="hljs-comment">#查看放行端口列表，此时列表显示如下图</span>firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --list-all</span></code></pre><p>如果您启用SELinux，则必须运行以下命令以允许RabbitMQ服务。</p><pre><code class="hljs angelscript">setsebool -P nis_enabled <span class="hljs-number">1</span></code></pre><h5 id="访问Web控制台"><a href="#访问Web控制台" class="headerlink" title="访问Web控制台"></a>访问Web控制台</h5><p>启动RabbitMQ Web管理控制台，方法是运行：</p><pre><code class="hljs routeros">rabbitmq-plugins <span class="hljs-builtin-name">enable</span> rabbitmq_management</code></pre><p>通过运行以下命令，将RabbitMQ文件的所有权提供给RabbitMQ用户：</p><pre><code class="hljs crystal">chown -R <span class="hljs-symbol">rabbitmq:</span>rabbitmq /var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">rabbitmq</span>/</span></code></pre><p>现在，您将需要为RabbitMQ Web管理控制台创建管理用户。 运行以下命令相同。</p><pre><code class="hljs nsis"><span class="hljs-comment">#查看当前用户列表</span>rabbitmqctl list_users<span class="hljs-comment">#添加admin用户，用户名和密码都为admin </span>rabbitmqctl add_user <span class="hljs-literal">admin</span> <span class="hljs-literal">admin</span><span class="hljs-comment">#设置admin的角色为administrator</span>rabbitmqctl set_user_tags <span class="hljs-literal">admin</span> administrator<span class="hljs-comment">#设置admin用户的权限，可访问所有</span>rabbitmqctl set_permissions -p / <span class="hljs-literal">admin</span> “.*” “.*” “.*”修改密码rabbitmqctl  change_password  <span class="hljs-literal">admin</span>  <span class="hljs-string">&#x27;Newpassword&#x27;</span></code></pre><p>将管理员更改为管理员用户的首选用户名。 确保将StrongPassword更改为非常强大的密码。</p><p>要访问RabbitMQ的管理面板，请使用您最喜爱的Web浏览器并打开以下URL。</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>Your_Server_IP:<span class="hljs-number">15672</span>/</code></pre><h5 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h5><p>在使用上述新建的账号访问webUI界面可以看到Config file，在overview下面, 如果没有找到配置文件后面会加上（not found）</p><p><img src="https://i.loli.net/2020/09/22/Q1dIyYVlfcCTBJR.png" alt="image-20200922163249512"></p><p>没有就到该目录下新建一个，并开启远程访问（在结合SpringBoot时，RabbitMQ初始化默认是使用guest账户，因此需要给该账户开启远程访问），配置如下</p><pre><code class="hljs prolog">[                                                                                                           &#123; rabbit , [ &#123; tcp_listeners , [ <span class="hljs-number">5672</span> ] &#125; , &#123; loopback_users , [ <span class="hljs-string">&quot;guest&quot;</span> ] &#125; ] &#125;].</code></pre><p><strong>ps：最后的英文句号不能漏掉</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Rabbit</tag>
      
      <tag>消息队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK脚本安装</title>
    <link href="/2020/08/11/JDK%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <url>/2020/08/11/JDK%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><p><strong>脚本与压缩包同目录</strong></p><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#判断是否安装有openJDK</span>yum list installed |grep -e java -e jdk<span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]then        read -p <span class="hljs-string">&quot;继续执行将卸载已有JDK,y确定，其他退出?&quot;</span> choose        <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$choose</span>==<span class="hljs-string">&quot;y&quot;</span> ]        then                yum -y remove java-* &amp;&gt; <span class="hljs-regexp">/dev/</span>null                yum -y remove tzdata-java* &amp;&gt; <span class="hljs-regexp">/dev/</span>null        <span class="hljs-keyword">else</span>                <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>        fifi<span class="hljs-comment">#判断安装包是否存在</span><span class="hljs-keyword">if</span> [ -f jdk-<span class="hljs-number">8</span>u261-linux-x64.tar.gz ]<span class="hljs-comment">#判断是否已经安装</span>then        java &amp;&gt; <span class="hljs-regexp">/dev/</span>null        <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]        then                echo <span class="hljs-string">&quot;已经安装JDK&quot;</span>                <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>                echo <span class="hljs-string">&quot;开始安装JDK&quot;</span>                tar zxvf jdk-<span class="hljs-number">8</span>u261-linux-x64.tar.gz -C <span class="hljs-regexp">/usr/</span>local                echo <span class="hljs-string">&quot;JDK安装完成，开始配置环境变量&quot;</span>            cat <span class="hljs-regexp">/dev/</span>null &gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&#x27;export JAVA_HOME=/usr/local/jdk1.8.0_261&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&#x27;export PATH=$PATH:$JAVA_HOME/bin&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&quot;环境变量配置完成&quot;</span>        fi<span class="hljs-keyword">else</span>        echo <span class="hljs-string">&quot;请将当前shell脚本和安装包放在同一目录&quot;</span>fichmod +x <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.shsource <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.shecho <span class="hljs-string">&quot;======JDK安装完成，请使用命令：java -version检查是否成功安装,若失败请执行source /etc/profile.d/jdkconf.sh=======&quot;</span></code></pre><h4 id="rpm包"><a href="#rpm包" class="headerlink" title="rpm包"></a>rpm包</h4><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#判断是否安装有openJDK</span>yum list installed |grep -e java -e jdk<span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]then        read -p <span class="hljs-string">&quot;继续执行将卸载已有JDK,y确定，其他退出?&quot;</span> choose        <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$choose</span>==<span class="hljs-string">&quot;y&quot;</span> ]        then                yum -y remove java-* &amp;&gt; <span class="hljs-regexp">/dev/</span>null                yum -y remove tzdata-java* &amp;&gt; <span class="hljs-regexp">/dev/</span>null        <span class="hljs-keyword">else</span>                <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>        fifi<span class="hljs-comment">#判断安装包是否存在</span><span class="hljs-keyword">if</span> [ -f jdk-<span class="hljs-number">8</span>u261-linux-x64.rpm ]<span class="hljs-comment">#判断是否已经安装</span>then        java &amp;&gt; <span class="hljs-regexp">/dev/</span>null        <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]        then                echo <span class="hljs-string">&quot;已经安装JDK&quot;</span>                <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>                echo <span class="hljs-string">&quot;开始安装JDK&quot;</span>                rpm -ivh jdk-<span class="hljs-number">8</span>u261-linux-x64.rpm &amp;&gt;<span class="hljs-regexp">/dev/</span>null                echo <span class="hljs-string">&quot;JDK安装完成，开始配置环境变量&quot;</span>                echo <span class="hljs-string">&#x27;export JAVA_HOME=/usr/java/jdk1.8.0_261-amd64&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.sh                echo <span class="hljs-string">&quot;环境变量配置完成&quot;</span>        fi<span class="hljs-keyword">else</span>        echo <span class="hljs-string">&quot;请将当前shell脚本和安装包放在同一目录&quot;</span>fichmod +x <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.shsh <span class="hljs-regexp">/etc/</span>profile.d/jdkconf.shecho <span class="hljs-string">&quot;======JDK安装完成，请使用命令：java -version检查是否成功安装=======&quot;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>JDK</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7 常用命令</title>
    <link href="/2020/08/10/Centos7%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/08/10/Centos7%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="开端口"><a href="#开端口" class="headerlink" title="开端口"></a>开端口</h4><pre><code class="hljs routeros">【单个】firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=2181/tcp --permanent【范围】firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=30000-30999/tcp --permanent【删除】firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--remove-port</span>=8080/tcp --permanent【刷新配置】firewall-cmd --reload<span class="hljs-comment">#找出公共区域的所有设置</span>firewall-cmd <span class="hljs-attribute">--zone</span>=public --list-allfirewall-cmd --list-all</code></pre><h4 id="重启防火墙："><a href="#重启防火墙：" class="headerlink" title="重启防火墙："></a>重启防火墙：</h4><pre><code class="hljs css"><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">restart</span> <span class="hljs-selector-tag">firewalld</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">stop</span> <span class="hljs-selector-tag">firewalld</span><span class="hljs-selector-class">.service</span></code></pre><h4 id="开机启动配置"><a href="#开机启动配置" class="headerlink" title="开机启动配置"></a>开机启动配置</h4><pre><code class="hljs applescript">/etc/rc.<span class="hljs-keyword">local</span>可加入命令，如：nohup java -jar <span class="hljs-built_in">text</span>.jar</code></pre><h4 id="shell脚本执行报错"><a href="#shell脚本执行报错" class="headerlink" title="shell脚本执行报错"></a>shell脚本执行报错</h4><pre><code class="hljs matlab">sed -<span class="hljs-built_in">i</span> <span class="hljs-string">&quot;s/\r//&quot;</span> xxx.sh</code></pre><p>mMN7aJgE</p><h4 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h4><pre><code class="hljs awk">cat <span class="hljs-regexp">/proc/</span>versioncat <span class="hljs-regexp">/etc/</span>redhat-release</code></pre><h4 id="查看文件-文件夹大小"><a href="#查看文件-文件夹大小" class="headerlink" title="查看文件/文件夹大小"></a>查看文件/文件夹大小</h4><pre><code class="hljs stata">指定目录的总大小，可以使用 du -<span class="hljs-keyword">sh</span> 目录名称，du -<span class="hljs-keyword">sh</span> <span class="hljs-keyword">test</span>/ 或 du -<span class="hljs-keyword">h</span> <span class="hljs-keyword">test</span>/当前目录大小 du -<span class="hljs-keyword">sh</span> 或  du -<span class="hljs-keyword">h</span>文件大小 du -<span class="hljs-keyword">h</span> index.html</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7搭建FTP</title>
    <link href="/2020/08/10/Centos7%E6%90%AD%E5%BB%BAFTP/"/>
    <url>/2020/08/10/Centos7%E6%90%AD%E5%BB%BAFTP/</url>
    
    <content type="html"><![CDATA[<h4 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h4><p>vsftpd是linux下的一款小巧轻快，安全易用的FTP服务器软件，是一款在各个Linux发行版中最受推崇的FTP服务器软件。</p><p>1.安装vsftpd，直接yum 安装就可以了</p><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y vsftpd</code></pre><p>2.相关配置文件：</p><pre><code class="hljs awk">cd <span class="hljs-regexp">/etc/</span>vsftpd/</code></pre><p>3.启动服务</p><p><code>systemctl enable vsftpd.service</code> //设置开机自启动</p><p><code>systemctl start vsftpd.service</code> //启动ftp服务</p><p><code>netstat -antup | grep ftp</code> //查看ftp服务端口</p><p>3.修改相关配置文件</p><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>vsftpd/vsftpd.conf</code></pre><h4 id="创建ftp本地用户"><a href="#创建ftp本地用户" class="headerlink" title="创建ftp本地用户"></a>创建ftp本地用户</h4><p>1.创建用户并指定目录</p><pre><code class="hljs awk">useradd -d <span class="hljs-regexp">/data/</span>ftp ftpuser  <span class="hljs-comment">#目录自己创建  </span>passwd ftpuser  <span class="hljs-comment">#(回车)给用户ftpuser设置登录密码</span></code></pre><p>2.修改配置文件</p><pre><code class="hljs ini"><span class="hljs-attr">userlist_enable</span>=<span class="hljs-literal">YES</span>     <span class="hljs-comment">#启动用户列表</span><span class="hljs-attr">userlist_deny</span>=<span class="hljs-literal">NO</span>        <span class="hljs-comment">#决定是否对用户列表的用户拒绝访问ftp </span><span class="hljs-attr">userlist_file</span>=/etc/vsftpd/user_list</code></pre><p>3.在user_list中写入 ftp这个用户</p><p>4.配置vsftpd.conf 锁定根目录</p><pre><code class="hljs ini"><span class="hljs-attr">local_root</span>= /var/www        <span class="hljs-comment">#本地用户登录后自动转到的ftp根目录</span><span class="hljs-attr">chroot_local_user</span>=<span class="hljs-literal">YES</span>       <span class="hljs-comment">#将所有用户限定在指定的主目录内</span><span class="hljs-attr">chroot_list_enable</span>=<span class="hljs-literal">NO</span>       <span class="hljs-comment">#不启用列外的用户列表</span><span class="hljs-attr">chroot_list_file</span>=/etc/vsftpd/chroot_list  <span class="hljs-comment">#指定列外的用户列表文件 此文件是让用户登录后可以查看其他目录，若要使用户仅在指定的ftp目录，该文件就不要填写该用户,若没有该文件则新建</span></code></pre><p>5.修改ftp目录的权限,将用户添加到root组</p><pre><code class="hljs properties"><span class="hljs-attr">usermod</span> <span class="hljs-string">-g root ftpuser</span><span class="hljs-attr">chown</span> <span class="hljs-string">ftpuser:root /data/ftp</span><span class="hljs-attr">！！添加到root用户组后需要修改配置文件，加上以下配置：</span><span class="hljs-attr">allow_writeable_chroot</span>=<span class="hljs-string">YES</span></code></pre><h4 id="参考配置（vsftpd-conf）"><a href="#参考配置（vsftpd-conf）" class="headerlink" title="参考配置（vsftpd.conf）"></a>参考配置（vsftpd.conf）</h4><pre><code class="hljs ini"><span class="hljs-attr">anonymous_enable</span>=<span class="hljs-literal">NO</span><span class="hljs-attr">local_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">write_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">local_umask</span>=<span class="hljs-number">000</span><span class="hljs-attr">dirmessage_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">xferlog_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">connect_from_port_20</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">xferlog_std_format</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">chroot_local_user</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">chroot_list_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">chroot_list_file</span>=/etc/vsftpd/chroot_list<span class="hljs-attr">listen</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">listen_ipv6</span>=<span class="hljs-literal">NO</span><span class="hljs-attr">pam_service_name</span>=vsftpd<span class="hljs-attr">tcp_wrappers</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">userlist_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">userlist_deny</span>=<span class="hljs-literal">NO</span><span class="hljs-attr">userlist_file</span>=/etc/vsftpd/user_list<span class="hljs-comment">#目录自己创建，记得对应新建用户时的用户目录</span><span class="hljs-attr">local_root</span>= /data/ftp<span class="hljs-attr">allow_writeable_chroot</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">pasv_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-attr">pasv_min_port</span>=<span class="hljs-number">30000</span><span class="hljs-attr">pasv_max_port</span>=<span class="hljs-number">30999</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>ftp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装MongoDB</title>
    <link href="/2020/08/10/MongoDB/"/>
    <url>/2020/08/10/MongoDB/</url>
    
    <content type="html"><![CDATA[<h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>　　官方下载地址：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></p><h2 id="2-上传解压"><a href="#2-上传解压" class="headerlink" title="2.上传解压"></a>2.上传解压</h2><h3 id="1-使用工具（FileZilla）上传至服务器"><a href="#1-使用工具（FileZilla）上传至服务器" class="headerlink" title="　　1.使用工具（FileZilla）上传至服务器"></a>　　1.使用工具（FileZilla）上传至服务器</h3><p>　　<img src="https://i.loli.net/2020/08/10/1EluM4Qy2CVPpZ6.png" alt="img"></p><h3 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="　　2.解压安装"></a>　　2.解压安装</h3><pre><code class="hljs angelscript">解压：tar -zxvf mongodb-linux-x86_64<span class="hljs-number">-4.0</span><span class="hljs-number">.6</span>.tgz移动：mv ./mongodb-linux-x86_64<span class="hljs-number">-4.0</span><span class="hljs-number">.6</span> /usr/local/mongodb</code></pre><p>　　<img src="https://img2018.cnblogs.com/blog/1253415/201903/1253415-20190315144629293-243768918.png" alt="img"></p><h2 id="3-配置conf与目录"><a href="#3-配置conf与目录" class="headerlink" title="3.配置conf与目录"></a>3.配置conf与目录</h2><h3 id="1-进入mongodb目录"><a href="#1-进入mongodb目录" class="headerlink" title="　　1.进入mongodb目录　　　"></a>　　1.进入mongodb目录　　　</h3><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mongodb/</span></code></pre><p>　　　　<img src="https://img2018.cnblogs.com/blog/1253415/201903/1253415-20190315145017284-1028054786.png" alt="img"></p><h3 id="2-创建db目录和日志文件"><a href="#2-创建db目录和日志文件" class="headerlink" title="　　2.创建db目录和日志文件　　"></a>　　2.创建db目录和日志文件　　</h3><pre><code class="hljs awk">mkdir -p .<span class="hljs-regexp">/data/</span>dbmkdir -p ./logstouch .<span class="hljs-regexp">/logs/m</span>ongodb.log</code></pre><p>　　　　<img src="https://img2018.cnblogs.com/blog/1253415/201903/1253415-20190315145325509-1623167612.png" alt="img"></p><h3 id="3-创建mongodb-conf文件"><a href="#3-创建mongodb-conf文件" class="headerlink" title="　　3.创建mongodb.conf文件"></a>　　3.创建mongodb.conf文件</h3><p>　　　　<strong>vim mongodb.conf</strong></p><pre><code class="hljs ini"><span class="hljs-comment">#端口号</span><span class="hljs-attr">port</span>=<span class="hljs-number">27017</span><span class="hljs-comment">#db目录</span><span class="hljs-attr">dbpath</span>=/usr/local/mongodb/data/db<span class="hljs-comment">#日志目录</span><span class="hljs-attr">logpath</span>=//usr/local/mongodb/logs/mongodb.log<span class="hljs-comment">#后台</span><span class="hljs-attr">fork</span>=<span class="hljs-literal">true</span><span class="hljs-comment">#日志输出</span><span class="hljs-attr">logappend</span>=<span class="hljs-literal">true</span><span class="hljs-comment">#允许远程IP连接</span><span class="hljs-attr">bind_ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span></code></pre><h2 id="4-启动测试"><a href="#4-启动测试" class="headerlink" title="4.启动测试"></a>4.启动测试</h2><h3 id="1-启动"><a href="#1-启动" class="headerlink" title="　　1.启动　"></a>　　1.启动　</h3><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/m</span>ongod --config mongodb.conf</code></pre><p> 　<img src="https://img2018.cnblogs.com/blog/1253415/201903/1253415-20190315150104231-1845968800.png" alt="img"></p><h3 id="2-连接"><a href="#2-连接" class="headerlink" title="　　2.连接　"></a>　　2.连接　</h3><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/m</span>ongo  --默认端口<span class="hljs-number">27017</span>.<span class="hljs-regexp">/bin/m</span>ongo localhost:<span class="hljs-number">23234</span>  --指定端口，需要与配置的端口号一致</code></pre><p>　　<img src="https://img2018.cnblogs.com/blog/1253415/201903/1253415-20190315150455580-93719054.png" alt="img"></p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="　　3.测试　　"></a>　　3.测试　　<img src="https://img2018.cnblogs.com/blog/1253415/201903/1253415-20190315152856246-931789177.png" alt="img"></h3><h2 id="5-配置mongodb服务开机启动"><a href="#5-配置mongodb服务开机启动" class="headerlink" title="5.配置mongodb服务开机启动"></a>5.配置mongodb服务开机启动</h2><h3 id="1-设置mongodb-service开机服务启动"><a href="#1-设置mongodb-service开机服务启动" class="headerlink" title="1.设置mongodb.service开机服务启动"></a>1.设置mongodb.service开机服务启动</h3><pre><code class="hljs routeros">cd /lib/systemd/systemvim mongodb.service添加如下配置--记得路劲和自己的配置路径要一致[Unit]<span class="hljs-attribute">Description</span>=mongodb<span class="hljs-attribute">After</span>=network.target remote-fs.target nss-lookup.target[Service]<span class="hljs-attribute">Type</span>=forking<span class="hljs-attribute">ExecStart</span>=/usr/local/mongodb/mongodb/bin/mongod --config /usr/local/mongodb/mongodb/mongodb.conf<span class="hljs-attribute">ExecReload</span>=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><span class="hljs-attribute">ExecStop</span>=/usr/local/mongodb/mongodb/bin/mongod --shutdown --config /usr/local/mongodb/mongodb/mongodb.conf<span class="hljs-attribute">PrivateTmp</span>=<span class="hljs-literal">true</span>[Install]<span class="hljs-attribute">WantedBy</span>=multi-user.target</code></pre><p>   然后设置mongodb.service权限</p><pre><code class="hljs css"><span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">mongodb</span><span class="hljs-selector-class">.service</span></code></pre><p>​    #启动服务 </p><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mongodb.service  </code></pre><p>   #停止服务</p><pre><code class="hljs arduino">systemctl <span class="hljs-built_in">stop</span> mongodb.service</code></pre><p>   #添加开机自启动</p><pre><code class="hljs routeros">systemctl <span class="hljs-builtin-name">enable</span> mongodb.service</code></pre><p>   #重启服务</p><pre><code class="hljs css"><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">restart</span> <span class="hljs-selector-tag">mongodb</span><span class="hljs-selector-class">.service</span></code></pre><h3 id="2）添加环境变量"><a href="#2）添加环境变量" class="headerlink" title="2）添加环境变量"></a>2）添加环境变量</h3><pre><code class="hljs routeros">1、直接用export命令：   <span class="hljs-builtin-name">export</span>  <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:/usr/local/mongodb/bin2、修改profile文件：   cat &gt;&gt;/etc/profile&lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span>   <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:/usr/local/mongodb/bin&quot;</span>   EOF   刷新profile文件：   source /etc/profile3、 修改.bashrc文件：     cat &gt;&gt;/root/.bashrc&lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span>       <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:/usr/local/mongodb/bin&quot;</span>       EOF</code></pre><p>   上述三步依次执行完毕，环境变量配置完成！！！！</p><p>   重启服务器，输入mongo 回车就有了。。。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>mongo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mongo常用查询</title>
    <link href="/2020/08/10/Mongo%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2/"/>
    <url>/2020/08/10/Mongo%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="查询并显示集合中的数据"><a href="#查询并显示集合中的数据" class="headerlink" title="查询并显示集合中的数据"></a>查询并显示集合中的数据</h4><pre><code class="hljs javascript">db.getCollection(<span class="hljs-string">&#x27;pixiv&#x27;</span>).aggregate([    &#123; <span class="hljs-attr">$group</span>: &#123; <span class="hljs-attr">_id</span> : <span class="hljs-string">&#x27;$author.id&#x27;</span>, <span class="hljs-attr">count</span>: &#123; <span class="hljs-attr">$sum</span> : <span class="hljs-number">1</span> &#125; &#125; &#125;,    &#123; <span class="hljs-attr">$match</span>: &#123; <span class="hljs-attr">count</span>: &#123; <span class="hljs-attr">$gt</span> : <span class="hljs-number">1</span>&#125; &#125; &#125;])</code></pre><h4 id="查询条件为数据中对象某个属性值"><a href="#查询条件为数据中对象某个属性值" class="headerlink" title="查询条件为数据中对象某个属性值"></a>查询条件为数据中对象某个属性值</h4><pre><code class="hljs javascript">db.getCollection(<span class="hljs-string">&#x27;pixiv&#x27;</span>).find(&#123;<span class="hljs-string">&quot;author.id&quot;</span>:<span class="hljs-number">35562628</span>&#125;)</code></pre><h4 id="命令导出数据库"><a href="#命令导出数据库" class="headerlink" title="命令导出数据库"></a>命令导出数据库</h4><pre><code class="hljs jboss-cli"><span class="hljs-string">./mongoexport</span> -h 127.0.0.1 <span class="hljs-params">--port</span> 50003 -d Images -c picjson -o <span class="hljs-string">/home/picjson.js</span> <span class="hljs-params">--type</span> json -f <span class="hljs-string">&quot;_id,tags,pid,p,uid,title,author,url,r18,width,height,_v&quot;</span></code></pre><h4 id="命令导入数据库"><a href="#命令导入数据库" class="headerlink" title="命令导入数据库"></a>命令导入数据库</h4><pre><code class="hljs jboss-cli"><span class="hljs-string">./mongoimport</span> -h 127.0.0.1 <span class="hljs-params">--port</span> 50003 -d Pixiv -c picjson <span class="hljs-params">--file</span> <span class="hljs-string">/home/picjson.js</span> <span class="hljs-params">--type</span> json</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Navicat12激活</title>
    <link href="/2020/08/10/Navicat12%E6%BF%80%E6%B4%BB/"/>
    <url>/2020/08/10/Navicat12%E6%BF%80%E6%B4%BB/</url>
    
    <content type="html"><![CDATA[<p>本教程更新时间：2019-4-19 16:37:38</p><p><a href="https://www.52pojie.cn/thread-934566-1-1.html">https://www.52pojie.cn/thread-934566-1-1.html</a></p><p>本文所需软件<br>1、navicat_premium原版安装包<br>官网下载地址：<a href="https://www.navicat.com.cn/download/navicat-premium">https://www.navicat.com.cn/download/navicat-premium</a><br>2、注册工具<br>github地址：<a href="https://github.com/DoubleLabyrinth/navicat-keygen">https://github.com/DoubleLabyrinth/navicat-keygen</a><br>以上本文所需文件已整理到网盘，自取：<br>链接：<a href="https://pan.baidu.com/s/1MDuDFBsS0EI-rz4WkQ7kJw">https://pan.baidu.com/s/1MDuDFBsS0EI-rz4WkQ7kJw</a><br>提取码：gdn5<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>~<del>~ 分割线</del></p><p>好了，教程开始<br><strong>1、安装原版navicat</strong><br>正常安装，一直下一步，直到安装成功，这个我就不截图了。<br>默认安装路径是：C:\Program Files\PremiumSoft\Navicat Premium 12<br><strong>2、开始激活</strong><br><strong>2.1、首先需要先替换掉Navicat激活公钥</strong><br>a、解压navicat-keygen-for-x64.zip文件，开始执行cmd命令<br>b、打开命令提示符（管理员），win+x<br>(因为我是安装在了C盘，文件写入需要管理员权限，如果安装在别的盘，普通的命令提示符就行，或者在解压文件夹按住shift点右键，也能选择命令提示符打开)</p><p><img src="https://attach.52pojie.cn/forum/201904/19/160557tm0i0zk08q0a9f99.png" alt="img"></p><p>c、进入到navicat-keygen-for-x64.zip文件的解压目录，执行如下命令</p><pre><code class="hljs latex">cd [解压目录].<span class="hljs-tag">\<span class="hljs-name">navicat</span></span>-patcher.exe &quot;C:<span class="hljs-tag">\<span class="hljs-name">Program</span></span> Files<span class="hljs-tag">\<span class="hljs-name">PremiumSoft</span></span><span class="hljs-tag">\<span class="hljs-name">Navicat</span></span> Premium 12&quot;</code></pre><p><img src="https://attach.52pojie.cn/forum/201904/19/161149zmt1zxgarvrqatj2.png" alt="img"></p><p>d、回车继续，一顿飘屏猛如虎，好的，出现这样的提示表示替换成功。成功之后会在当前文件夹下生成RegPrivateKey.pem文件</p><p><img src="https://attach.52pojie.cn/forum/201904/19/161405f9gdzno4z3d4ob5d.png" alt="img"></p><p><strong>2.2、接下来我们就要开始生成序列号和激活码</strong><br>a、和替换公钥类似，执行如下命令</p><pre><code class="hljs css">.\<span class="hljs-selector-tag">navicat-keygen</span><span class="hljs-selector-class">.exe</span> <span class="hljs-selector-tag">-text</span> .\<span class="hljs-selector-tag">RegPrivateKey</span><span class="hljs-selector-class">.pem</span></code></pre><p>b、接下来你会被要求选择Navicat产品类别、语言以及输入主版本号。之后会随机生成一个序列号。</p><p><img src="https://attach.52pojie.cn/forum/201904/19/162347wpp8fo7pktogsavt.png" alt="img"></p><p>c、得到序列号，复制下来，注意：<strong>窗口不要关闭</strong></p><p>d、此时打开安装的原版Navicat，第一次打开会出现如下提示，点击注册按钮，进入注册页面</p><p><img src="https://attach.52pojie.cn/forum/201904/19/155913jd4w4coog0sx25n5.png" alt="img"></p><p><img src="https://attach.52pojie.cn/forum/201904/19/162730x44dr8xzfg77zwbj.png" alt="img"></p><p>e、接下来输入用户名，组织名和请求码，然后回车两次，获得激活码</p><p><img src="https://attach.52pojie.cn/forum/201904/19/163431if96i5uu2610fs0s.png" alt="img"></p><p>f、把获得到的激活码粘贴到navcat中，点击激活，激活成功。</p><p><img src="https://attach.52pojie.cn/forum/201904/19/163431yrza4l445rprd888.png" alt="img"></p><p><strong>附上激活成功的截图。</strong></p><p><img src="https://attach.52pojie.cn/forum/201904/19/163432k6rbb5wdbb116pp2.png" alt="img"></p><p><img src="https://attach.52pojie.cn/forum/201904/19/164734oam0stsajsuotaja.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Navicat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQ5.7脚本安装</title>
    <link href="/2020/08/10/Mysql5.7%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <url>/2020/08/10/Mysql5.7%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#压缩包目录</span>data=<span class="hljs-string">&quot;home/mysql&quot;</span>echo <span class="hljs-string">&quot;将mysql压缩包解压&quot;</span>tar xvf mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>-linux-glibc2.<span class="hljs-number">12</span>-x86_64.tar.gz echo <span class="hljs-string">&quot;新建mysql文件夹&quot;</span><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/&quot;</span><span class="hljs-variable">$&#123;data&#125;</span><span class="hljs-string">&quot;/mysql-5.7.30-linux-glibc2.12-x86_64&quot;</span> ]; then        echo <span class="hljs-string">&quot;mysql解压未完成&quot;</span>        <span class="hljs-keyword">exit</span>fiecho <span class="hljs-string">&quot;mysql解压完成修改文件夹&quot;</span>mv mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>-linux-glibc2.<span class="hljs-number">12</span>-x86_64 mysqlmv mysql <span class="hljs-regexp">/usr/</span>localecho <span class="hljs-string">&quot;mysql解压完成&quot;</span>echo <span class="hljs-string">&quot;切换目录&quot;</span>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>echo <span class="hljs-string">&quot;新建数据库data目录&quot;</span>mkdir dataecho <span class="hljs-string">&quot;初始化mysql&quot;</span>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<span class="hljs-regexp">/mysqld --initialize --user=root --basedir=/u</span>sr<span class="hljs-regexp">/local/my</span>sql --datadir=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>dataecho <span class="hljs-string">&quot;修改配置文件&quot;</span>cat <span class="hljs-regexp">/dev/</span>null &gt; <span class="hljs-regexp">/etc/my</span>.cnf<span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;/etc/my.cnf&quot;</span> ]; then        mv <span class="hljs-regexp">/etc/my</span>.cnf <span class="hljs-regexp">/etc/my</span>.cnf.bakfi<span class="hljs-comment">#跳过密码验证</span>echo <span class="hljs-string">&#x27;[mysqld]&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;bind-address=0.0.0.0&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;basedir = /usr/local/mysql&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;datadir = /usr/local/mysql/data&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;socket=/tmp/mysql.sock&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;user=root&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;port=3306&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;character-set-server=utf8&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnf<span class="hljs-comment">#echo &#x27;skip-grant-tables&#x27; &gt;&gt; /etc/my.cnf</span>echo <span class="hljs-string">&#x27;# Disabling symbolic-links is recommended to prevent assorted security risks&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;symbolic-links=0&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;# skip-grant-tables&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;[mysqld_safe]&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;log-error=/var/log/mysqld.log&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;pid-file=/var/run/mysqld/mysqld.pid&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;!includedir /etc/my.cnf.d&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;[client]&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;user=root&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;password=123456&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;port=3306&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&quot;配置修改完成，将mysql加入服务&quot;</span>cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>support-files<span class="hljs-regexp">/mysql.server /</span>etc<span class="hljs-regexp">/init.d/my</span>sqld<span class="hljs-comment">#chmod +x /etc/init.d/mysqld</span>echo <span class="hljs-string">&quot;添加mysql指令&quot;</span>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<span class="hljs-regexp">/mysql  /u</span>sr<span class="hljs-regexp">/local/</span>binln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>bin<span class="hljs-regexp">/mysqladmin  /u</span>sr<span class="hljs-regexp">/local/</span>bin<span class="hljs-comment">#echo &quot;服务启动&quot;</span>sudo service mysqld startsudo systemctl restart mysqldsystemctl status mysqld<span class="hljs-comment">#开启端口</span>firewall-cmd --zone=public --add-port=<span class="hljs-number">3306</span>/tcp --permanentsystemctl restart firewalld.service<span class="hljs-comment">#修改root初始化密码</span>mysql -uroot -p &lt; <span class="hljs-regexp">/home/mi</span>rror<span class="hljs-regexp">/mysql/i</span>nit.sql<span class="hljs-comment">#关闭跳过密码验证</span>cat <span class="hljs-regexp">/dev/</span>null &gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;[mysqld]&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;bind-address=0.0.0.0&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;basedir=/usr/local/mysql&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;datadir=/usr/local/mysql/data&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;socket=/tmp/mysql.sock&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;user=root&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;port=3306&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;character-set-server=utf8&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;#skip-grant-tables&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;# Disabling symbolic-links is recommended to prevent assorted security risks&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;symbolic-links=0&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;[mysqld_safe]&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;log-error=/var/log/mysqld.log&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;pid-file=/var/run/mysqld/mysqld.pid&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfecho <span class="hljs-string">&#x27;!includedir /etc/my.cnf.d&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/my</span>.cnfsudo systemctl restart mysqldsudo systemctl status mysqld</code></pre><p>1、 修改用户密码（init.sql）</p><pre><code class="hljs sql"><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;<span class="hljs-comment">#修改root密码为root</span><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;root&#x27;</span>;  <span class="hljs-comment">#刷新权限</span><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;</code></pre><p>2、远程登录</p><pre><code class="hljs routeros">use mysql;update<span class="hljs-built_in"> user </span><span class="hljs-builtin-name">set</span> host = <span class="hljs-string">&#x27;%&#x27;</span> where<span class="hljs-built_in"> user </span>= <span class="hljs-string">&#x27;root&#x27;</span>;<span class="hljs-comment">#刷新权限</span>flush privileges;</code></pre><p>3、添加用户</p><pre><code class="hljs sql"><span class="hljs-comment">#添加用户“xiao&quot;，密码为: aquatic@zkcm</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;fx&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;fx@zkcm&#x27;</span>;<span class="hljs-comment">#赋权所有权限，并且可以查看所有表</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;xiao&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<span class="hljs-comment">#赋权test数据库所有权限，只可以使用数据库test</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> fx.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;fx&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<span class="hljs-comment">#刷新权限</span><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;</code></pre><p>4、查找并删除mysql有关的文件</p><pre><code class="hljs swift"><span class="hljs-built_in">find</span> / -name mysqlrm -rf 上边查找到的路径，多个路径用空格隔开#或者下边一条命令即可<span class="hljs-built_in">find</span> / -name mysql|xargs rm -rf</code></pre><p>5、建库</p><pre><code class="hljs routeros">CREATE DATABASE `fx`<span class="hljs-built_in"> DEFAULT </span>CHARACTER <span class="hljs-builtin-name">SET</span> utf8 COLLATE utf8_general_ci;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware Workstation 15 Pro 密钥</title>
    <link href="/2020/08/10/VMware%20Workstation%2015%20Pro%20%E5%AF%86%E9%92%A5/"/>
    <url>/2020/08/10/VMware%20Workstation%2015%20Pro%20%E5%AF%86%E9%92%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="VMware-Workstation-15-Pro-密钥"><a href="#VMware-Workstation-15-Pro-密钥" class="headerlink" title="VMware Workstation 15 Pro 密钥"></a>VMware Workstation 15 Pro 密钥</h1><pre><code class="hljs apache"><span class="hljs-attribute">UG5J2</span>-<span class="hljs-number">0</span>ME<span class="hljs-number">12</span>-M<span class="hljs-number">89</span>WY-NPWXX-WQH<span class="hljs-number">88</span><span class="hljs-attribute">GA590</span>-<span class="hljs-number">86</span>Y<span class="hljs-number">05</span>-<span class="hljs-number">4806</span>Y-X<span class="hljs-number">4</span>PEE-ZV<span class="hljs-number">8</span>E<span class="hljs-number">0</span><span class="hljs-attribute">YA18K</span>-<span class="hljs-number">0</span>WY<span class="hljs-number">8</span>P-H<span class="hljs-number">85</span>DY-L<span class="hljs-number">4</span>NZG-X<span class="hljs-number">7</span>RAD<span class="hljs-attribute">UA5DR</span>-<span class="hljs-number">2</span>ZD<span class="hljs-number">4</span>H-<span class="hljs-number">089</span>FY-<span class="hljs-number">6</span>YQ<span class="hljs-number">5</span>T-YPRX<span class="hljs-number">6</span><span class="hljs-attribute">B806Y</span>-<span class="hljs-number">86</span>Y<span class="hljs-number">05</span>-GA<span class="hljs-number">590</span>-X<span class="hljs-number">4</span>PEE-ZV<span class="hljs-number">8</span>E<span class="hljs-number">0</span><span class="hljs-attribute">ZF582</span>-<span class="hljs-number">0</span>NW<span class="hljs-number">5</span>N-H<span class="hljs-number">8</span>D<span class="hljs-number">2</span>P-<span class="hljs-number">0</span>XZEE-Z<span class="hljs-number">22</span>VA</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>VMware Workstation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue代理</title>
    <link href="/2020/08/10/Vue%E7%9B%B8%E5%85%B3/"/>
    <url>/2020/08/10/Vue%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h4 id="资源路径代理（图片等）"><a href="#资源路径代理（图片等）" class="headerlink" title="资源路径代理（图片等）"></a>资源路径代理（图片等）</h4><h5 id="修改index-js"><a href="#修改index-js" class="headerlink" title="修改index.js"></a>修改index.js</h5><pre><code class="hljs dts"><span class="hljs-symbol">proxyTable:</span> &#123;    <span class="hljs-string">&quot;/resources&quot;</span>: &#123;<span class="hljs-symbol">        target:</span> <span class="hljs-string">&quot;http://localhost:9100/&quot;</span>, <span class="hljs-comment">//这里填写后端存放资源文件的域名</span><span class="hljs-symbol">        ws:</span> true,<span class="hljs-symbol">        changeOrigin:</span> true, 是否跨域        <span class="hljs-comment">// 如果接口中是没有api的，那就直接置空（如上）。如果接口中有api，就需要写成&#123;‘^/api’:‘/api’&#125;</span><span class="hljs-symbol">        pathRewrite:</span> &#123;        <span class="hljs-string">&quot;/api&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>    &#125;&#125;,</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMWare Centos7 NAT模式</title>
    <link href="/2020/08/10/%E8%99%9A%E6%8B%9F%E6%9C%BANAT%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/08/10/%E8%99%9A%E6%8B%9F%E6%9C%BANAT%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1、VMware设置"><a href="#1、VMware设置" class="headerlink" title="1、VMware设置"></a>1、VMware设置</h2><p>点击 编辑 -&gt; 虚拟网络编辑器 -&gt; 更改设置 </p><p><img src="D:\Photos\1.jpg" alt="img"></p><p>选择 NAT模式，具体勾选如下：</p><p><img src="D:\Photos\2.jpg" alt="img"></p><p>打开 NAT设置，记录子网掩码，网关ip</p><p><img src="D:\Photos\3.jpg" alt="img"></p><p>记录网段信息</p><p><img src="D:\Photos\ccd0b119b11e4b9bb02d3202286a76ab.jpg" alt="img"></p><h2 id="2、登录虚拟机"><a href="#2、登录虚拟机" class="headerlink" title="2、登录虚拟机"></a>2、登录虚拟机</h2><p>root用户登录虚拟机，输入以命令，编辑保存</p><pre><code class="hljs lsl">vi /etc/sysconfig/network-scripts/ifcfg-ens33BOOTPROTO=<span class="hljs-string">&quot;static&quot;</span>ONBOOT=yesIPADDR=<span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.130</span>METMASK=<span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span>GATEWAY=<span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.2</span>DNS=<span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span>vi /etc/resolv.conf 编辑DNS，填入网关的IPnameserver <span class="hljs-number">192.168</span><span class="hljs-number">.190</span><span class="hljs-number">.2</span></code></pre><p>输入一下命令，重启network</p><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart network</span></code></pre><h2 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h2><p>  输入以下命令，查看结果</p><pre><code class="hljs css"><span class="hljs-selector-tag">ping</span> <span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node</title>
    <link href="/2020/08/10/Node/"/>
    <url>/2020/08/10/Node/</url>
    
    <content type="html"><![CDATA[<h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><pre><code class="hljs arduino">持久使用npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span>配置后可通过下面方式来验证是否成功npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">get</span> registry</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SELinux</title>
    <link href="/2020/08/10/SELinux/"/>
    <url>/2020/08/10/SELinux/</url>
    
    <content type="html"><![CDATA[<h4 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h4><pre><code class="hljs routeros">查看SELinux状态：1、/usr/sbin/sestatus -v      ##如果SELinux status参数为enabled即为开启状态SELinux status:                 enabled2、getenforce                 ##也可以用这个命令检查关闭SELinux：1、临时关闭（不用重启机器）：setenforce 0 ##设置SELinux 成为permissive模式 √setenforce 1 ##设置SELinux 成为enforcing模式2、修改配置文件需要重启机器：修改/etc/selinux<span class="hljs-built_in">/config </span>文件将<span class="hljs-attribute">SELINUX</span>=enforcing改为SELINUX=disabled重启机器即可</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Consul</title>
    <link href="/2020/08/10/Consul/"/>
    <url>/2020/08/10/Consul/</url>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>1.下载</p><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://releases.hashicorp.com/consul/<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>/consul_<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>_linux_amd<span class="hljs-number">64</span>.zip <span class="hljs-attribute">curl</span> https://releases.hashicorp.com/consul/<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>/consul_<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span>_linux_amd<span class="hljs-number">64</span>.zip &gt; consul.zip</code></pre><p><strong>ps:下载过慢请试着直接浏览器下载，再用FTP工具上传至服务器</strong></p><p>2.解压</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>安装unzip    yum -y install zip unzip<span class="hljs-number">2.</span>解压    unzip consul.zip</code></pre><h4 id="ui界面启动"><a href="#ui界面启动" class="headerlink" title="ui界面启动"></a>ui界面启动</h4><pre><code class="hljs angelscript">./consul agent -dev  -client <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> -ui访问 IP:<span class="hljs-number">8500</span>记得开端口，或者把防火墙关闭</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>httpd</title>
    <link href="/2020/08/10/httpd/"/>
    <url>/2020/08/10/httpd/</url>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> -y install httpd.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span></code></pre><h4 id="配置文件-位置：-etc-httpd-conf-httpd-conf"><a href="#配置文件-位置：-etc-httpd-conf-httpd-conf" class="headerlink" title="配置文件(位置：/etc/httpd/conf/httpd.conf)"></a>配置文件(位置：/etc/httpd/conf/httpd.conf)</h4><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">Listen</span></span> <span class="hljs-number">80</span><span class="hljs-attribute"><span class="hljs-nomarkup">Listen</span></span> <span class="hljs-number">192.168.31.30:8080</span><span class="hljs-section">&lt;virtualhost <span class="hljs-number">192.168.31.30:8080</span>&gt;</span>        <span class="hljs-attribute"><span class="hljs-nomarkup">Documentroot</span></span> /home/diskdata/ftp/minioData        <span class="hljs-section">&lt;Directory <span class="hljs-string">&quot;/home/diskdata/ftp/minioData&quot;</span>&gt;</span>            <span class="hljs-attribute"><span class="hljs-nomarkup">Options</span></span> FollowSymLinks            <span class="hljs-attribute">AllowOverride</span> none            <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted        <span class="hljs-section">&lt;/Directory&gt;</span><span class="hljs-section">&lt;/virtualhost&gt;</span></code></pre><h4 id="第一、启动、终止、重启"><a href="#第一、启动、终止、重启" class="headerlink" title="第一、启动、终止、重启"></a>第一、启动、终止、重启</h4><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> httpd.service <span class="hljs-comment">#启动</span>systemctl <span class="hljs-literal">stop</span> httpd.service <span class="hljs-comment">#停止</span>systemctl restart httpd.service <span class="hljs-comment">#重启</span></code></pre><h4 id="第二、设置开机启动-关闭"><a href="#第二、设置开机启动-关闭" class="headerlink" title="第二、设置开机启动/关闭"></a>第二、设置开机启动/关闭</h4><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> httpd.service <span class="hljs-comment">#开机启动</span>systemctl <span class="hljs-built_in">disable</span> httpd.service <span class="hljs-comment">#开机不启动</span></code></pre><h4 id="第三、检查httpd状态"><a href="#第三、检查httpd状态" class="headerlink" title="第三、检查httpd状态"></a>第三、检查httpd状态</h4><pre><code class="hljs css"><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">status</span> <span class="hljs-selector-tag">httpd</span><span class="hljs-selector-class">.service</span></code></pre><h4 id="解决启动Apache遇到的问题Permission-denied-AH00072-make-sock-could-not-bind-to-address-0-0-0-0-8888"><a href="#解决启动Apache遇到的问题Permission-denied-AH00072-make-sock-could-not-bind-to-address-0-0-0-0-8888" class="headerlink" title="解决启动Apache遇到的问题Permission denied: AH00072: make_sock: could not bind to address 0.0.0.0:8888"></a>解决启动Apache遇到的问题Permission denied: AH00072: make_sock: could not bind to address 0.0.0.0:8888</h4><pre><code class="hljs yaml"><span class="hljs-number">1</span><span class="hljs-string">.可能原因：SELinux限制了Apache的端口设置</span><span class="hljs-number">2</span><span class="hljs-string">.关闭SELinux</span><span class="hljs-string">setenforce</span> <span class="hljs-number">0</span> <span class="hljs-comment">##设置SELinux 成为permissive模式 √</span><span class="hljs-number">3</span><span class="hljs-string">.</span><span class="hljs-string">//安装semanage</span><span class="hljs-string">yum</span> <span class="hljs-string">provides</span> <span class="hljs-string">/usr/sbin/semanage</span><span class="hljs-string">yum</span> <span class="hljs-string">-y</span> <span class="hljs-string">install</span> <span class="hljs-string">policycoreutils-python</span><span class="hljs-string">//查看默认允许的端口</span><span class="hljs-string">semanage</span> <span class="hljs-string">port</span> <span class="hljs-string">-l</span> <span class="hljs-string">|</span> <span class="hljs-string">grep</span> <span class="hljs-string">-w</span> <span class="hljs-string">http_port_t</span><span class="hljs-string">//</span> <span class="hljs-string">http_port_t</span>  <span class="hljs-string">tcp</span> <span class="hljs-number">80</span><span class="hljs-string">,</span> <span class="hljs-number">81</span><span class="hljs-string">,</span> <span class="hljs-number">443</span><span class="hljs-string">,</span> <span class="hljs-number">488</span><span class="hljs-string">,</span> <span class="hljs-number">8008</span><span class="hljs-string">,</span> <span class="hljs-number">8009</span><span class="hljs-string">,</span> <span class="hljs-number">8443</span><span class="hljs-string">,</span> <span class="hljs-number">9000</span><span class="hljs-string">//使用semanage添加apache侦听的端口</span><span class="hljs-string">semanage</span> <span class="hljs-string">port</span> <span class="hljs-string">-a</span> <span class="hljs-string">-t</span> <span class="hljs-string">http_port_t</span> <span class="hljs-string">-p</span> <span class="hljs-string">tcp</span> <span class="hljs-number">8888</span><span class="hljs-string">//启动apache</span><span class="hljs-string">systemctl</span> <span class="hljs-string">start</span> <span class="hljs-string">httpd</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>httpd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 7中添加一个新用户并授权</title>
    <link href="/2020/08/10/Centos7%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/"/>
    <url>/2020/08/10/Centos7%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS-7中添加一个新用户并授权"><a href="#CentOS-7中添加一个新用户并授权" class="headerlink" title="CentOS 7中添加一个新用户并授权"></a>CentOS 7中添加一个新用户并授权</h1><h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h2><p>创建一个用户名为：linuxidc</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># adduser linuxidc</span></code></pre><p>为这个用户初始化密码，linux会判断密码复杂度，不过可以强行忽略：</p><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># passwd linuxidc</span>更改用户 zhangbiao 的密码 。新的 密码：无效的密码： 密码未通过字典检查 - 过于简单化/系统化重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。</code></pre><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>个人用户的权限只可以在本home下有完整权限，其他目录要看别人授权。而经常需要root用户的权限，这时候sudo可以化身为root来操作。我记得我曾经sudo创建了文件，然后发现自己并没有读写权限，因为查看权限是root创建的。</p><p>新创建的用户并不能使用sudo命令，需要给他添加授权。</p><p>sudo命令的授权管理是在sudoers文件里的。可以看看sudoers：</p><pre><code class="hljs awk">[root@localhost ~]<span class="hljs-comment"># sudoers</span>bash: sudoers: 未找到命令...[root@localhost ~]<span class="hljs-comment"># whereis sudoers</span>sudoers: <span class="hljs-regexp">/etc/</span>sudoers <span class="hljs-regexp">/etc/</span>sudoers.d <span class="hljs-regexp">/usr/</span>libexec<span class="hljs-regexp">/sudoers.so /u</span>sr<span class="hljs-regexp">/share/m</span>an<span class="hljs-regexp">/man5/</span>sudoers.<span class="hljs-number">5</span>.gz</code></pre><p>找到这个文件位置之后再查看权限：</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>localhost ~]# ls -l /etc/sudoers-r--r----- <span class="hljs-number">1</span> root root <span class="hljs-number">4251</span> <span class="hljs-number">9</span>月  <span class="hljs-number">25</span> <span class="hljs-number">15</span>:<span class="hljs-number">08</span> /etc/sudoers</code></pre><p>是的，只有只读的权限，如果想要修改的话，需要先添加w权限：</p><pre><code class="hljs livescript">[root@localhost ~]<span class="hljs-comment"># chmod -v u+w /etc/sudoers</span>mode <span class="hljs-keyword">of</span> <span class="hljs-string">&quot;/etc/sudoers&quot;</span> changed <span class="hljs-keyword">from</span> <span class="hljs-number">0440</span> (r--r-----) <span class="hljs-keyword">to</span> <span class="hljs-number">0640</span> (rw-r-----)</code></pre><p>然后就可以添加内容了，在下面的一行下追加新增的用户：</p><pre><code class="hljs pgsql">[root@localhost ~]# vim /etc/sudoers## Allow root <span class="hljs-keyword">to</span> run <span class="hljs-keyword">any</span> commands anywher  root    <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)       <span class="hljs-keyword">ALL</span>  linuxidc  <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)       <span class="hljs-keyword">ALL</span>  #这个是新增的用户 默认<span class="hljs-number">5</span>分钟后刚才输入的sudo密码过期，下次sudo需要重新输入密码，如果觉得在sudo的时候输入密码麻烦，把刚才的输入换成如下内容即可：linuxidc <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>) NOPASSWD:<span class="hljs-keyword">ALL</span></code></pre><p>wq保存退出，这时候要记得将写权限收回：</p><pre><code class="hljs livescript">[root@localhost ~]<span class="hljs-comment"># chmod -v u-w /etc/sudoers</span>mode <span class="hljs-keyword">of</span> <span class="hljs-string">&quot;/etc/sudoers&quot;</span> changed <span class="hljs-keyword">from</span> <span class="hljs-number">0640</span> (rw-r-----) <span class="hljs-keyword">to</span> <span class="hljs-number">0440</span> (r--r-----)</code></pre><p>这时候使用新用户登录，使用sudo：</p><pre><code class="hljs routeros">[linuxidc@localhost ~]$ sudo cat /etc/passwd[sudo] password <span class="hljs-keyword">for</span> linuxidc: We trust you have received the usual lecture <span class="hljs-keyword">from</span> the local SystemAdministrator. It usually boils down <span class="hljs-keyword">to</span> these three things:    #1) Respect the privacy of others.    #2) Think before you type.    #3) With great power comes great responsibility.</code></pre><p>第一次使用会提示你，你已经化身超人，身负责任。而且需要输入密码才可以下一步。如果不想需要输入密码怎么办，将最后一个ALL修改成NOPASSWD: ALL。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装Node+Npm</title>
    <link href="/2020/08/10/Centos7%E5%AE%89%E8%A3%85Node+Npm/"/>
    <url>/2020/08/10/Centos7%E5%AE%89%E8%A3%85Node+Npm/</url>
    
    <content type="html"><![CDATA[<h4 id="Centos7安装Node-Npm"><a href="#Centos7安装Node-Npm" class="headerlink" title="Centos7安装Node+Npm"></a>Centos7安装Node+Npm</h4><ul><li>node官网下载node（**Linux Binaries (x64)**）安装包 <a href="https://links.jianshu.com/go?to=https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></li><li>执行解压操作</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">-xvf</span> <span class="hljs-selector-tag">node-v10</span><span class="hljs-selector-class">.16</span><span class="hljs-selector-class">.3-linux-x64</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.xz</span> </code></pre><h5 id="确认一下nodejs下bin目录是否有node-和npm文件-如果有执行软连接，如果没有重新下载"><a href="#确认一下nodejs下bin目录是否有node-和npm文件-如果有执行软连接，如果没有重新下载" class="headerlink" title="确认一下nodejs下bin目录是否有node 和npm文件,如果有执行软连接，如果没有重新下载"></a><strong>确认一下nodejs下bin目录是否有node 和npm文件,如果有执行软连接，如果没有重新下载</strong></h5><ul><li>建立软连接，变为全局,对应自己路径</li></ul><pre><code class="hljs bash">ln -s /usr/<span class="hljs-built_in">local</span>/src/node-v10.16.3-linux-x64/bin/npm  /usr/<span class="hljs-built_in">local</span>/bin/(此处不改)ln -s /usr/<span class="hljs-built_in">local</span>/src/node-v10.16.3-linux-x64/bin/node /usr/<span class="hljs-built_in">local</span>/bin/</code></pre><ul><li>验证node是否生效</li></ul><pre><code class="hljs undefined">npm -v node -v</code></pre><h4 id="npm换源"><a href="#npm换源" class="headerlink" title="npm换源"></a>npm换源</h4><pre><code class="hljs arduino">npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><span class="hljs-comment">// 配置后可通过下面方式来验证是否成功</span>npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">get</span> registry</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>node</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx脚本安装</title>
    <link href="/2020/08/10/Nginx%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <url>/2020/08/10/Nginx%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><pre><code class="hljs properties"><span class="hljs-attr">1</span> <span class="hljs-string">gcc 安装</span><span class="hljs-attr">yum</span> <span class="hljs-string">install -y gcc gcc-c++</span><span class="hljs-attr">2</span> <span class="hljs-string">PCRE pcre-devel 安装</span><span class="hljs-attr">yum</span> <span class="hljs-string">install -y pcre pcre-devel</span><span class="hljs-attr">3</span> <span class="hljs-string">zlib 安装</span><span class="hljs-attr">yum</span> <span class="hljs-string">install -y zlib zlib-devel</span><span class="hljs-attr">4</span> <span class="hljs-string">OpenSSL 安装</span><span class="hljs-attr">yum</span> <span class="hljs-string">install -y openssl openssl-devel</span></code></pre><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment">#安装目录</span>data=<span class="hljs-string">&quot;usr/local&quot;</span><span class="hljs-comment">#压缩包目录</span>default=<span class="hljs-string">&quot;home/mirror/nginx&quot;</span><span class="hljs-comment">#安装依赖</span><span class="hljs-comment">#1 gcc 安装</span>yum install -y gcc gcc-c++<span class="hljs-comment">#2 PCRE pcre-devel 安装</span>yum install -y pcre pcre-devel<span class="hljs-comment">#3 zlib 安装</span>yum install -y zlib zlib-devel<span class="hljs-comment">#4 OpenSSL 安装</span>yum install -y openssl openssl-devel<span class="hljs-comment">## 解压</span>tar -xvf ./nginx-1.19.1.tar.gz -C /<span class="hljs-variable">$&#123;data&#125;</span>/mv /<span class="hljs-variable">$&#123;data&#125;</span>/nginx-1.19.1 /<span class="hljs-variable">$&#123;data&#125;</span>/nginx<span class="hljs-comment">##进入nginx目录</span><span class="hljs-built_in">cd</span> /<span class="hljs-variable">$&#123;data&#125;</span>/nginx<span class="hljs-comment">## 配置</span>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/nginx<span class="hljs-comment"># make</span>makemake installrm -rf logsmkdir logschmod 700 logs<span class="hljs-comment"># cd到刚才配置的安装目录/usr/loca/nginx/</span><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/nginx./sbin/nginx -t<span class="hljs-comment">#在文件的最后一行加入文件引入</span><span class="hljs-built_in">cd</span> confsed -i <span class="hljs-string">&#x27;$d&#x27;</span> nginx.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;include /&#x27;</span><span class="hljs-variable">$&#123;default&#125;</span><span class="hljs-string">&#x27;/default.conf;&#x27;</span> &gt;&gt; nginx.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&#125;&#x27;</span> &gt;&gt; nginx.conffirewall-cmd --zone=public --add-port=80/tcp --permanentsystemctl restart firewalld.service</code></pre><p>default.conf</p><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span>  /backApi &#123;    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:9100</span>;&#125;<span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span> default_server;    <span class="hljs-attribute">server_name</span>  www.xxxx.com;    <span class="hljs-attribute">index</span> index.html;    <span class="hljs-attribute">location</span> / &#123;        <span class="hljs-attribute">alias</span>   /root;        <span class="hljs-attribute">index</span>  index.html index.htm;    &#125;    <span class="hljs-attribute">location</span> /api &#123;        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/api/(.*)$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;        <span class="hljs-attribute">proxy_pass</span>   http://backApi;        <span class="hljs-attribute">proxy_set_header</span>   Host             <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>;        <span class="hljs-attribute">proxy_set_header</span>   X-Real-IP        <span class="hljs-variable">$remote_addr</span>;        <span class="hljs-attribute">proxy_set_header</span>   X-Forwarded-For  <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;        <span class="hljs-attribute">proxy_set_header</span>   Proxy-Client-IP  <span class="hljs-variable">$remote_addr</span>;    &#125;&#125;<span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span>  <span class="hljs-number">8888</span>    server_name  www.xxxx.com;    <span class="hljs-attribute">location</span> /wqe/ &#123;        <span class="hljs-attribute">alais</span> /home/xxxx    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Centos7</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/08/07/hello-world/"/>
    <url>/2020/08/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
