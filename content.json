{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-08-05T15:56:25.000Z","updated":"2020-08-07T09:00:23.494Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"没什么好说的，随便记录点东西"},{"title":"test","date":"2020-08-05T16:50:10.000Z","updated":"2020-08-07T08:51:45.895Z","comments":true,"path":"test/index.html","permalink":"http://yoursite.com/test/index.html","excerpt":"","text":""}],"posts":[{"title":"收集的一些博客","slug":"SomeBlogs","date":"2020-12-24T02:32:00.000Z","updated":"2020-12-24T02:49:51.211Z","comments":true,"path":"2020/12/24/SomeBlogs/","link":"","permalink":"http://yoursite.com/2020/12/24/SomeBlogs/","excerpt":"","text":"收集的一些博客","categories":[],"tags":[{"name":"blogs","slug":"blogs","permalink":"http://yoursite.com/tags/blogs/"}]},{"title":"","slug":"Spring Cloud OpenFeign","date":"2020-12-18T06:43:45.051Z","updated":"2020-12-18T10:40:11.197Z","comments":true,"path":"2020/12/18/Spring Cloud OpenFeign/","link":"","permalink":"http://yoursite.com/2020/12/18/Spring%20Cloud%20OpenFeign/","excerpt":"","text":"OpenFeign简介​ OpenFeign是springcloud在Feign的基础上支持了SpringMVC的注解，如@RequestMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。 使用方式​ 在注册中心这个微服务中引入依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; ​ 在application.yml中添加配置 #设置feign 客户端超时时间（openFeign默认支持ribbon） ribbon: #指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间 单位：毫秒 ReadTimeout: 5000 #指的是建立连接后从服务器读取到可用资源所用的时间,单位：毫秒 ConnectTimeout: 5000 # 设置回退生效 feign: hystrix: enabled: true hystrix: command: default: #也可以针对多个服务 execution: isolation: thread: timeoutInMilliseconds: 5000 # 设置hystrix的超时时间为5s 新建一个接口 @FeignClient(value = &quot;consul-provider-payment&quot;, contextId = &quot;helloServiceClient&quot;, fallbackFactory = HelloServiceFallback.class) public interface IHelloService &#123; @GetMapping(&quot;hello&quot;) String hello(@RequestParam(&quot;name&quot;) String name); @GetMapping(&quot;user&quot;) String info(); &#125; 1.value指定资源服务的名称，通常为资源服务配置里 spring.application.name的值; 2.contextId指定这个Feign Client的别名，当我们定义了多个Feign Client并且value值相同（即调用同一个服务）的时候，需要手动通过contextId设置别名，否则程序将抛出异常；` 3.fallbackFactory指定了回退方法，当我们调用远程服务出现异常时，就会调用这个回退方法。fallback也可以指定回退方法，但fallbackFactory指定的回退方法里可以通过Throwable对象打印出异常日志，方便分析问题 在接口下新建一个fallback包，进入，然后在该包下新建一个HelloServiceFallback @Slf4j @Component public class HelloServiceFallback implements FallbackFactory&lt;IHelloService&gt; &#123; @Override public IHelloService create(Throwable throwable) &#123; return new IHelloService() &#123; @Override public String hello(String name) &#123; log.error(&quot;调用server-system-hello服务出错&quot;, throwable); return &quot;调用出错&quot;; &#125; @Override public String info() &#123; log.error(&quot;调用server-system-info服务出错&quot;, throwable); return null; &#125; &#125;; &#125; &#125; 最后在启动类上添加注解：**@EnableFeignClients**","categories":[],"tags":[]},{"title":"Spring Cloud 服务注册中心","slug":"Spring Cloud 服务注册与发现","date":"2020-12-18T01:32:00.000Z","updated":"2020-12-18T06:26:34.465Z","comments":true,"path":"2020/12/18/Spring Cloud 服务注册与发现/","link":"","permalink":"http://yoursite.com/2020/12/18/Spring%20Cloud%20%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/","excerpt":"","text":"什么是服务注册中心​ 服务注册中心就是，在微服务体系中，其中有一个服务是用来集中管理这些微服务实例，微服务间的调用只需要知道对方的服务名，而无需关注具体的IP和端口，便于微服务架构的拓展和维护。 CAP理论​ CAP理论是分布式架构中重要理论，CAP不能都取，只能取其二 一致性(Consistency) (所有节点在同一时间具有相同的数据) 可用性(Availability) (保证每个请求不管成功或者失败都有响应) 分区容错性(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作) 常用的注册中心 Eureka Zookeeper Consul Nacos Eureka &gt; AP​ Eureka遵信AP原则，即高可用以及分隔容忍性，最终保证一致性，在Eureka Server集群中，由于其采用的是p2p对等通信，互相注册的方式，去除了中心化，所以只要还存在其中一个服务，服务就可以正常注册和发现，当宕机的Eureka Server可用时，就会请求复制操作，同步当前可用Eureka Server所有的服务节点 使用方式：Eureka Server​ 在注册中心这个微服务中引入依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; ​ 在application.yml中添加配置 eureka: instance: hostname: www.eureka7000.com #eureka服务端的应用实例主机名 client: #false表示不向注册中心注册自己 register-with-eureka: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 fetch-registry: false service-url: #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址 #集群指向其它eureka # defaultZone: http://www.eureka7001.com:7001/eureka/ #单机就是7000自己 defaultZone: http://www.eureka7000.com:7000/eureka/ server: # false 关闭自我保护机制，保证不可用服务呗及时剔除(不推荐) # enable-self-preservation: false # Eureka Server 清理无效节点的时间间隔（单位：毫秒） # eviction-interval-timer-in-ms: 2000 ​ 最后在该服务的启动类上加上注解：**@EnableEurekaServer** 集群方式启动：可以看到副本列表中有另一个Eureka Server的实例主机名 Eureka Client​ 在资源微服务中引入依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; ​ 在application.yml中添加配置 eureka: instance: # 隐藏域名 instance-id: payment8001 # 左下角访问路径可以显示IP地址 prefer-ip-address: true # 向Eureka 服务端发送心跳的间隔时间，单位为秒，用于服务续约。这里配置为20秒，即每隔20秒向Eureka Server发送心跳，表明当前服务没有宕机； # lease-renewal-interval-in-seconds: 20 # Eureka服务端在收到最后一次心跳后等待时间上限，（秒），默认90秒，超时剔除服务 # lease-expiration-duration-in-seconds: 2 client: #表示是否将自己注册进Eureka Server默认为true register-with-eureka: true #是否从Eureka Server抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetch-registry: true service-url: # 集群 defaultZone: http://www.eureka7001.com:7001/eureka,http://www.eureka7000.com:7000/eureka # 单节点 # defaultZone: http://www.eureka7000.com:7000/eureka ​ 最后在该服务的启动类上加上注解：**@EnableEurekaClient** ​ 可以看出，在使用了eureka.instance.instance-id之后隐藏了服务id以及端口 ​ 当鼠标悬浮到“payment8002”上时，浏览器左下角显示IP地址 Zookeeper &gt; CP​ Zookeeper从设计模式角度来理解：是一个基于观察者模式设计（一个领导者(Leader)，多个跟随者(Follower)组成的集群）的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出相应的反应。 ​ Zookeeper遵循CP原则，保证容错和数据实时一致性，从 Zookeeper 的实际应用情况来看，在使用 Zookeeper 获取服务列表时，如果此时的 Zookeeper 集群中的 Leader 宕机了，该集群就要进行 Leader 的选举，又或者 Zookeeper 集群中半数以上服务器节点不可用（例如有三个节点，如果节点一检测到节点三挂了 ，节点二也检测到节点三挂了，那这个节点才算是真的挂了），那么将无法处理该请求。所以说，Zookeeper 不能保证服务可用性。 ​ 当然，在大多数分布式环境中，尤其是涉及到数据存储的场景，数据一致性应该是首先被保证的，这也是 Zookeeper 设计紧遵CP原则的另一个原因。 使用方式：Server​ 首先Zookeeper注册中心需要单独下载 官网：https://zookeeper.apache.org/ 或 https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/ ​ 解压并进入conf文件夹，修改配置文件，主要时修改dataDir位置对应的目录，目录没有的先创建 # 复制一份配置文件 cp zoo_sample.cfg zoo.cfg # 编辑zoo.cfg vim zoo.cfg ​ 修改好配置文件后，进入到bin目录 # 启动zk ./zkServer.sh start # 开启端口2181 服务Client​ 在资源微服务中引入依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt; &lt;!--先排除自带的zookeeper3.5.3--&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!--添加zookeeper3.4.14版本--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.14&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; ​ 在application.yml中添加配置 spring: application: name: cloud-consumer-order cloud: zookeeper: connect-string: 192.168.186.140:2181 discovery: enabled: true ​ 最后在启动类添加注解：**@EnableDiscoveryClient** ​ 启动服务、执行命令./zkCli.sh进入zk客户端，执行 ls /services，查看注册进来的服务。 Consul &gt; CP​ Consul遵循CP原则，保证了强一致性和分区容错性，且使用的是Raft算法，比zookeeper使用的Paxos算法更加简单。虽然保证了强一致性，但是可用性就相应下降了，例如服务注册的时间会稍长一些，因为 Consul 的 raft 协议要求必须过半数的节点都写入成功才认为注册成功 ；在leader挂掉了之后，重新选举出leader之前会导致Consul 服务不可用 使用方式：Server​ Consul官网：https://www.consul.io/intro/index.html，下载一个可执行文件 ​ 下载完成后解压 # 可视化界面启动，后台运行，并把日志输出到log.out nohup ./consul agent -dev -client 0.0.0.0 -ui &gt; log.out &amp; ​ 访问 IP:8500 服务Client​ 在资源微服务中引入依赖 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt; &lt;/dependency&gt; ​ 在application.yml中添加配置 spring: application: name: cloud-consumer-order cloud: consul: host: 192.168.186.140 port: 8500 discovery: service-name: $&#123;spring.application.name&#125; ​ 最后在启动类添加注解：**@EnableDiscoveryClient** 启动服务，刷新页面，可以看到服务已经注册进来了 点击进去可以看到该服务的状态以及信息","categories":[],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://yoursite.com/tags/Spring-Cloud/"},{"name":"服务注册与发现","slug":"服务注册与发现","permalink":"http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"}]},{"title":"FFmpeg","slug":"FFmpeg","date":"2020-11-30T07:32:00.000Z","updated":"2020-11-30T07:58:55.733Z","comments":true,"path":"2020/11/30/FFmpeg/","link":"","permalink":"http://yoursite.com/2020/11/30/FFmpeg/","excerpt":"","text":"安装1、下载 命令ffmpeg -i D:\\test\\abc.mp4 -c copy -map 0 -f segment -segment_list abc.m3u8 -segment_time 10 abc%03d.ts ffmpeg -y \\ -i The_Kriss_Vector.mp4 \\ -hls_time 20 \\ # 将test.mp4分割成每个小段多少秒 -hls_key_info_file encrypt.keyinfo \\ -hls_playlist_type vod \\ # vod 是点播，表示PlayList不会变 -hls_segment_filename &quot;playlist%d.ts&quot; \\ # 每个小段的文件名 playlist.m3u8 # 生成的m3u8文件 ffmpeg -y \\ -i The_Kriss_Vector.mp4 \\ -hls_time 20 \\ -hls_key_info_file encrypt.keyinfo \\ -hls_playlist_type event \\ -hls_segment_filename &quot;playlist%03d.ts&quot; \\ playlist.m3u8 ffmpeg -y -i The_Kriss_Vector.mp4 -hls_time 4 -hls_key_info_file encrypt.keyinfo -hls_segment_filename &quot;playlist%03d.ts&quot; playlist.m3u8","categories":[],"tags":[{"name":"FFmpeg","slug":"FFmpeg","permalink":"http://yoursite.com/tags/FFmpeg/"}]},{"title":"Centos7安装elasticsearch","slug":"Centos7安装elatiscsearch","date":"2020-11-19T01:32:00.000Z","updated":"2020-11-19T05:52:18.928Z","comments":true,"path":"2020/11/19/Centos7安装elatiscsearch/","link":"","permalink":"http://yoursite.com/2020/11/19/Centos7%E5%AE%89%E8%A3%85elatiscsearch/","excerpt":"","text":"下载安装包官网地址 https://www.elastic.co/cn/downloads/past-releases#elasticsearch 选择自己要下载的版本，这里以v7.3.2为例 安装&amp;脚本​ es是要用非root用户启动 #!/bin/bash data=&quot;/usr/local&quot; # 设置用户和用户组 user=&quot;es&quot; group=&quot;elasticsearch&quot; password=&quot;123456&quot; groupadd $&#123;group&#125; useradd $&#123;user&#125; passwd $&#123;user&#125; $&#123;password&#125; usermod -G $&#123;group&#125; $&#123;user&#125; tar -xvf elasticsearch-7.3.2-linux-x86_64.tar.gz sudo mv elasticsearch-7.3.2 $&#123;data&#125;/es sudo chown -R $&#123;user&#125;:$&#123;group&#125; $&#123;data&#125;/es echo &quot;vm.max_map_count=262144&quot; &gt;&gt; /etc/sysctl.conf sysctl -p # 修改每个进程最大同时打开文件数和最大线程个数 echo &quot;* hard nofile 65536&quot; &gt;&gt; /etc/security/limits.conf echo &quot;* soft nofile 65536&quot; &gt;&gt; /etc/security/limits.conf echo &quot;* soft nproc 4096&quot; &gt;&gt; /etc/security/limits.conf echo &quot;* hard nproc 4096&quot; &gt;&gt; /etc/security/limits.conf 安装插件如：ik分词插件 下载安装包 https://github.com/medcl/elasticsearch-analysis-ik/releases 解压到刚刚安装的es目录 如： /usr/local/es/plugins 配置elasticsearch.yml（无密码）进入安装目录的config目录，编辑vim elasticsearch.yml 单节点配置： 主要修改： node.name: node-1 network.host: 192.168.186.140 http.port: 9200 cluster.initial_master_nodes: [“node-1”] # ======================== Elasticsearch Configuration ========================= # # NOTE: Elasticsearch comes with reasonable defaults for most settings. # Before you set out to tweak and tune the configuration, make sure you # understand what are you trying to accomplish and the consequences. # # The primary way of configuring a node is via this file. This template lists # the most important settings you may want to configure for a production cluster. # # Please consult the documentation for further information on configuration options: # https://www.elastic.co/guide/en/elasticsearch/reference/index.html # # ---------------------------------- Cluster ----------------------------------- # # Use a descriptive name for your cluster: # #cluster.name: my-application # # ------------------------------------ Node ------------------------------------ # # Use a descriptive name for the node: # node.name: node-1 # # Add custom attributes to the node: # #node.attr.rack: r1 # # ----------------------------------- Paths ------------------------------------ # # Path to directory where to store the data (separate multiple locations by comma): # #path.data: /path/to/data # # Path to log files: # #path.logs: /path/to/logs # # ----------------------------------- Memory ----------------------------------- # # Lock the memory on startup: # #bootstrap.memory_lock: true # # Make sure that the heap size is set to about half the memory available # on the system and that the owner of the process is allowed to use this # limit. # # Elasticsearch performs poorly when the system is swapping the memory. # # ---------------------------------- Network ----------------------------------- # # Set the bind address to a specific IP (IPv4 or IPv6): # network.host: 192.168.186.140 # # Set a custom port for HTTP: # http.port: 9200 # # For more information, consult the network module documentation. # # --------------------------------- Discovery ---------------------------------- # # Pass an initial list of hosts to perform discovery when this node is started: # The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;] # #discovery.seed_hosts: [&quot;host1&quot;, &quot;host2&quot;] # # Bootstrap the cluster using an initial set of master-eligible nodes: # cluster.initial_master_nodes: [&quot;node-1&quot;] # # For more information, consult the discovery and cluster formation module documentation. # # ---------------------------------- Gateway ----------------------------------- # # Block initial recovery after a full cluster restart until N nodes are started: # #gateway.recover_after_nodes: 3 # # For more information, consult the gateway module documentation. # # ---------------------------------- Various ----------------------------------- # # Require explicit names when deleting indices: # #action.destructive_requires_name: true # # #http.cors.enabled: true #http.cors.allow-origin: &quot;*&quot; #http.cors.allow-headers: &quot;X-Requested-With, Content-Type, Content-Length, X-User&quot; #xpack.security.enabled: true #xpack.security.transport.ssl.enabled: true 配置elasticsearch.yml（有密码）编辑vim elasticsearch.yml 添加 http.cors.enabled: true http.cors.allow-origin: &quot;*&quot; http.cors.allow-headers: &quot;X-Requested-With, Content-Type, Content-Length, X-User&quot; xpack.security.enabled: true xpack.security.transport.ssl.enabled: true 非root用户重启elasticsearch服务 非root用户执行./elasticsearch-setup-passwords interactive 自定义密码 修改kibana配置文件（有密码）1.修改kibana.yml配置文件，添加以下配置 #进入kibana安装目录 cd /usr/local/kibana-7.2.0-linux-x86_64/config #修改配置文件 vim kibana.yml #添加配置 elasticsearch.username: &quot;elastic&quot; elasticsearch.password: &quot;xxx&quot; 2.非root用户重启kibana服务 3.登录kibana","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://yoursite.com/tags/elasticsearch/"}]},{"title":"Kafka安装使用","slug":"Kafka安装使用","date":"2020-10-29T03:32:00.000Z","updated":"2020-11-27T10:29:23.320Z","comments":true,"path":"2020/10/29/Kafka安装使用/","link":"","permalink":"http://yoursite.com/2020/10/29/Kafka%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/","excerpt":"","text":"下载安装1.官网下载 2.解压 tar -zxvf xxxxxxx.tar.gz 配置 ############################# Server Basics ############################# # broker的id，要求唯一，集群部署不能重复 broker.id=0 ############################# Socket Server Settings ############################# # 监听的服务端口，所部署机器的IP或者域名＋端口，记得防火墙开端口 # 监听器列表 - 使用逗号分隔URI列表和监听器名称。如果侦听器名称不是安全协议，则还必须设置listener.security.protocol.map。指定主机名为0.0.0.0来绑定到所有接口。留空则绑定到默认接口上 # java.net.InetAddress.getCanonicalHostName() if not configured. # FORMAT: # listeners = listener_name://host_name:port # EXAMPLE: # listeners = PLAINTEXT://your.host.name:9092 listeners=PLAINTEXT://192.168.186.144:9092 # Hostname and port the broker will advertise to producers and consumers. If not set, # it uses the value for &quot;listeners&quot; if configured. Otherwise, it will use the value # returned from java.net.InetAddress.getCanonicalHostName(). #advertised.listeners=PLAINTEXT://your.host.name:9092 # Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details #listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL # 服务器用于从接收网络请求并发送网络响应的线程数 num.network.threads=3 # 服务器用于处理请求的线程数，可能包括磁盘I/O num.io.threads=8 # 服务端用来处理socket连接的SO_SNDBUF缓冲大小。如果值为-1，则使用系统默认值。 socket.send.buffer.bytes=102400 # 服务端用来处理socket连接的SO_RCVBUFF缓冲大小。如果值为-1，则使用系统默认值 socket.receive.buffer.bytes=102400 # socket请求的最大大小，这是为了防止server跑光内存，不能大于Java堆的大小。（104857600-&gt;100MB） socket.request.max.bytes=104857600 ############################# Log Basics ############################# # 保存日志数据的目录，如果未设置将使用log.dir的配置。 log.dirs=/home/cloud/server/kafka/kafka/logs # ！！每个topic的默认日志分区数 ！！ num.partitions=3 # 每个数据目录，用于启动时日志恢复和关闭时刷新的线程数 num.recovery.threads.per.data.dir=1 ############################# Internal Topic Settings ############################# # The replication factor for the group metadata internal topics &quot;__consumer_offsets&quot; and &quot;__transaction_state&quot; # For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3. # offset topic的副本数（设置的越大，可用性越高）。内部topic创建将失败，直到集群大小满足此副本数要求。 offsets.topic.replication.factor=3 # 事务topic的副本数（设置的越大，可用性越高）。内部topic在集群数满足副本数之前，将会一直创建失败。 transaction.state.log.replication.factor=1 # 覆盖事务topic的min.insync.replicas配置 # 当producer将ack设置为“全部”（或“-1”）时，min.insync.replicas指定了被认为写入成功的最小副本数。 # 如果这个最小值不能满足，那么producer将会引发一个异常（NotEnoughReplicas或NotEnoughReplicasAfterAppend）。 # 当一起使用时，min.insync.replicas和acks允许您强制更大的耐久性保证。 # 一个经典的情况是创建一个复本数为3的topic，将min.insync.replicas设置为2，并且producer使用“all”选项。 # 这将确保如果大多数副本没有写入producer则抛出异常。 transaction.state.log.min.isr=1 ############################# Log Flush Policy ############################# # Messages are immediately written to the filesystem but by default we only fsync() to sync # the OS cache lazily. The following configurations control the flush of data to disk. # There are a few important trade-offs here: # 1. Durability: Unflushed data may be lost if you are not using replication. # 2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush. # 3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks. # The settings below allow one to configure the flush policy to flush data after a period of time or # every N messages (or both). This can be done globally and overridden on a per-topic basis. # 在将消息刷新到磁盘之前，在日志分区上累积的消息数量。默认： 9223372036854775807 #log.flush.interval.messages=10000 # 在刷新到磁盘之前，任何topic中的消息保留在内存中的最长时间（以毫秒为单位）。如果未设置，则使用 # 如果未设置，则使用log.flush.scheduler.interval.ms中的值。 #log.flush.interval.ms=1000 ############################# Log Retention Policy ############################# # The following configurations control the disposal of log segments. The policy can # be set to delete segments after a period of time, or after a given size has accumulated. # A segment will be deleted whenever *either* of these criteria are met. Deletion always happens # from the end of the log. # The minimum age of a log file to be eligible for deletion due to age log.retention.hours=168 # A size-based retention policy for logs. Segments are pruned from the log unless the remaining # segments drop below log.retention.bytes. Functions independently of log.retention.hours. #log.retention.bytes=1073741824 # The maximum size of a log segment file. When this size is reached a new log segment will be created. log.segment.bytes=1073741824 # The interval at which log segments are checked to see if they can be deleted according # to the retention policies log.retention.check.interval.ms=300000 ############################# Zookeeper ############################# # Zookeeper connection string (see zookeeper docs for details). # This is a comma separated host:port pairs, each corresponding to a zk # server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;. # You can also append an optional chroot string to the urls to specify the # root directory for all kafka znodes. zookeeper.connect=localhost:2181 # Timeout in ms for connecting to zookeeper zookeeper.connection.timeout.ms=6000 ############################# Group Coordinator Settings ############################# # The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance. # The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms. # The default value for this is 3 seconds. # We override this to 0 here as it makes for a better out-of-the-box experience for development and testing. # However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup. group.initial.rebalance.delay.ms=0 启动zk./bin/zkServer.sh start 启动kafkanohup ./bin/kafka-server-start.sh config/server.properties &gt; server.out &amp; nohup ./bin/kafka-server-start.sh config/server-1.properties &gt; server1.out &amp; nohup ./bin/kafka-server-start.sh config/server-2.properties &gt; server2.out &amp; 创建topicbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic kafka-stream1 查看topic# 查看topic列表 ./bin/kafka-topics.sh --list --zookeeper 192.168.186.140:2181 # 查看topic描述 ./bin/kafka-topics.sh --describe --zookeeper 192.168.186.140:2181 --topic kafka-test # 删除topic ./bin/kafka-topics.sh --delete --zookeeper 192.168.186.140:2181 --topic topic1 查看消费者组./bin/kafka-consumer-groups.sh --new-consumer --bootstrap-server 192.168.186.140:9092 --list # 查看特定组信息 ./bin/kafka-consumer-groups.sh --bootstrap-server 192.168.186.140:9092 --group kafka_tran_g1 --describe 消费者./bin/kafka-console-consumer.sh --bootstrap-server 192.168.186.140:9092 --from-beginning --topic kafka-test ./bin/kafka-console-consumer.sh --bootstrap-server 192.168.186.140:9092 --topic kafka-stream2 生产者./bin/kafka-console-producer.sh --broker-list 192.168.186.140:9092 --topic kafka-stream1","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"Kafka","slug":"Kafka","permalink":"http://yoursite.com/tags/Kafka/"},{"name":"Spring-Boot","slug":"Spring-Boot","permalink":"http://yoursite.com/tags/Spring-Boot/"}]},{"title":"Docker","slug":"Docker","date":"2020-10-10T07:32:00.000Z","updated":"2020-11-20T10:08:35.500Z","comments":true,"path":"2020/10/10/Docker/","link":"","permalink":"http://yoursite.com/2020/10/10/Docker/","excerpt":"","text":"安装&amp;配置常用命令基本命令#启动服务 systemctl start docker #获取镜像 docker pull [镜像:xx.xx] //docker pull mysql:8.0.12 #列出镜像 docker image ls -a #运行容器 docker run [镜像] #查看正在运行的容器 docker ps #进入交互界面 docker exec -it 【短ID】 /bin/bash #查找镜像 docker search [镜像] #查看终止状态的容器 docker container ls -a #保存容器 docker commit 【短ID】 容器名称:容器版本 #删除容器（首先kill运行中的容器然后删除终止状态的容器） docker kill -s KILL [短ID(终止状态)] docker container rm 【短ID】来删除一个处于终止状态的容器 #清理所有处于终止状态的容器 docker container prune #删除镜像 docker image rm 【短ID】 #若需要删除所有仓库名为 redis 的镜像： docker image rm $(docker image ls -q redis) #查看容器信息 docker inspect 【短ID】 MySQLdocker 安装 mysql 8 版本 # docker 中下载 mysql docker pull mysql:8.0.12 #启动 docker run --name mysql -v D:\\DockerImgs\\MySQLdatabase:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=inst1 -d mysql:8.0.12 --name mysql 将容器命名为mysql，后面可以用这个name进行容器的启动暂停等操作 -e MYSQL_ROOT_PASSWORD=123456 设置MySQL密码为123456 -d 此容器在后台运行,并且返回容器的ID -i 以交互模式运行容器 -p 进行端口映射，格式为主机(宿主)端口:容器端口 --restart=always 当docker重启时，该容器自动重启 #进入容器 docker exec -it mysql bash #登录mysql mysql -u root -p #查看表 show databases; ##修改本地连接 ALTER USER &#x27;root&#x27;@localhost IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;; flush privileges; #远程连接 ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;; flush privileges; #挂载到本地（需要授权） -v D:\\DockerImgs\\MySQLdatabase:/var/lib/mysql Centos7# docker 中下载 ubuntu docker pull ubuntu:18.04 #启动且允许用户进行交互 docker run --name ubuntu ubuntu:18.04 /usr/sbin/init docker run --privileged --name centos centos /usr/sbin/init #进入 docker exec -it centos bash #查看信息 root@af8bae53bdd3:/#cat /etc/os-release #安装firewalld 防火墙 yum install firewalld #安装ifconfig yum search ifconfig yum install net-tools.x86_64 -y #设置密码 passwd #如果没有该命令 使用yum install passwd #安装Openssh yum -y install openssh-server yum -y install openssh-clients #修改/etc/ssh/sshd_config配置并保存： vi /etc/ssh/sshd_config PermitRootLogin yes UsePAM no port=22 #开启22端口 RSAAuthentication yes #启用 RSA 认证 PubkeyAuthentication yes #启用公钥私钥配对认证方式 AuthorizedKeysFile .ssh/authorized_keys #公钥文件路径（和上面生成的文件同） PermitRootLogin yes #root能使用ssh登录 #启动ssh服务 systemctl start sshd systemctl status sshd #重启ssh服务，并设置开机启动： yum install initscripts -y service sshd restart chkconfig sshd on #安装jdk 查看yum库中的java安装包 ：yum -y list java* yum -y install java-11-openjdk.x86_64 java-11-openjdk-devel.x86_64 #安装路径 cd /usr/lib/jvm #安装MySQL yum install wget.x86_64 -y wget http://repo.mysql.com/mysql80-community-release-el7-1.noarch.rpm yum -y install mysql80-community-release-el7-1.noarch.rpm yum -y install mysql-community-server #查看默认密码 grep &#x27;temporary password&#x27; /var/log/mysqld.log #修改密码 ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Xiao_00oo&#x27;;(过于简单改不了) （ ===#跳过密码(算了吧) vi /etc/my.cnf 配置文件添加skip-grant-tables === ） #修改远程连接 update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;; #保存后重启mysql systemctl restart mysqld #查看状态 systemctl status mysqld #卸载mysql yum remove mysql mysql-server mysql-libs compat-mysql8 #下载tomcat9 wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-9/v9.0.24/bin/apache-tomcat-9.0.24.tar.gz #解压 tar zxvf apache-tomcat-9.0.24.tar.gz #启动 cd到安装目录 启动服务 ./catlina run 关闭服务 ctrl+c #开端口命令： 【单个】 firewall-cmd --zone=public --add-port=80/tcp --permanent 【范围】 firewall-cmd --zone=public --add-port=50000-50100/tcp --permanent 【删除】 firewall-cmd --zone=public --remove-port=80/tcp --permanent #重启防火墙： systemctl restart firewalld.service #找出公共区域的所有设置 firewall-cmd --zone=public --list-all firewall-cmd --list-all #用于显示 tcp，udp 的端口和进程等相关情况 netstat -tunlp #后台运行程序并把日志输出到output文件中 nohup PORT=9999 node app.js &gt;music.txt 2&gt;&amp;1 &amp; Redis# 启动Redis docker run -di --name myredis -p 6379:6379 redis docker exec -it myredis redis-cli docker run --name myredis -v C:\\Users\\Admin\\Desktop\\redis-2.4.5-win32-win64\\64bit:/data -di -p 6379:6379 redis -p 6379:6379 : 将容器的6379端口映射到主机的6379端口 -d : 将容器的在后台运行 -v $PWD/data:/data : 将主机中当前目录下的data挂载到容器的/data .redis数据卷,如未加上这个,容器重启后数据将丢失. redis-server --appendonly yes : 在容器执行redis-server启动命令，并打开redis持久化配置 --requirepass &quot;ReDis@.1*1PWD&quot; 设置引号里字符为密码 –restart=always : 随docker启动而启动 $ cd src $ ./src/redis-server ./redis.conf ./src/redis-cli Tomcat#拉取镜像 docker pull tomcat 默认是最新的 docker pull tomcat:8 指定版本 # 启动 docker run -it --rm -p 8888:8080 tomcat 打印日志 docker run -it -d -p 8888:8080 tomcat:8 指定版本且后台启动 # 访问 ip:8888 ####如果出现404，则 使用命令: docker exec -it 运行的tomcat容器ID /bin/bash 进入到tomcat的目录 使用命令: ls -l 发现有webapps 和 webapps.dist 两个文件夹 查看webapps 文件夹，发现里面没有文件，而 webapps.dist 里面有文件 使用过tomcat的都应该知道，webapps是tomcat存放静态资源的目录 只要把webapps.dist重命名为webapps就好了 mv webapps webapps2 mv webapps.dist/ webapps 再次访问就ok了 #复制tomcat配置文件和webapps docker cp 【短ID】:/usr/local/tomcat/conf /home/data/tomcat docker cp 【短ID】:/usr/local/tomcat/conf/webapps /home/data/tomcat #挂载目录启动 docker run -d --name mytomcat -p 8888:8080 -v /home/data/tomcat/conf/:/usr/local/tomcat/conf/ -v /home/data/tomcat/webapps/:/usr/local/tomcat/webapps/ tomcat Nginx#获取nginx docker pull nginx #运行 docker run -id -p 82:80 nginx #访问 ip:82 #重启 docker restart 【短ID】 #停止 docker stop 【短ID】 #复制配置文件夹到服务器---(/home/data需要自己创建) docker cp 【短ID】:/etc/nginx /home/data docker cp ea14a70c74ab:/etc/nginx /home/data #挂载容器目录启动nginx容器 docker run -id --name mynginx -v /home/data/nginx:/etc/nginx -p 82:80 nginx #挂载静态资源目录 (/home/data/web) docker run -id --name mynginx -v /home/data/nginx:/etc/nginx -v /home/data/web:/home/data/web -p 82:80 nginx #访问 ip:82 MinIO Docker# docker安装镜像 docker pull minio/minio # 启动 docker run -p 9000:9000 -d --name minio \\ -v /home/Photo:/data \\ -v /mnt/config:/root/.minio \\ minio/minio server /data # 默认用户密码 minioadmin minioadmin","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}]},{"title":"Linux安装RabbitMQ","slug":"Centos7安装RabbitMQ","date":"2020-09-22T07:40:00.000Z","updated":"2020-10-26T02:04:30.177Z","comments":true,"path":"2020/09/22/Centos7安装RabbitMQ/","link":"","permalink":"http://yoursite.com/2020/09/22/Centos7%E5%AE%89%E8%A3%85RabbitMQ/","excerpt":"","text":"安装ErlangRabbitMQ是用Erlang语言编写的，在本教程中我们将安装最新版本的Erlang到服务器中。 Erlang在默认的YUM存储库中不可用，因此您将需要安装EPEL存储库。 运行以下命令相同。 yum -y install epel-release yum -y update 现在使用以下命令安装Erlang。 yum -y install erlang socat 您现在可以使用以下命令检查Erlang版本。 erl -version 您将得到以下输出。 [root@liptan-pc ~]# erl -version Erlang (ASYNC_THREADS,HIPE) (BEAM) emulator version 5.10.4 要切换到Erlang shell，可以键入以下命令。 erl shell将更改，您将得到以下输出。 Erlang R16B03-1 (erts-5.10.4) [source] [64-bit] [async-threads:10] [hipe] [kernel-poll:false] Eshell V5.10.4 (abort with ^G) 1&gt; 您可以通过按ctrl + C两次退出shell。 Erlang现在安装在系统上，现在可以继续安装RabbitMQ。 安装RabbitMQRabbitMQ为预编译并可以直接安装的企业Linux系统提供RPM软件包。 唯一需要的依赖是将Erlang安装到系统中。 我们已经安装了Erlang，我们可以进一步下载RabbitMQ。 通过运行下载Erlang RPM软件包。 wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server-3.6.10-1.el7.noarch.rpm 如果你没有安装wget ，可以运行yum -y install wget 。 您可以随时找到最新版本的RabbitMQ下载页面的链接。 通过运行导入GPG密钥： rpm –import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc 运行RPM安装RPM包： rpm -Uvh rabbitmq-server-3.6.10-1.el7.noarch.rpm RabbitMQ现已安装在您的系统上。 开始RabbitMQ您可以通过运行以下命令启动RabbitMQ服务器进程。 systemctl start rabbitmq-server 要在引导时自动启动RabbitMQ，请运行以下命令。 systemctl enable rabbitmq-server 要检查RabbitMQ服务器的状态，请运行： systemctl status rabbitmq-server 如果启动成功，您应该得到以下输出。 ? rabbitmq-server.service - RabbitMQ broker Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; enabled; vendor preset: disabled) Active: active (running) since Sat 2017-07-15 18:59:14 UTC; 3min 22s ago Main PID: 29006 (beam.smp) Status: &quot;Initialized&quot; CGroup: /system.slice/rabbitmq-server.service ??29006 /usr/lib64/erlang/erts-9.0/bin/beam.smp -W w -A 64 -P 1048576 -t 5000000 -stbt db -zdbbl 32000 -K tr... ??29149 /usr/lib64/erlang/erts-9.0/bin/epmd -daemon ??29283 erl_child_setup 1024 ??29303 inet_gethost 4 ??29304 inet_gethost 4 Jul 15 18:59:13 centos rabbitmq-server[29006]: Starting broker... Jul 15 18:59:14 centos rabbitmq-server[29006]: systemd unit for activation check: &quot;rabbitmq-server.service&quot; Jul 15 18:59:14 centos systemd[1]: Started RabbitMQ broker. Jul 15 18:59:14 centos rabbitmq-server[29006]: completed with 0 plugins. 修改防火墙和SELinux规则 #放行5672和15672两个端口，（--permanent表示永久生效，没有此参数重启后失效） firewall-cmd --zone=public --add-port=5672/tcp --permanent firewall-cmd --zone=public --add-port=15672/tcp --permanent #重载防火墙是设置生效 firewall-cmd --reload #查看放行端口列表，此时列表显示如下图 firewall-cmd --list-all 如果您启用SELinux，则必须运行以下命令以允许RabbitMQ服务。 setsebool -P nis_enabled 1 访问Web控制台启动RabbitMQ Web管理控制台，方法是运行： rabbitmq-plugins enable rabbitmq_management 通过运行以下命令，将RabbitMQ文件的所有权提供给RabbitMQ用户： chown -R rabbitmq:rabbitmq /var/lib/rabbitmq/ 现在，您将需要为RabbitMQ Web管理控制台创建管理用户。 运行以下命令相同。 #查看当前用户列表 rabbitmqctl list_users #添加admin用户，用户名和密码都为admin rabbitmqctl add_user admin admin #设置admin的角色为administrator rabbitmqctl set_user_tags admin administrator #设置admin用户的权限，可访问所有 rabbitmqctl set_permissions -p / admin “.*” “.*” “.*” 修改密码 rabbitmqctl change_password admin &#x27;Newpassword&#x27; 将管理员更改为管理员用户的首选用户名。 确保将StrongPassword更改为非常强大的密码。 要访问RabbitMQ的管理面板，请使用您最喜爱的Web浏览器并打开以下URL。 http://Your_Server_IP:15672/ 开启远程访问在使用上述新建的账号访问webUI界面可以看到Config file，在overview下面, 如果没有找到配置文件后面会加上（not found） 没有就到该目录下新建一个，并开启远程访问（在结合SpringBoot时，RabbitMQ初始化默认是使用guest账户，因此需要给该账户开启远程访问），配置如下 [ &#123; rabbit , [ &#123; tcp_listeners , [ 5672 ] &#125; , &#123; loopback_users , [ &quot;guest&quot; ] &#125; ] &#125; ]. ps：最后的英文句号不能漏掉","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"Rabbit","slug":"Rabbit","permalink":"http://yoursite.com/tags/Rabbit/"},{"name":"消息队列","slug":"消息队列","permalink":"http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}]},{"title":"JDK脚本安装","slug":"JDK脚本安装","date":"2020-08-11T07:32:00.000Z","updated":"2020-09-04T07:37:10.306Z","comments":true,"path":"2020/08/11/JDK脚本安装/","link":"","permalink":"http://yoursite.com/2020/08/11/JDK%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/","excerpt":"","text":"脚本脚本与压缩包同目录 #!/bin/bash #判断是否安装有openJDK yum list installed |grep -e java -e jdk if [ $? -eq 0 ] then read -p &quot;继续执行将卸载已有JDK,y确定，其他退出?&quot; choose if [ $choose==&quot;y&quot; ] then yum -y remove java-* &amp;&gt; /dev/null yum -y remove tzdata-java* &amp;&gt; /dev/null else exit 1 fi fi #判断安装包是否存在 if [ -f jdk-8u261-linux-x64.tar.gz ] #判断是否已经安装 then java &amp;&gt; /dev/null if [ $? -eq 0 ] then echo &quot;已经安装JDK&quot; exit 1 else echo &quot;开始安装JDK&quot; tar zxvf jdk-8u261-linux-x64.tar.gz -C /usr/local echo &quot;JDK安装完成，开始配置环境变量&quot; cat /dev/null &gt; /etc/profile.d/jdkconf.sh echo &#x27;export JAVA_HOME=/usr/local/jdk1.8.0_261&#x27; &gt;&gt; /etc/profile.d/jdkconf.sh echo &#x27;export PATH=$PATH:$JAVA_HOME/bin&#x27; &gt;&gt; /etc/profile.d/jdkconf.sh echo &#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27; &gt;&gt; /etc/profile.d/jdkconf.sh echo &quot;环境变量配置完成&quot; fi else echo &quot;请将当前shell脚本和安装包放在同一目录&quot; fi chmod +x /etc/profile.d/jdkconf.sh source /etc/profile.d/jdkconf.sh echo &quot;======JDK安装完成，请使用命令：java -version检查是否成功安装,若失败请执行source /etc/profile.d/jdkconf.sh=======&quot; rpm包#!/bin/bash #判断是否安装有openJDK yum list installed |grep -e java -e jdk if [ $? -eq 0 ] then read -p &quot;继续执行将卸载已有JDK,y确定，其他退出?&quot; choose if [ $choose==&quot;y&quot; ] then yum -y remove java-* &amp;&gt; /dev/null yum -y remove tzdata-java* &amp;&gt; /dev/null else exit 1 fi fi #判断安装包是否存在 if [ -f jdk-8u261-linux-x64.rpm ] #判断是否已经安装 then java &amp;&gt; /dev/null if [ $? -eq 0 ] then echo &quot;已经安装JDK&quot; exit 1 else echo &quot;开始安装JDK&quot; rpm -ivh jdk-8u261-linux-x64.rpm &amp;&gt;/dev/null echo &quot;JDK安装完成，开始配置环境变量&quot; echo &#x27;export JAVA_HOME=/usr/java/jdk1.8.0_261-amd64&#x27; &gt;&gt; /etc/profile.d/jdkconf.sh echo &#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27; &gt;&gt; /etc/profile.d/jdkconf.sh echo &#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27; &gt;&gt; /etc/profile.d/jdkconf.sh echo &quot;环境变量配置完成&quot; fi else echo &quot;请将当前shell脚本和安装包放在同一目录&quot; fi chmod +x /etc/profile.d/jdkconf.sh sh /etc/profile.d/jdkconf.sh echo &quot;======JDK安装完成，请使用命令：java -version检查是否成功安装=======&quot;","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"JDK","slug":"JDK","permalink":"http://yoursite.com/tags/JDK/"},{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Centos7 常用命令","slug":"Centos7 常用命令","date":"2020-08-10T07:32:00.000Z","updated":"2020-12-08T05:39:33.298Z","comments":true,"path":"2020/08/10/Centos7 常用命令/","link":"","permalink":"http://yoursite.com/2020/08/10/Centos7%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"开端口【单个】 firewall-cmd --zone=public --add-port=2181/tcp --permanent 【范围】 firewall-cmd --zone=public --add-port=30000-30999/tcp --permanent 【删除】 firewall-cmd --zone=public --remove-port=8080/tcp --permanent 【刷新配置】 firewall-cmd --reload #找出公共区域的所有设置 firewall-cmd --zone=public --list-all firewall-cmd --list-all 重启防火墙：systemctl restart firewalld.service systemctl stop firewalld.service 开机启动配置/etc/rc.local 可加入命令，如：nohup java -jar text.jar shell脚本执行报错（ /bin/bash^M: 坏的解释器: 没有那个文件或目录）sed -i &quot;s/\\r//&quot; install.sh 查看系统版本cat /proc/version cat /etc/redhat-release 查看文件/文件夹大小指定目录的总大小，可以使用 du -sh 目录名称，du -sh test/ 或 du -h test/ 当前目录大小 du -sh 或 du -h 文件大小 du -h index.html 查看系统时间 查看系统时间的命令： date 查看硬件时间 查看硬件时间的命令： hwclock 时间服务器上的时间同步的方法安装ntpdate工具 # yum -y install ntp ntpdate 设置系统时间与网络时间同步 # ntpdate cn.pool.ntp.org 将系统时间写入硬件时间 # hwclock --systohc 安装net-toolsyum install -y net-tools.x86_64 安装lrzszyum -y install lrzsz w1sTqlD8QvFsx/aoSPrmfZMQkAwAxy1y+eEXwEc7GiYb4Q5gujLos4M0xfu77S2ZR8rr0hwMoqKDLFVHA5PxayGHy8lMyZSn5K3vCcjR/4Z8vEyzGReK+EgucnatTkfgOOys1wS02UcoQfX5Cffg0PIhhPokggSTGk5gxBizoW9kvAmzspCJEQ+v3Gq9Q5bZlugpdiwJ3bbLiW/OHg1iZq39mAxXcvaPbWOJmtqhbmkDm/VCZ/zFQ1vf8Xi32rseazqFJsPhLOcZLdqLfwOjqoSJuc9G9mCQIxbtskBD9wQOP3AVmdhtEg6d+en4uhypJdf7UEUAWjCj2JO5BOg75ZAbnEr72s89N9HWsydsPQSWSJbmF75X2E22qg7naKjZZBSJZez45i7j5FgHp1pt82zvIWIlAItpYeH00Kkn96eUQ0ODQJ0wodg2Pfoi4Vu46wG3jC/1J0oOWBP2uzCy3JA+rqCgYAtB+NNhAidtwYPk4Nu1HxNFHKDRNo5MMKr/1ujMIBR2+4Eft2S1Mq7eq3vOrz5+AQdxv+rjRxyKMFaBHXKYxYU/6YfrqLqxqjx31JLVRMPdS5s5z58GosjqHNFPQY0Bhokc6ZauqSFelY/M2AHUdnlp4/YATZhjteIyJLIprT0UyYEiidwwtxzlCNfqyKLhfC72F0bB+n8TKIs=","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"}]},{"title":"Centos7搭建FTP","slug":"Centos7搭建FTP","date":"2020-08-10T07:32:00.000Z","updated":"2020-11-19T06:08:10.933Z","comments":true,"path":"2020/08/10/Centos7搭建FTP/","link":"","permalink":"http://yoursite.com/2020/08/10/Centos7%E6%90%AD%E5%BB%BAFTP/","excerpt":"","text":"安装前准备vsftpd是linux下的一款小巧轻快，安全易用的FTP服务器软件，是一款在各个Linux发行版中最受推崇的FTP服务器软件。 1.安装vsftpd，直接yum 安装就可以了 yum install -y vsftpd 2.相关配置文件： cd /etc/vsftpd/ 3.启动服务 systemctl enable vsftpd.service //设置开机自启动 systemctl start vsftpd.service //启动ftp服务 netstat -antup | grep ftp //查看ftp服务端口 3.修改相关配置文件 vim /etc/vsftpd/vsftpd.conf 创建ftp本地用户1.创建用户并指定目录 useradd -d /data/ftp ftpuser #目录自己创建 passwd ftpuser #(回车)给用户ftpuser设置登录密码 2.修改配置文件 userlist_enable=YES #启动用户列表 userlist_deny=NO #决定是否对用户列表的用户拒绝访问ftp userlist_file=/etc/vsftpd/user_list 3.在user_list中写入 ftp这个用户 4.配置vsftpd.conf 锁定根目录 local_root= /var/www #本地用户登录后自动转到的ftp根目录 chroot_local_user=YES #将所有用户限定在指定的主目录内 chroot_list_enable=NO #不启用列外的用户列表 chroot_list_file=/etc/vsftpd/chroot_list #指定列外的用户列表文件 此文件是让用户登录后可以查看其他目录，若要使用户仅在指定的ftp目录，该文件就不要填写该用户,若没有该文件则新建 5.修改ftp目录的权限,将用户添加到root组 usermod -g root ftpuser chown ftpuser:root /data/ftp ！！添加到root用户组后需要修改配置文件，加上以下配置： allow_writeable_chroot=YES 参考配置（vsftpd.conf）anonymous_enable=NO local_enable=YES write_enable=YES local_umask=000 dirmessage_enable=YES xferlog_enable=YES connect_from_port_20=YES xferlog_std_format=YES chroot_local_user=YES chroot_list_enable=YES chroot_list_file=/etc/vsftpd/chroot_list listen=YES listen_ipv6=NO pam_service_name=vsftpd tcp_wrappers=YES userlist_enable=YES userlist_deny=NO userlist_file=/etc/vsftpd/user_list #目录自己创建，记得对应新建用户时的用户目录 local_root= /data/ftp allow_writeable_chroot=YES pasv_enable=YES #被动模式端口范围 pasv_min_port=30000 pasv_max_port=30999","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"ftp","slug":"ftp","permalink":"http://yoursite.com/tags/ftp/"}]},{"title":"Linux安装MongoDB","slug":"MongoDB","date":"2020-08-10T07:32:00.000Z","updated":"2020-12-18T06:35:56.325Z","comments":true,"path":"2020/08/10/MongoDB/","link":"","permalink":"http://yoursite.com/2020/08/10/MongoDB/","excerpt":"","text":"1.下载 官方下载地址：https://www.mongodb.com/download-center/community 2.上传解压 1.使用工具（FileZilla）上传至服务器 2.解压安装解压：tar -zxvf mongodb-linux-x86_64-4.0.6.tgz 移动：mv ./mongodb-linux-x86_64-4.0.6 /usr/local/mongodb 3.配置conf与目录 1.进入mongodb目录 cd /usr/local/mongodb/ 2.创建db目录和日志文件 mkdir -p ./data/db mkdir -p ./logs touch ./logs/mongodb.log 3.创建mongodb.conf文件 vim mongodb.conf #端口号 port=27017 #db目录 dbpath=/usr/local/mongodb/data/db #日志目录 logpath=//usr/local/mongodb/logs/mongodb.log #后台 fork=true #日志输出 logappend=true #允许远程IP连接 bind_ip=0.0.0.0 4.启动测试 1.启动 ./bin/mongod --config mongodb.conf 2.连接 ./bin/mongo --默认端口27017 ./bin/mongo localhost:23234 --指定端口，需要与配置的端口号一致 3.测试 5.配置mongodb服务开机启动1.设置mongodb.service开机服务启动cd /lib/systemd/system vim mongodb.service 添加如下配置--记得路劲和自己的配置路径要一致 [Unit] Description=mongodb After=network.target remote-fs.target nss-lookup.target [Service] Type=forking ExecStart=/usr/local/mongodb/mongodb/bin/mongod --config /usr/local/mongodb/mongodb/mongodb.conf ExecReload=/bin/kill -s HUP $MAINPID ExecStop=/usr/local/mongodb/mongodb/bin/mongod --shutdown --config /usr/local/mongodb/mongodb/mongodb.conf PrivateTmp=true [Install] WantedBy=multi-user.target 然后设置mongodb.service权限 chmod +x mongodb.service ​ #启动服务 systemctl start mongodb.service #停止服务 systemctl stop mongodb.service #添加开机自启动 systemctl enable mongodb.service #重启服务 systemctl restart mongodb.service 2）添加环境变量1、直接用export命令： export PATH=$PATH:/usr/local/mongodb/bin 2、修改profile文件： cat &gt;&gt;/etc/profile&lt;&lt;&quot;EOF&quot; export PATH=&quot;$PATH:/usr/local/mongodb/bin&quot; EOF 刷新profile文件： source /etc/profile 3、 修改.bashrc文件： cat &gt;&gt;/root/.bashrc&lt;&lt;&quot;EOF&quot; export PATH=&quot;$PATH:/usr/local/mongodb/bin&quot; EOF 上述三步依次执行完毕，环境变量配置完成！！！！ 重启服务器，输入mongo 回车就有了。。。。。","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"mongo","slug":"mongo","permalink":"http://yoursite.com/tags/mongo/"}]},{"title":"Mongo常用查询","slug":"Mongo常用查询","date":"2020-08-10T07:32:00.000Z","updated":"2020-11-19T06:33:50.711Z","comments":true,"path":"2020/08/10/Mongo常用查询/","link":"","permalink":"http://yoursite.com/2020/08/10/Mongo%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"查询并显示集合中的数据db.getCollection(&#x27;pixiv&#x27;).aggregate([ &#123; $group: &#123; _id : &#x27;$author.id&#x27;, count: &#123; $sum : 1 &#125; &#125; &#125;, &#123; $match: &#123; count: &#123; $gt : 1&#125; &#125; &#125; ]) 查询条件为数据中对象某个属性值db.getCollection(&#x27;pixiv&#x27;).find(&#123;&quot;author.id&quot;:35562628&#125;) 模糊查询db.getCollection(&#x27;pixiv&#x27;).find(&#123;&quot;author.name&quot;:/Rella/&#125;) 命令导出数据库./mongoexport -h 127.0.0.1 --port 50003 -d Images -c picjson -o /home/picjson.js --type json -f &quot;_id,tags,pid,p,uid,title,author,url,r18,width,height,_v&quot; 命令导入数据库./mongoimport -h 127.0.0.1 --port 50003 -d Pixiv -c picjson --file /home/picjson.js --type json","categories":[],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"}]},{"title":"Navicat12激活","slug":"Navicat12激活","date":"2020-08-10T07:32:00.000Z","updated":"2020-08-10T07:50:36.826Z","comments":true,"path":"2020/08/10/Navicat12激活/","link":"","permalink":"http://yoursite.com/2020/08/10/Navicat12%E6%BF%80%E6%B4%BB/","excerpt":"","text":"本教程更新时间：2019-4-19 16:37:38 https://www.52pojie.cn/thread-934566-1-1.html 本文所需软件1、navicat_premium原版安装包官网下载地址：https://www.navicat.com.cn/download/navicat-premium2、注册工具github地址：https://github.com/DoubleLabyrinth/navicat-keygen以上本文所需文件已整理到网盘，自取：链接：https://pan.baidu.com/s/1MDuDFBsS0EI-rz4WkQ7kJw提取码：gdn5复制这段内容后打开百度网盘手机App，操作更方便哦 ~~ 分割线 好了，教程开始1、安装原版navicat正常安装，一直下一步，直到安装成功，这个我就不截图了。默认安装路径是：C:\\Program Files\\PremiumSoft\\Navicat Premium 122、开始激活2.1、首先需要先替换掉Navicat激活公钥a、解压navicat-keygen-for-x64.zip文件，开始执行cmd命令b、打开命令提示符（管理员），win+x(因为我是安装在了C盘，文件写入需要管理员权限，如果安装在别的盘，普通的命令提示符就行，或者在解压文件夹按住shift点右键，也能选择命令提示符打开) c、进入到navicat-keygen-for-x64.zip文件的解压目录，执行如下命令 cd [解压目录] .\\navicat-patcher.exe &quot;C:\\Program Files\\PremiumSoft\\Navicat Premium 12&quot; d、回车继续，一顿飘屏猛如虎，好的，出现这样的提示表示替换成功。成功之后会在当前文件夹下生成RegPrivateKey.pem文件 2.2、接下来我们就要开始生成序列号和激活码a、和替换公钥类似，执行如下命令 .\\navicat-keygen.exe -text .\\RegPrivateKey.pem b、接下来你会被要求选择Navicat产品类别、语言以及输入主版本号。之后会随机生成一个序列号。 c、得到序列号，复制下来，注意：窗口不要关闭 d、此时打开安装的原版Navicat，第一次打开会出现如下提示，点击注册按钮，进入注册页面 e、接下来输入用户名，组织名和请求码，然后回车两次，获得激活码 f、把获得到的激活码粘贴到navcat中，点击激活，激活成功。 附上激活成功的截图。","categories":[],"tags":[{"name":"Navicat","slug":"Navicat","permalink":"http://yoursite.com/tags/Navicat/"}]},{"title":"MySQ5.7脚本安装","slug":"Mysql5.7脚本安装","date":"2020-08-10T07:32:00.000Z","updated":"2020-12-01T07:28:13.029Z","comments":true,"path":"2020/08/10/Mysql5.7脚本安装/","link":"","permalink":"http://yoursite.com/2020/08/10/Mysql5.7%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/","excerpt":"","text":"脚本#!/bin/bash #压缩包目录 data=&quot;home/mysql&quot; echo &quot;将mysql压缩包解压&quot; tar xvf mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz echo &quot;新建mysql文件夹&quot; if [ ! -d &quot;/&quot;$&#123;data&#125;&quot;/mysql-5.7.30-linux-glibc2.12-x86_64&quot; ]; then echo &quot;mysql解压未完成&quot; exit fi echo &quot;mysql解压完成修改文件夹&quot; mv mysql-5.7.30-linux-glibc2.12-x86_64 mysql mv mysql /usr/local echo &quot;mysql解压完成&quot; echo &quot;切换目录&quot; cd /usr/local/mysql/ echo &quot;新建数据库data目录&quot; mkdir data echo &quot;初始化mysql&quot; cd /usr/local/mysql/ bin/mysqld --initialize --user=root --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data echo &quot;修改配置文件&quot; cat /dev/null &gt; /etc/my.cnf if [ -f &quot;/etc/my.cnf&quot; ]; then mv /etc/my.cnf /etc/my.cnf.bak fi #跳过密码验证 echo &#x27;[mysqld]&#x27; &gt;&gt; /etc/my.cnf echo &#x27;bind-address=0.0.0.0&#x27; &gt;&gt; /etc/my.cnf echo &#x27;basedir = /usr/local/mysql&#x27; &gt;&gt; /etc/my.cnf echo &#x27;datadir = /usr/local/mysql/data&#x27; &gt;&gt; /etc/my.cnf echo &#x27;socket=/tmp/mysql.sock&#x27; &gt;&gt; /etc/my.cnf echo &#x27;user=root&#x27; &gt;&gt; /etc/my.cnf echo &#x27;port=3306&#x27; &gt;&gt; /etc/my.cnf echo &#x27;character-set-server=utf8&#x27; &gt;&gt; /etc/my.cnf #echo &#x27;skip-grant-tables&#x27; &gt;&gt; /etc/my.cnf echo &#x27;# Disabling symbolic-links is recommended to prevent assorted security risks&#x27; &gt;&gt; /etc/my.cnf echo &#x27;symbolic-links=0&#x27; &gt;&gt; /etc/my.cnf echo &#x27;# skip-grant-tables&#x27; &gt;&gt; /etc/my.cnf echo &#x27;[mysqld_safe]&#x27; &gt;&gt; /etc/my.cnf echo &#x27;log-error=/var/log/mysqld.log&#x27; &gt;&gt; /etc/my.cnf echo &#x27;pid-file=/var/run/mysqld/mysqld.pid&#x27; &gt;&gt; /etc/my.cnf echo &#x27;!includedir /etc/my.cnf.d&#x27; &gt;&gt; /etc/my.cnf echo &#x27;[client]&#x27; &gt;&gt; /etc/my.cnf echo &#x27;user=root&#x27; &gt;&gt; /etc/my.cnf echo &#x27;password=123456&#x27; &gt;&gt; /etc/my.cnf echo &#x27;port=3306&#x27; &gt;&gt; /etc/my.cnf echo &quot;配置修改完成，将mysql加入服务&quot; cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld #chmod +x /etc/init.d/mysqld echo &quot;添加mysql指令&quot; ln -s /usr/local/mysql/bin/mysql /usr/local/bin ln -s /usr/local/mysql/bin/mysqladmin /usr/local/bin #echo &quot;服务启动&quot; sudo service mysqld start sudo systemctl restart mysqld systemctl status mysqld #开启端口 firewall-cmd --zone=public --add-port=3306/tcp --permanent systemctl restart firewalld.service #修改root初始化密码 mysql -uroot -p &lt; /home/mirror/mysql/init.sql #关闭跳过密码验证 cat /dev/null &gt; /etc/my.cnf echo &#x27;[mysqld]&#x27; &gt;&gt; /etc/my.cnf echo &#x27;bind-address=0.0.0.0&#x27; &gt;&gt; /etc/my.cnf echo &#x27;basedir=/usr/local/mysql&#x27; &gt;&gt; /etc/my.cnf echo &#x27;datadir=/usr/local/mysql/data&#x27; &gt;&gt; /etc/my.cnf echo &#x27;socket=/tmp/mysql.sock&#x27; &gt;&gt; /etc/my.cnf echo &#x27;user=root&#x27; &gt;&gt; /etc/my.cnf echo &#x27;port=3306&#x27; &gt;&gt; /etc/my.cnf echo &#x27;character-set-server=utf8&#x27; &gt;&gt; /etc/my.cnf echo &#x27;#skip-grant-tables&#x27; &gt;&gt; /etc/my.cnf echo &#x27;# Disabling symbolic-links is recommended to prevent assorted security risks&#x27; &gt;&gt; /etc/my.cnf echo &#x27;symbolic-links=0&#x27; &gt;&gt; /etc/my.cnf echo &#x27;[mysqld_safe]&#x27; &gt;&gt; /etc/my.cnf echo &#x27;log-error=/var/log/mysqld.log&#x27; &gt;&gt; /etc/my.cnf echo &#x27;pid-file=/var/run/mysqld/mysqld.pid&#x27; &gt;&gt; /etc/my.cnf echo &#x27;!includedir /etc/my.cnf.d&#x27; &gt;&gt; /etc/my.cnf sudo systemctl restart mysqld sudo systemctl status mysqld 1、 修改用户密码（init.sql） flush privileges; #修改root密码为root alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;root&#x27;; #刷新权限 flush privileges; 2、远程登录 use mysql; update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;; #刷新权限 flush privileges; 3、添加用户 #添加用户“xiao&quot;，密码为: aquatic@zkcm create user &#x27;cpbdb&#x27;@&#x27;%&#x27; identified by &#x27;cpbdb@zkcm&#x27;; #赋权所有权限，并且可以查看所有表 grant all privileges on *.* to &#x27;cpbdb&#x27;@&#x27;%&#x27;; #赋权test数据库所有权限，只可以使用数据库test grant all privileges on cpbdb.* to &#x27;cpbdb&#x27;@&#x27;%&#x27;; #刷新权限 flush privileges; revoke all privileges on *.* from &#x27;cpbdb&#x27;@&#x27;%&#x27;; 4、查找并删除mysql有关的文件 find / -name mysql rm -rf 上边查找到的路径，多个路径用空格隔开 #或者下边一条命令即可 find / -name mysql|xargs rm -rf 5、建库 CREATE DATABASE `fx` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; CREATE DATABASE `cpbdb-backup` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; CREATE DATABASE `cpbdb-dev` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; CREATE DATABASE `cpbdb-dev-test` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; CREATE DATABASE `cpbdb` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"}]},{"title":"VMware Workstation 15 Pro 密钥","slug":"VMware Workstation 15 Pro 密钥","date":"2020-08-10T07:32:00.000Z","updated":"2020-08-10T07:53:07.967Z","comments":true,"path":"2020/08/10/VMware Workstation 15 Pro 密钥/","link":"","permalink":"http://yoursite.com/2020/08/10/VMware%20Workstation%2015%20Pro%20%E5%AF%86%E9%92%A5/","excerpt":"","text":"VMware Workstation 15 Pro 密钥UG5J2-0ME12-M89WY-NPWXX-WQH88 GA590-86Y05-4806Y-X4PEE-ZV8E0 YA18K-0WY8P-H85DY-L4NZG-X7RAD UA5DR-2ZD4H-089FY-6YQ5T-YPRX6 B806Y-86Y05-GA590-X4PEE-ZV8E0 ZF582-0NW5N-H8D2P-0XZEE-Z22VA","categories":[],"tags":[{"name":"VMware Workstation","slug":"VMware-Workstation","permalink":"http://yoursite.com/tags/VMware-Workstation/"}]},{"title":"Vue代理","slug":"Vue相关","date":"2020-08-10T07:32:00.000Z","updated":"2020-12-22T10:58:40.980Z","comments":true,"path":"2020/08/10/Vue相关/","link":"","permalink":"http://yoursite.com/2020/08/10/Vue%E7%9B%B8%E5%85%B3/","excerpt":"","text":"资源路径代理（图片等）修改index.jsproxyTable: &#123; &quot;/resources&quot;: &#123; target: &quot;http://localhost:9100/&quot;, //这里填写后端存放资源文件的域名 ws: true, changeOrigin: true, 是否跨域 // 如果接口中是没有api的，那就直接置空（如上）。如果接口中有api，就需要写成&#123;‘^/api’:‘/api’&#125; pathRewrite: &#123; &quot;/api&quot;: &quot;/&quot; &#125; &#125;, version: &#x27;3&#x27; services: febs-gateway: image: febs-gateway:latest container_name: febs-gateway depends_on: - febs-register volumes: - &quot;/home/docker/febs/logs:/log&quot; command: - &quot;--nacos.url=192.168.186.140&quot; ports: - 8301:8301 febs-auth: image: febs-auth:latest container_name: febs-auth depends_on: - febs-register volumes: - &quot;/home/docker/febs/logs:/log&quot; command: - &quot;--nacos.url=192.168.186.140&quot; - &quot;--mysql.username=root&quot; - &quot;--mysql.password=zkcmroot&quot; - &quot;--mysql.url=192.168.30.100&quot; - &quot;--redis.url=192.168.30.100&quot; febs-server-system: image: febs-server-system:latest container_name: febs-server-system depends_on: - febs-register volumes: - &quot;/home/docker/febs/logs:/log&quot; command: - &quot;--nacos.url=192.168.186.140&quot; - &quot;--rabbitmq.url=192.168.186.140&quot; - &quot;--rabbitmq.username=admin&quot; - &quot;--rabbitmq.password=admin&quot; febs-server-test: image: febs-server-test:latest container_name: febs-server-test depends_on: - febs-register volumes: - &quot;/home/docker/febs/logs:/log&quot; command: - &quot;--nacos.url=192.168.186.140&quot; - &quot;--rabbitmq.url=192.168.186.140&quot; - &quot;--rabbitmq.username=admin&quot; - &quot;--rabbitmq.password=admin&quot;","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"}]},{"title":"VMWare Centos7 NAT模式","slug":"虚拟机NAT模式","date":"2020-08-10T07:32:00.000Z","updated":"2020-11-02T01:14:15.639Z","comments":true,"path":"2020/08/10/虚拟机NAT模式/","link":"","permalink":"http://yoursite.com/2020/08/10/%E8%99%9A%E6%8B%9F%E6%9C%BANAT%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"1、VMware设置点击 编辑 -&gt; 虚拟网络编辑器 -&gt; 更改设置 选择 NAT模式，具体勾选如下： 打开 NAT设置，记录子网掩码，网关ip 记录网段信息 2、登录虚拟机root用户登录虚拟机，输入以命令，编辑保存 vi /etc/sysconfig/network-scripts/ifcfg-ens33 BOOTPROTO=&quot;static&quot; ONBOOT=yes IPADDR=192.168.186.130 METMASK=255.255.255.0 GATEWAY=192.168.186.2 DNS=8.8.8.8 vi /etc/resolv.conf 编辑DNS，填入网关的IP nameserver 192.168.190.2 输入一下命令，重启network systemctl restart network 3、验证 输入以下命令，查看结果 ping www.baidu.com","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Node","slug":"Node","date":"2020-08-10T07:32:00.000Z","updated":"2020-08-31T02:25:35.496Z","comments":true,"path":"2020/08/10/Node/","link":"","permalink":"http://yoursite.com/2020/08/10/Node/","excerpt":"","text":"换源持久使用 npm config set registry https://registry.npm.taobao.org 配置后可通过下面方式来验证是否成功 npm config get registry","categories":[],"tags":[{"name":"Node","slug":"Node","permalink":"http://yoursite.com/tags/Node/"}]},{"title":"SELinux","slug":"SELinux","date":"2020-08-10T07:32:00.000Z","updated":"2020-09-07T09:43:32.756Z","comments":true,"path":"2020/08/10/SELinux/","link":"","permalink":"http://yoursite.com/2020/08/10/SELinux/","excerpt":"","text":"SELinux查看SELinux状态： 1、/usr/sbin/sestatus -v ##如果SELinux status参数为enabled即为开启状态 SELinux status: enabled 2、getenforce ##也可以用这个命令检查 关闭SELinux： 1、临时关闭（不用重启机器）： setenforce 0 ##设置SELinux 成为permissive模式 √ setenforce 1 ##设置SELinux 成为enforcing模式 2、修改配置文件需要重启机器： 修改/etc/selinux/config 文件 将SELINUX=enforcing改为SELINUX=disabled 重启机器即可","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Consul","slug":"Consul","date":"2020-08-10T07:32:00.000Z","updated":"2020-09-08T02:51:18.339Z","comments":true,"path":"2020/08/10/Consul/","link":"","permalink":"http://yoursite.com/2020/08/10/Consul/","excerpt":"","text":"安装1.下载 wget https://releases.hashicorp.com/consul/1.8.3/consul_1.8.3_linux_amd64.zip curl https://releases.hashicorp.com/consul/1.8.3/consul_1.8.3_linux_amd64.zip &gt; consul.zip ps:下载过慢请试着直接浏览器下载，再用FTP工具上传至服务器 2.解压 1.安装unzip yum -y install zip unzip 2.解压 unzip consul.zip ui界面启动./consul agent -dev -client 0.0.0.0 -ui 访问 IP:8500 记得开端口，或者把防火墙关闭","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"Consul","slug":"Consul","permalink":"http://yoursite.com/tags/Consul/"}]},{"title":"httpd","slug":"httpd","date":"2020-08-10T07:32:00.000Z","updated":"2020-09-16T08:47:32.088Z","comments":true,"path":"2020/08/10/httpd/","link":"","permalink":"http://yoursite.com/2020/08/10/httpd/","excerpt":"","text":"安装yum -y install httpd.x86_64 配置文件(位置：/etc/httpd/conf/httpd.conf)Listen 80 Listen 192.168.31.30:8080 &lt;virtualhost 192.168.31.30:8080&gt; Documentroot /home/diskdata/ftp/minioData &lt;Directory &quot;/home/diskdata/ftp/minioData&quot;&gt; Options FollowSymLinks AllowOverride none Require all granted &lt;/Directory&gt; &lt;/virtualhost&gt; 第一、启动、终止、重启systemctl start httpd.service #启动 systemctl stop httpd.service #停止 systemctl restart httpd.service #重启 第二、设置开机启动/关闭systemctl enable httpd.service #开机启动 systemctl disable httpd.service #开机不启动 第三、检查httpd状态systemctl status httpd.service 解决启动Apache遇到的问题Permission denied: AH00072: make_sock: could not bind to address 0.0.0.0:88881.可能原因：SELinux限制了Apache的端口设置 2.关闭SELinux setenforce 0 ##设置SELinux 成为permissive模式 √ 3. //安装semanage yum provides /usr/sbin/semanage yum -y install policycoreutils-python //查看默认允许的端口 semanage port -l | grep -w http_port_t // http_port_t tcp 80, 81, 443, 488, 8008, 8009, 8443, 9000 //使用semanage添加apache侦听的端口 semanage port -a -t http_port_t -p tcp 8888 //启动apache systemctl start httpd","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"httpd","slug":"httpd","permalink":"http://yoursite.com/tags/httpd/"}]},{"title":"CentOS 7中添加一个新用户并授权","slug":"Centos7添加用户","date":"2020-08-10T07:32:00.000Z","updated":"2020-11-05T02:36:21.053Z","comments":true,"path":"2020/08/10/Centos7添加用户/","link":"","permalink":"http://yoursite.com/2020/08/10/Centos7%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/","excerpt":"","text":"CentOS 7中添加一个新用户并授权创建新用户创建一个用户名为：linuxidc [root@localhost ~]# adduser linuxidc 为这个用户初始化密码，linux会判断密码复杂度，不过可以强行忽略： [root@localhost ~]# passwd linuxidc 更改用户 zhangbiao 的密码 。 新的 密码： 无效的密码： 密码未通过字典检查 - 过于简单化/系统化 重新输入新的 密码： passwd：所有的身份验证令牌已经成功更新。 授权个人用户的权限只可以在本home下有完整权限，其他目录要看别人授权。而经常需要root用户的权限，这时候sudo可以化身为root来操作。我记得我曾经sudo创建了文件，然后发现自己并没有读写权限，因为查看权限是root创建的。 新创建的用户并不能使用sudo命令，需要给他添加授权。 sudo命令的授权管理是在sudoers文件里的。可以看看sudoers： [root@localhost ~]# sudoers bash: sudoers: 未找到命令... [root@localhost ~]# whereis sudoers sudoers: /etc/sudoers /etc/sudoers.d /usr/libexec/sudoers.so /usr/share/man/man5/sudoers.5.gz 找到这个文件位置之后再查看权限： [root@localhost ~]# ls -l /etc/sudoers -r--r----- 1 root root 4251 9月 25 15:08 /etc/sudoers 是的，只有只读的权限，如果想要修改的话，需要先添加w权限： [root@localhost ~]# chmod -v u+w /etc/sudoers mode of &quot;/etc/sudoers&quot; changed from 0440 (r--r-----) to 0640 (rw-r-----) 然后就可以添加内容了，在下面的一行下追加新增的用户： [root@localhost ~]# vim /etc/sudoers ## Allow root to run any commands anywher root ALL=(ALL) ALL linuxidc ALL=(ALL) ALL #这个是新增的用户 默认5分钟后刚才输入的sudo密码过期，下次sudo需要重新输入密码，如果觉得在sudo的时候输入密码麻烦，把刚才的输入换成如下内容即可： linuxidc ALL=(ALL) NOPASSWD:ALL wq保存退出，这时候要记得将写权限收回： [root@localhost ~]# chmod -v u-w /etc/sudoers mode of &quot;/etc/sudoers&quot; changed from 0640 (rw-r-----) to 0440 (r--r-----) 这时候使用新用户登录，使用sudo： [linuxidc@localhost ~]$ sudo cat /etc/passwd [sudo] password for linuxidc: We trust you have received the usual lecture from the local System Administrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility. 第一次使用会提示你，你已经化身超人，身负责任。而且需要输入密码才可以下一步。如果不想需要输入密码怎么办，将最后一个ALL修改成NOPASSWD: ALL。","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"}]},{"title":"Centos7安装Node+Npm","slug":"Centos7安装Node+Npm","date":"2020-08-10T07:32:00.000Z","updated":"2020-09-22T07:41:52.565Z","comments":true,"path":"2020/08/10/Centos7安装Node+Npm/","link":"","permalink":"http://yoursite.com/2020/08/10/Centos7%E5%AE%89%E8%A3%85Node+Npm/","excerpt":"","text":"Centos7安装Node+Npm node官网下载node（**Linux Binaries (x64)**）安装包 https://nodejs.org/zh-cn/download/ 执行解压操作 tar -xvf node-v10.16.3-linux-x64.tar.xz 确认一下nodejs下bin目录是否有node 和npm文件,如果有执行软连接，如果没有重新下载 建立软连接，变为全局,对应自己路径 ln -s /usr/local/src/node-v10.16.3-linux-x64/bin/npm /usr/local/bin/(此处不改) ln -s /usr/local/src/node-v10.16.3-linux-x64/bin/node /usr/local/bin/ 验证node是否生效 npm -v node -v npm换源npm config set registry https://registry.npm.taobao.org // 配置后可通过下面方式来验证是否成功 npm config get registry","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"},{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"}]},{"title":"Nginx脚本安装","slug":"Nginx脚本安装","date":"2020-08-10T07:32:00.000Z","updated":"2020-11-19T06:47:26.254Z","comments":true,"path":"2020/08/10/Nginx脚本安装/","link":"","permalink":"http://yoursite.com/2020/08/10/Nginx%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/","excerpt":"","text":"安装依赖1 gcc 安装 yum install -y gcc gcc-c++ 2 PCRE pcre-devel 安装 yum install -y pcre pcre-devel 3 zlib 安装 yum install -y zlib zlib-devel 4 OpenSSL 安装 yum install -y openssl openssl-devel 脚本#!/bin/bash #安装目录 data=&quot;usr/local&quot; #压缩包目录 default=&quot;home/mirror/nginx&quot; #安装依赖 #1 gcc 安装 yum install -y gcc gcc-c++ #2 PCRE pcre-devel 安装 yum install -y pcre pcre-devel #3 zlib 安装 yum install -y zlib zlib-devel #4 OpenSSL 安装 yum install -y openssl openssl-devel ## 解压 tar -xvf ./nginx-1.19.1.tar.gz -C /$&#123;data&#125;/ mv /$&#123;data&#125;/nginx-1.19.1 /$&#123;data&#125;/nginx ##进入nginx目录 cd /$&#123;data&#125;/nginx ## 配置 ./configure --prefix=/usr/local/nginx # make make make install rm -rf logs mkdir logs chmod 700 logs # cd到刚才配置的安装目录/usr/loca/nginx/ cd /usr/local/nginx ./sbin/nginx -t #在文件的最后一行加入文件引入 cd conf sed -i &#x27;$d&#x27; nginx.conf echo &#x27;include /&#x27;$&#123;default&#125;&#x27;/default.conf;&#x27; &gt;&gt; nginx.conf echo &#x27;&#125;&#x27; &gt;&gt; nginx.conf firewall-cmd --zone=public --add-port=80/tcp --permanent systemctl restart firewalld.service default.conf upstream /backApi &#123; server 127.0.0.1:9100; &#125; server &#123; listen 80 default_server; server_name www.xxxx.com; index index.html; location / &#123; alias /root; index index.html index.htm; &#125; location /api &#123; rewrite ^/api/(.*)$ /$1 break; proxy_pass http://backApi; proxy_set_header Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Proxy-Client-IP $remote_addr; &#125; &#125; server &#123; listen 8888 server_name www.xxxx.com; location /wqe/ &#123; alais /home/xxxx &#125; &#125; 目录浏览配置autoindex_localtime on; 默认为off，显示的文件时间为GMT时间。 改为on后，显示的文件时间为文件的服务器时间。 autoindex_exact_size off; 默认为on，显示出文件的确切大小，单位是bytes。 改为off后，显示出文件的大概大小，单位是kB或者MB或者GB。 charset utf-8,gbk; 解决中文乱码问题。","categories":[],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-08-07T08:51:47.528Z","updated":"2020-08-07T11:03:38.360Z","comments":true,"path":"2020/08/07/hello-world/","link":"","permalink":"http://yoursite.com/2020/08/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"Test","slug":"Test","permalink":"http://yoursite.com/categories/Test/"}],"tags":[{"name":"Test","slug":"Test","permalink":"http://yoursite.com/tags/Test/"}]}],"categories":[{"name":"Test","slug":"Test","permalink":"http://yoursite.com/categories/Test/"}],"tags":[{"name":"blogs","slug":"blogs","permalink":"http://yoursite.com/tags/blogs/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"http://yoursite.com/tags/Spring-Cloud/"},{"name":"服务注册与发现","slug":"服务注册与发现","permalink":"http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"},{"name":"FFmpeg","slug":"FFmpeg","permalink":"http://yoursite.com/tags/FFmpeg/"},{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://yoursite.com/tags/elasticsearch/"},{"name":"Kafka","slug":"Kafka","permalink":"http://yoursite.com/tags/Kafka/"},{"name":"Spring-Boot","slug":"Spring-Boot","permalink":"http://yoursite.com/tags/Spring-Boot/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"Rabbit","slug":"Rabbit","permalink":"http://yoursite.com/tags/Rabbit/"},{"name":"消息队列","slug":"消息队列","permalink":"http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"JDK","slug":"JDK","permalink":"http://yoursite.com/tags/JDK/"},{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"ftp","slug":"ftp","permalink":"http://yoursite.com/tags/ftp/"},{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"mongo","slug":"mongo","permalink":"http://yoursite.com/tags/mongo/"},{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"},{"name":"Navicat","slug":"Navicat","permalink":"http://yoursite.com/tags/Navicat/"},{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"},{"name":"VMware Workstation","slug":"VMware-Workstation","permalink":"http://yoursite.com/tags/VMware-Workstation/"},{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"Node","slug":"Node","permalink":"http://yoursite.com/tags/Node/"},{"name":"Consul","slug":"Consul","permalink":"http://yoursite.com/tags/Consul/"},{"name":"httpd","slug":"httpd","permalink":"http://yoursite.com/tags/httpd/"},{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"},{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"},{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"},{"name":"Test","slug":"Test","permalink":"http://yoursite.com/tags/Test/"}]}