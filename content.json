{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-08-05T15:56:25.000Z","updated":"2020-08-05T16:00:59.071Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"SpringBoot整合数据库配置#DB Configuration: spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://192.168.127.130:3306/db1?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8 spring.datasource.username=root spring.datasource.password=Root123_gg spring.datasource.type=com.alibaba.druid.pool.DruidDataSource MyBatis依赖&lt;!--mybatis起步依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- MySQL连接驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;LATEST&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.9&lt;/version&gt; &lt;/dependency&gt; 配置#spring集成Mybatis环境 #pojo别名扫描包 mybatis.type-aliases-package=xjl.domain #加载Mybatis映射文件 mybatis.mapper-locations=classpath:mapper/*Mapper.xml Jpa依赖&lt;!-- MySQL连接驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;LATEST&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.9&lt;/version&gt; &lt;/dependency&gt; &lt;!-- springBoot JPA的起步依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; 配置#指定数据库类型 spring.jpa.database=MySQL #是否显示sql语句 spring.jpa.show-sql=true spring.jpa.generate-ddl=true #是否自动创建数据库表 spring.jpa.hibernate.ddl-auto=update spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy 示例实体类@Entity public class User &#123; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String username; private String password; private String active; 接口public interface StudentMapper extends JpaRepository&lt;Student,Long&gt; &#123; //@Query 使用jpql的方式查询。 @Query(value=&quot;from Customer&quot;) List&lt;Customer&gt; findAllCustomer(); //@Query 使用hql的方式查询。?1代表参数的占位符，其中1对应方法中的参数索引 @Query(value=&quot;from Customer where custName = ?1&quot;) Customer findCustomer(String custName); //用 @Modifying 来将该操作标识为修改查询，这样框架最终会生成一个更新的操作，而非查询 @Query(value=&quot;update Customer set custName = ?1 where custId = ?2&quot;) @Modifying void updateCustomer(String custName, Long custId); /** * nativeQuery : 使用本地sql的方式查询 */ @Query(value=&quot;select * from cst_customer&quot;,nativeQuery=true) void findSql(); &#125; 使用&lt;!--内置方法--&gt; List&lt;Customer&gt; customers = studentMapper.findAll(); for (Customer customer : customers) &#123; System.out.println(customer); &#125; &lt;!--自定义--&gt; . . . Redis依赖&lt;!-- 配置使用redis启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; 配置#Redis spring.redis.host=127.0.0.1 spring.redis.port=6379 示例Test public void test3() throws JsonProcessingException &#123; //从redis缓存中获得指定的数据 String userListData = redisTemplate.boundValueOps(&quot;user.findAll&quot;).get(); //如果redis中没有数据的话 if(null==userListData)&#123; //查询数据库获得数据 List&lt;User&gt; all = userDao.findAll(); //转换成json格式字符串 ObjectMapper om = new ObjectMapper(); userListData = om.writeValueAsString(all); //将数据存储到redis中，下次在查询直接从redis中获得数据，不用在查询数据库 redisTemplate.boundValueOps(&quot;user.findAll&quot;).set(userListData); System.out.println(&quot;===============从数据库获得数据===============&quot;); &#125;else&#123; System.out.println(&quot;===============从redis缓存中获得数据===============&quot;); &#125; System.out.println(userListData); &#125;"}],"posts":[{"title":"第一篇博客","slug":"第一篇博客","date":"2020-08-05T10:38:43.000Z","updated":"2020-08-05T10:39:43.972Z","comments":true,"path":"2020/08/05/第一篇博客/","link":"","permalink":"http://yoursite.com/2020/08/05/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"安装前准备vsftpd是linux下的一款小巧轻快，安全易用的FTP服务器软件，是一款在各个Linux发行版中最受推崇的FTP服务器软件。 1.安装vsftpd，直接yum 安装就可以了 yum install -y vsftpd 2.相关配置文件： cd /etc/vsftpd 3.启动服务 systemctl enable vsftpd.service //设置开机自启动 systemctl start vsftpd.service //启动ftp服务 netstat -antup | grep ftp //查看ftp服务端口 4.另外简单介绍下vsftpd.conf的配置文件参数说明。 cat /etc/vsftpd/vsftpd.conf","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-08-05T09:48:40.724Z","updated":"2020-08-05T09:48:40.724Z","comments":true,"path":"2020/08/05/hello-world/","link":"","permalink":"http://yoursite.com/2020/08/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}